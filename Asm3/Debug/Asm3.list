
Asm3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005a60  08005a60  00015a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e44  08005e44  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08005e44  08005e44  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e44  08005e44  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001f8  08006044  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08006044  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaa4  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  0002accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002c5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa54  00000000  00000000  0002d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006288  00000000  00000000  0003d01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004e43b  00000000  00000000  000432a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  000916df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  000917b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a44 	.word	0x08005a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08005a44 	.word	0x08005a44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <Button_Init>:

GPIO_InitTypeDef 	GPIO_InitStructure;

//Init Button
void Button_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	//Init B2
	RCC_AHB1PeriphClockCmd(BUTTONB2Control_SetClock, ENABLE);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2002      	movs	r0, #2
 8000c62:	f001 fdf7 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = BUTTONB2_GPIO_PIN;
 8000c66:	2308      	movs	r3, #8
 8000c68:	603b      	str	r3, [r7, #0]

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	713b      	strb	r3, [r7, #4]

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	717b      	strb	r3, [r7, #5]

	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(BUTTONB2_GPIO_PORT, &GPIO_InitStruct);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <Button_Init+0x54>)
 8000c7c:	f001 fa70 	bl	8002160 <GPIO_Init>

	//Init B3

	RCC_AHB1PeriphClockCmd(BUTTONB3Control_SetClock, ENABLE);
 8000c80:	2101      	movs	r1, #1
 8000c82:	2001      	movs	r0, #1
 8000c84:	f001 fde6 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = BUTTONB3_GPIO_PIN;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	603b      	str	r3, [r7, #0]

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	713b      	strb	r3, [r7, #4]

	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000c90:	2302      	movs	r3, #2
 8000c92:	717b      	strb	r3, [r7, #5]

	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(BUTTONB3_GPIO_PORT, &GPIO_InitStruct);
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <Button_Init+0x58>)
 8000c9e:	f001 fa5f 	bl	8002160 <GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <Interrupt_Init>:

//B3:PA4
static void Interrupt_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
	//B2 interrupt config
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(SYSCFG_Clock, ENABLE);
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cc0:	f001 fe08 	bl	80028d4 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f001 fe24 	bl	8002914 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 fe20 	bl	8002914 <SYSCFG_EXTILineConfig>

	EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 f99d 	bl	8002028 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 f92f 	bl	8001f64 <NVIC_Init>

	//B3 interrupt config
	EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 8000d06:	2310      	movs	r3, #16
 8000d08:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f984 	bl	8002028 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 8000d20:	230a      	movs	r3, #10
 8000d22:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f916 	bl	8001f64 <NVIC_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <BuzzerControl_SendPacket>:

//Function ID for transmission frame
static uint8_t FunctionId = 1;
void BuzzerControl_SendPacket(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
	//Init Checkxor byte
	uint8_t checkXor = CXOR_INIT_VAL;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	73bb      	strb	r3, [r7, #14]

	//option
	checkXor ^= OPTION; //0x00

	//CMD_ID
	checkXor ^= 0x04;
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	f083 0304 	eor.w	r3, r3, #4
 8000d50:	73bb      	strb	r3, [r7, #14]

	//CMD_TYPE	RES(send data)
	checkXor ^= 0x01;//0x01
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	73bb      	strb	r3, [r7, #14]

	//Payload
	checkXor ^= 0x01;//0x00
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	73bb      	strb	r3, [r7, #14]

	//FUNC_ID
	checkXor ^= FunctionId;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	4053      	eors	r3, r2
 8000d6a:	73bb      	strb	r3, [r7, #14]

	uint8_t data[] = {0xB1, 0x06, 0x00, 0x04, 0x01, 0x01, FunctionId, checkXor};
 8000d6c:	23b1      	movs	r3, #177	; 0xb1
 8000d6e:	713b      	strb	r3, [r7, #4]
 8000d70:	2306      	movs	r3, #6
 8000d72:	717b      	strb	r3, [r7, #5]
 8000d74:	2300      	movs	r3, #0
 8000d76:	71bb      	strb	r3, [r7, #6]
 8000d78:	2304      	movs	r3, #4
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	723b      	strb	r3, [r7, #8]
 8000d80:	2301      	movs	r3, #1
 8000d82:	727b      	strb	r3, [r7, #9]
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	72bb      	strb	r3, [r7, #10]
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	72fb      	strb	r3, [r7, #11]

	for(uint8_t i = 0; i < 8; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e015      	b.n	8000dc0 <BuzzerControl_SendPacket+0x80>
	{
		USART_SendData(USART2, (uint16_t)data[i]);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f107 0210 	add.w	r2, r7, #16
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <BuzzerControl_SendPacket+0xac>)
 8000da6:	f001 fed1 	bl	8002b4c <USART_SendData>
		while( !USART_GetFlagStatus(USART2,  USART_FLAG_TXE));
 8000daa:	bf00      	nop
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <BuzzerControl_SendPacket+0xac>)
 8000db0:	f001 ff36 	bl	8002c20 <USART_GetFlagStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f8      	beq.n	8000dac <BuzzerControl_SendPacket+0x6c>
	for(uint8_t i = 0; i < 8; i++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d9e6      	bls.n	8000d94 <BuzzerControl_SendPacket+0x54>
	}

	//Increase func_id max = 0xFE
	FunctionId++;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000dd0:	701a      	strb	r2, [r3, #0]
	if(FunctionId > 0xFE)
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2bff      	cmp	r3, #255	; 0xff
 8000dd8:	d102      	bne.n	8000de0 <BuzzerControl_SendPacket+0xa0>
	{
		FunctionId = 1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <BuzzerControl_SendPacket+0xa8>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	}
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	40004400 	.word	0x40004400

08000df0 <LedControl_SendPacket>:

//Update led state to PC
void LedControl_SendPacket(uint8_t led_id, uint8_t led_color, uint8_t led_state)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	71bb      	strb	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	717b      	strb	r3, [r7, #5]
	//Init Checkxor byte
	uint8_t checkXor = CXOR_INIT_VAL;
 8000e02:	23ff      	movs	r3, #255	; 0xff
 8000e04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//OPT
	checkXor ^= OPTION; //0x00

	//CMD_ID
	checkXor ^= 0x01;
 8000e08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e0c:	f083 0301 	eor.w	r3, r3, #1
 8000e10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//CMD_TYPE	RES(send data)
	checkXor ^= 0x02;//0x01
 8000e14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e18:	f083 0302 	eor.w	r3, r3, #2
 8000e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//Payload
	checkXor ^= led_id;//0x01,0x02
 8000e20:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4053      	eors	r3, r2
 8000e28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	checkXor ^= led_color;//0x00->0x02
 8000e2c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	4053      	eors	r3, r2
 8000e34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//if led turn on
	if(led_state == 1)
 8000e38:	797b      	ldrb	r3, [r7, #5]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d146      	bne.n	8000ecc <LedControl_SendPacket+0xdc>
	{
		//payload led state
		checkXor ^= 0x64;
 8000e3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e42:	f083 0364 	eor.w	r3, r3, #100	; 0x64
 8000e46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		//FUNC_ID
		checkXor ^= FunctionId;
 8000e4a:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e52:	4053      	eors	r3, r2
 8000e54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint8_t data[] = {0xB1, 0x08, 0x00, 0x01, 0x02, led_id, led_color, 0x64, FunctionId, checkXor};
 8000e58:	23b1      	movs	r3, #177	; 0xb1
 8000e5a:	763b      	strb	r3, [r7, #24]
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	767b      	strb	r3, [r7, #25]
 8000e60:	2300      	movs	r3, #0
 8000e62:	76bb      	strb	r3, [r7, #26]
 8000e64:	2301      	movs	r3, #1
 8000e66:	76fb      	strb	r3, [r7, #27]
 8000e68:	2302      	movs	r3, #2
 8000e6a:	773b      	strb	r3, [r7, #28]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	777b      	strb	r3, [r7, #29]
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	77bb      	strb	r3, [r7, #30]
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	77fb      	strb	r3, [r7, #31]
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f887 3020 	strb.w	r3, [r7, #32]
 8000e80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		//send data
		for(uint8_t i = 0; i < 10; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e8e:	e018      	b.n	8000ec2 <LedControl_SendPacket+0xd2>
		{
			USART_SendData(USART2, (uint16_t)data[i]);
 8000e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e98:	4413      	add	r3, r2
 8000e9a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4833      	ldr	r0, [pc, #204]	; (8000f70 <LedControl_SendPacket+0x180>)
 8000ea4:	f001 fe52 	bl	8002b4c <USART_SendData>
			while( !USART_GetFlagStatus(USART2,  USART_FLAG_TXE));
 8000ea8:	bf00      	nop
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <LedControl_SendPacket+0x180>)
 8000eae:	f001 feb7 	bl	8002c20 <USART_GetFlagStatus>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f8      	beq.n	8000eaa <LedControl_SendPacket+0xba>
		for(uint8_t i = 0; i < 10; i++)
 8000eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d9e2      	bls.n	8000e90 <LedControl_SendPacket+0xa0>
 8000eca:	e03d      	b.n	8000f48 <LedControl_SendPacket+0x158>
	{
		//payload led state
		checkXor ^= 0x00;

		//FUNC_ID
		checkXor ^= FunctionId;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		uint8_t data[]= {0xB1, 0x08, 0x00, 0x01, 0x02, led_id, led_color, 0x00, FunctionId, checkXor};
 8000eda:	23b1      	movs	r3, #177	; 0xb1
 8000edc:	733b      	strb	r3, [r7, #12]
 8000ede:	2308      	movs	r3, #8
 8000ee0:	737b      	strb	r3, [r7, #13]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	2302      	movs	r3, #2
 8000eec:	743b      	strb	r3, [r7, #16]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	747b      	strb	r3, [r7, #17]
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	74bb      	strb	r3, [r7, #18]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	74fb      	strb	r3, [r7, #19]
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	753b      	strb	r3, [r7, #20]
 8000f00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f04:	757b      	strb	r3, [r7, #21]

		//send data
		for(uint8_t i = 0; i < 10; i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f0c:	e018      	b.n	8000f40 <LedControl_SendPacket+0x150>
		{
			USART_SendData(USART2, (uint16_t)data[i]);
 8000f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f16:	4413      	add	r3, r2
 8000f18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <LedControl_SendPacket+0x180>)
 8000f22:	f001 fe13 	bl	8002b4c <USART_SendData>
			while( !USART_GetFlagStatus(USART2,  USART_FLAG_TXE));
 8000f26:	bf00      	nop
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <LedControl_SendPacket+0x180>)
 8000f2c:	f001 fe78 	bl	8002c20 <USART_GetFlagStatus>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f8      	beq.n	8000f28 <LedControl_SendPacket+0x138>
		for(uint8_t i = 0; i < 10; i++)
 8000f36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d9e2      	bls.n	8000f0e <LedControl_SendPacket+0x11e>
		}
	}

	//Increase func_id until func_id = 0xFE then reset
	FunctionId++;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000f52:	701a      	strb	r2, [r3, #0]
	if(FunctionId > 0xFE)
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2bff      	cmp	r3, #255	; 0xff
 8000f5a:	d102      	bne.n	8000f62 <LedControl_SendPacket+0x172>
	{
		FunctionId = 1;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <LedControl_SendPacket+0x17c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	}
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	40004400 	.word	0x40004400

08000f74 <EXTI3_IRQHandler>:

//B2 press interupt handler
void EXTI3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line3) == SET)
 8000f78:	2008      	movs	r0, #8
 8000f7a:	f001 f8c7 	bl	800210c <EXTI_GetFlagStatus>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d110      	bne.n	8000fa6 <EXTI3_IRQHandler+0x32>
	{
		//Send data for turn on buzzer to PC
		BuzzerControl_SendPacket();
 8000f84:	f7ff fedc 	bl	8000d40 <BuzzerControl_SendPacket>

		//Turn on buzzer
		GPIO_WriteBit(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <EXTI3_IRQHandler+0x3c>)
 8000f90:	f001 f974 	bl	800227c <GPIO_WriteBit>
		delay(200);
 8000f94:	20c8      	movs	r0, #200	; 0xc8
 8000f96:	f000 fd39 	bl	8001a0c <delay>

		//Turn off buzzer
		GPIO_WriteBit(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <EXTI3_IRQHandler+0x3c>)
 8000fa2:	f001 f96b 	bl	800227c <GPIO_WriteBit>
	}

	//Clear pending bit so that interrupt will not repeat
	EXTI_ClearITPendingBit(EXTI_Line3);
 8000fa6:	2008      	movs	r0, #8
 8000fa8:	f001 f8ca 	bl	8002140 <EXTI_ClearITPendingBit>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <EXTI4_IRQHandler>:
//3 : LED2_RED
//4 : LED2_GREEN
//5 : LED2_BLUE
uint8_t led_state[] = {0, 0, 0, 0, 0, 0};
void EXTI4_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	if(EXTI_GetFlagStatus(EXTI_Line4) == SET)
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f001 f8a7 	bl	800210c <EXTI_GetFlagStatus>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d11e      	bne.n	8001002 <EXTI4_IRQHandler+0x4e>
	{
		//if led off then turn on
		if(led_state[4] == 0)
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <EXTI4_IRQHandler+0x58>)
 8000fc6:	791b      	ldrb	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10d      	bne.n	8000fe8 <EXTI4_IRQHandler+0x34>
		{
			led_state[4] = 1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <EXTI4_IRQHandler+0x58>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	711a      	strb	r2, [r3, #4]
			//Send data to PC
			LedControl_SendPacket(LED_ID_2, LED_COLOR_GREEN, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff ff0a 	bl	8000df0 <LedControl_SendPacket>
			//Turn on led
			GPIO_WriteBit(LED1_GREEN_GPIO_PORT, LED1_GREEN_GPIO_PIN, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2101      	movs	r1, #1
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <EXTI4_IRQHandler+0x5c>)
 8000fe2:	f001 f94b 	bl	800227c <GPIO_WriteBit>
 8000fe6:	e00c      	b.n	8001002 <EXTI4_IRQHandler+0x4e>
		}
		//if led on then turn off
		else
		{
			led_state[4] = 0;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <EXTI4_IRQHandler+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	711a      	strb	r2, [r3, #4]
			//Send data to PC
			LedControl_SendPacket(LED_ID_2, LED_COLOR_GREEN, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff fefc 	bl	8000df0 <LedControl_SendPacket>
			//Turn off led
			GPIO_WriteBit(LED1_GREEN_GPIO_PORT, LED1_GREEN_GPIO_PIN, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <EXTI4_IRQHandler+0x5c>)
 8000ffe:	f001 f93d 	bl	800227c <GPIO_WriteBit>
		}
	}
	//Clear pending bit so that interrupt will not repeat
	EXTI_ClearITPendingBit(EXTI_Line4);
 8001002:	2010      	movs	r0, #16
 8001004:	f001 f89c 	bl	8002140 <EXTI_ClearITPendingBit>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000348 	.word	0x20000348
 8001010:	40020000 	.word	0x40020000

08001014 <GPIO_I2CMaster_Inits>:

//I2C1_SDA: PB9
//I2C1_SCL:	PB8
//Init pins for I2C1
void GPIO_I2CMaster_Inits(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStruct;
	//Enable clock for I2C1
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
 800101a:	2101      	movs	r1, #1
 800101c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001020:	f001 fc38 	bl	8002894 <RCC_APB1PeriphClockCmd>

	//Enable clock for GPIOB
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);
 8001024:	2101      	movs	r1, #1
 8001026:	2002      	movs	r0, #2
 8001028:	f001 fc14 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	//Alternate function mode
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800102c:	2302      	movs	r3, #2
 800102e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001030:	2302      	movs	r3, #2
 8001032:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001034:	2301      	movs	r3, #1
 8001036:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStruct.GPIO_Pin = SCL_MASTER_PIN;
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	603b      	str	r3, [r7, #0]
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStruct);
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <GPIO_I2CMaster_Inits+0x64>)
 8001048:	f001 f88a 	bl	8002160 <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = SDA_MASTER_PIN;
 800104c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001050:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <GPIO_I2CMaster_Inits+0x64>)
 8001058:	f001 f882 	bl	8002160 <GPIO_Init>

	//config SCL and SDA for Alternate function mode
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
 800105c:	2204      	movs	r2, #4
 800105e:	2108      	movs	r1, #8
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <GPIO_I2CMaster_Inits+0x64>)
 8001062:	f001 f923 	bl	80022ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource9, GPIO_AF_I2C1);
 8001066:	2204      	movs	r2, #4
 8001068:	2109      	movs	r1, #9
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <GPIO_I2CMaster_Inits+0x64>)
 800106c:	f001 f91e 	bl	80022ac <GPIO_PinAFConfig>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020400 	.word	0x40020400

0800107c <I2CMaster_Inits>:

//Init I2C1 peripheral
void I2CMaster_Inits(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	I2C_InitTypeDef		I2C_InitStruct;
	I2C_InitStruct.I2C_ClockSpeed = I2C_SPEED;//FAST mode
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <I2CMaster_Inits+0x40>)
 8001084:	603b      	str	r3, [r7, #0]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001086:	2300      	movs	r3, #0
 8001088:	80bb      	strh	r3, [r7, #4]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 800108a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800108e:	80fb      	strh	r3, [r7, #6]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8001090:	2300      	movs	r3, #0
 8001092:	813b      	strh	r3, [r7, #8]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001098:	817b      	strh	r3, [r7, #10]
	//7 bits address
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800109a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109e:	81bb      	strh	r3, [r7, #12]

	//Init I2C1 peripheral
	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStruct);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <I2CMaster_Inits+0x44>)
 80010a6:	f001 f94b 	bl	8002340 <I2C_Init>

	//Enable I2C1 peripheral
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
 80010aa:	2101      	movs	r1, #1
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <I2CMaster_Inits+0x44>)
 80010ae:	f001 fa09 	bl	80024c4 <I2C_Cmd>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	00061a80 	.word	0x00061a80
 80010c0:	40005400 	.word	0x40005400

080010c4 <I2C_Start>:


//I2C_START condition
static void I2C_Start(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	//Wait until I2Cx is not busy
	while(I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));//??
 80010c8:	bf00      	nop
 80010ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <I2C_Start+0x34>)
 80010d0:	f001 fae4 	bl	800269c <I2C_GetFlagStatus>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f7      	bne.n	80010ca <I2C_Start+0x6>
    //Generate Start condition
	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);
 80010da:	2101      	movs	r1, #1
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <I2C_Start+0x34>)
 80010de:	f001 fa11 	bl	8002504 <I2C_GenerateSTART>

	while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
 80010e2:	bf00      	nop
 80010e4:	4905      	ldr	r1, [pc, #20]	; (80010fc <I2C_Start+0x38>)
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <I2C_Start+0x34>)
 80010e8:	f001 faa8 	bl	800263c <I2C_CheckEvent>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f8      	beq.n	80010e4 <I2C_Start+0x20>


}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00030001 	.word	0x00030001

08001100 <I2C_address_direction>:

//I2C master send Address for Slave and r/w bit
//direction: SEND or RECEIVE
static void I2C_address_direction (uint8_t SlaveAddr, uint8_t direction)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	//left shift address for 1 bit r/w
	SlaveAddr = SlaveAddr << 1;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
	if(direction == SEND)
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10e      	bne.n	800113a <I2C_address_direction+0x3a>
	{
		//inform that master wants to write to slave
		I2C_Send7bitAddress(I2C_MASTER_INSTANCE, SlaveAddr, I2C_Direction_Transmitter);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4810      	ldr	r0, [pc, #64]	; (8001164 <I2C_address_direction+0x64>)
 8001124:	f001 fa2e 	bl	8002584 <I2C_Send7bitAddress>
		while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001128:	bf00      	nop
 800112a:	490f      	ldr	r1, [pc, #60]	; (8001168 <I2C_address_direction+0x68>)
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <I2C_address_direction+0x64>)
 800112e:	f001 fa85 	bl	800263c <I2C_CheckEvent>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f8      	beq.n	800112a <I2C_address_direction+0x2a>
		//inform that master wants to read data from slave
		I2C_Send7bitAddress(I2C_MASTER_INSTANCE, SlaveAddr, I2C_Direction_Receiver);
		while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}

}
 8001138:	e010      	b.n	800115c <I2C_address_direction+0x5c>
	else if (direction == RECEIVE)
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10d      	bne.n	800115c <I2C_address_direction+0x5c>
		I2C_Send7bitAddress(I2C_MASTER_INSTANCE, SlaveAddr, I2C_Direction_Receiver);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2201      	movs	r2, #1
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <I2C_address_direction+0x64>)
 8001148:	f001 fa1c 	bl	8002584 <I2C_Send7bitAddress>
		while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 800114c:	bf00      	nop
 800114e:	4907      	ldr	r1, [pc, #28]	; (800116c <I2C_address_direction+0x6c>)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <I2C_address_direction+0x64>)
 8001152:	f001 fa73 	bl	800263c <I2C_CheckEvent>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f8      	beq.n	800114e <I2C_address_direction+0x4e>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40005400 	.word	0x40005400
 8001168:	00070082 	.word	0x00070082
 800116c:	00030002 	.word	0x00030002

08001170 <I2C_Transmit>:


//Send data to slave
static void I2C_Transmit(uint8_t Data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	I2C_SendData(I2C_MASTER_INSTANCE, Data);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <I2C_Transmit+0x30>)
 8001180:	f001 fa3e 	bl	8002600 <I2C_SendData>

	while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001184:	bf00      	nop
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <I2C_Transmit+0x34>)
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <I2C_Transmit+0x30>)
 800118a:	f001 fa57 	bl	800263c <I2C_CheckEvent>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f8      	beq.n	8001186 <I2C_Transmit+0x16>
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005400 	.word	0x40005400
 80011a4:	00070084 	.word	0x00070084

080011a8 <I2C_Stop>:

//Generate stop condition
static void I2C_Stop(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	//Generate Start condition
	I2C_GenerateSTOP(I2C_MASTER_INSTANCE, ENABLE);
 80011ac:	2101      	movs	r1, #1
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <I2C_Stop+0x10>)
 80011b0:	f001 f9c8 	bl	8002544 <I2C_GenerateSTOP>

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400

080011bc <I2C_receive_nack>:


//receive data accomplish nack
uint8_t I2C_receive_nack(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	uint8_t data_receive = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	71fb      	strb	r3, [r7, #7]

	I2C_AcknowledgeConfig(I2C_MASTER_INSTANCE, DISABLE);
 80011c6:	2100      	movs	r1, #0
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <I2C_receive_nack+0x38>)
 80011ca:	f001 f9f9 	bl	80025c0 <I2C_AcknowledgeConfig>

	//Wait until I2Cx is not busy
//	while(I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));
	while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_RECEIVED));
 80011ce:	bf00      	nop
 80011d0:	4909      	ldr	r1, [pc, #36]	; (80011f8 <I2C_receive_nack+0x3c>)
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <I2C_receive_nack+0x38>)
 80011d4:	f001 fa32 	bl	800263c <I2C_CheckEvent>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f8      	beq.n	80011d0 <I2C_receive_nack+0x14>
	data_receive = I2C_ReceiveData(I2C_MASTER_INSTANCE);
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <I2C_receive_nack+0x38>)
 80011e0:	f001 fa1e 	bl	8002620 <I2C_ReceiveData>
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]

	return data_receive;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400
 80011f8:	00030040 	.word	0x00030040

080011fc <I2C_receive_ack>:

//receive data accomplish ack
uint8_t I2C_receive_ack(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	uint8_t data_receive = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]

	I2C_AcknowledgeConfig(I2C_MASTER_INSTANCE, ENABLE);
 8001206:	2101      	movs	r1, #1
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <I2C_receive_ack+0x38>)
 800120a:	f001 f9d9 	bl	80025c0 <I2C_AcknowledgeConfig>

	//Wait until I2Cx is not busy
	while(! I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_RECEIVED));
 800120e:	bf00      	nop
 8001210:	4909      	ldr	r1, [pc, #36]	; (8001238 <I2C_receive_ack+0x3c>)
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <I2C_receive_ack+0x38>)
 8001214:	f001 fa12 	bl	800263c <I2C_CheckEvent>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f8      	beq.n	8001210 <I2C_receive_ack+0x14>

	data_receive = I2C_ReceiveData(I2C_MASTER_INSTANCE);
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <I2C_receive_ack+0x38>)
 8001220:	f001 f9fe 	bl	8002620 <I2C_ReceiveData>
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]

	return data_receive;
 8001228:	79fb      	ldrb	r3, [r7, #7]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	00030040 	.word	0x00030040
 800123c:	00000000 	.word	0x00000000

08001240 <CalculateTemp>:


//Formula for calculating temperature
float CalculateTemp(uint16_t data)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
	float result = (175.2*data)/65536-46.85;
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f971 	bl	8000534 <__aeabi_i2d>
 8001252:	a316      	add	r3, pc, #88	; (adr r3, 80012ac <CalculateTemp+0x6c>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <CalculateTemp+0x68>)
 800126a:	f7ff faf7 	bl	800085c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	a30a      	add	r3, pc, #40	; (adr r3, 80012a0 <CalculateTemp+0x60>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f80c 	bl	8000298 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc96 	bl	8000bb8 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
	return result;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ee07 3a90 	vmov	s15, r3
}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	cccccccd 	.word	0xcccccccd
 80012a4:	40476ccc 	.word	0x40476ccc
 80012a8:	40f00000 	.word	0x40f00000
 80012ac:	66666666 	.word	0x66666666
 80012b0:	4065e666 	.word	0x4065e666

080012b4 <CalculateHumi>:

//Formula for calculating humidity
float CalculateHumi(uint16_t data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	float result = 125.0*data/65536-6;
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f937 	bl	8000534 <__aeabi_i2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <CalculateHumi+0x60>)
 80012cc:	f7ff f99c 	bl	8000608 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <CalculateHumi+0x64>)
 80012de:	f7ff fabd 	bl	800085c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <CalculateHumi+0x68>)
 80012f0:	f7fe ffd2 	bl	8000298 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc5c 	bl	8000bb8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]
	return result;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ee07 3a90 	vmov	s15, r3
}
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	405f4000 	.word	0x405f4000
 8001318:	40f00000 	.word	0x40f00000
 800131c:	40180000 	.word	0x40180000

08001320 <TemHumSensor_readRegister>:
//Read temperature or humidity from sensor
//slave address: 0x40
//cmi_id: 0xE3: get temperature,    0xE5: get humidity
//temOrhumi: TEMPERATURE or HUMIDITY
float TemHumSensor_readRegister(uint8_t slave_addr, uint8_t cmd_id, uint8_t tempOrhumi)//0xE3: get tempereature
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	4613      	mov	r3, r2
 8001330:	717b      	strb	r3, [r7, #5]
	//data are got from sensor
	uint16_t data = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	817b      	strh	r3, [r7, #10]

	//result calculate from data
	float result = 0;
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]

	//Genrate start condition
	I2C_Start();
 800133c:	f7ff fec2 	bl	80010c4 <I2C_Start>

	//send 7 bits address to slave and 1 bit write
	I2C_address_direction(slave_addr, SEND);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fedb 	bl	8001100 <I2C_address_direction>

	//send cmd_id to slave
	I2C_Transmit(cmd_id);
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff0f 	bl	8001170 <I2C_Transmit>

	//Repeated start
	I2C_Stop();
 8001352:	f7ff ff29 	bl	80011a8 <I2C_Stop>
	I2C_Start();
 8001356:	f7ff feb5 	bl	80010c4 <I2C_Start>

	//Send 7 bits address to slave and 1 bit read
	I2C_address_direction(slave_addr, RECEIVE);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fece 	bl	8001100 <I2C_address_direction>

	//Get MS byte
	data = (uint16_t)I2C_receive_ack();
 8001364:	f7ff ff4a 	bl	80011fc <I2C_receive_ack>
 8001368:	4603      	mov	r3, r0
 800136a:	817b      	strh	r3, [r7, #10]
	//Get LS byte
	data = (data << 8 ) | (uint16_t)I2C_receive_nack();
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21c      	sxth	r4, r3
 8001372:	f7ff ff23 	bl	80011bc <I2C_receive_nack>
 8001376:	4603      	mov	r3, r0
 8001378:	b21b      	sxth	r3, r3
 800137a:	4323      	orrs	r3, r4
 800137c:	b21b      	sxth	r3, r3
 800137e:	817b      	strh	r3, [r7, #10]

	//Indentify whether get humidity or temperature
	switch(tempOrhumi)
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <TemHumSensor_readRegister+0x6c>
 8001386:	2b01      	cmp	r3, #1
 8001388:	d007      	beq.n	800139a <TemHumSensor_readRegister+0x7a>
			break;
		case HUMIDITY:
			result = CalculateHumi(data);
			break;
		default:
			break;
 800138a:	e00d      	b.n	80013a8 <TemHumSensor_readRegister+0x88>
			result = CalculateTemp(data);
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff56 	bl	8001240 <CalculateTemp>
 8001394:	ed87 0a03 	vstr	s0, [r7, #12]
			break;
 8001398:	e006      	b.n	80013a8 <TemHumSensor_readRegister+0x88>
			result = CalculateHumi(data);
 800139a:	897b      	ldrh	r3, [r7, #10]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff89 	bl	80012b4 <CalculateHumi>
 80013a2:	ed87 0a03 	vstr	s0, [r7, #12]
			break;
 80013a6:	bf00      	nop
	}

	//Generate stop condition
	I2C_Stop();
 80013a8:	f7ff fefe 	bl	80011a8 <I2C_Stop>

	return result;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	ee07 3a90 	vmov	s15, r3
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <ReadTemperature>:

//Read Temperature
float ReadTemperature(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	return TemHumSensor_readRegister(0x40, 0xE3, TEMPERATURE);
 80013c0:	2200      	movs	r2, #0
 80013c2:	21e3      	movs	r1, #227	; 0xe3
 80013c4:	2040      	movs	r0, #64	; 0x40
 80013c6:	f7ff ffab 	bl	8001320 <TemHumSensor_readRegister>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <ReadHumidity>:

//Read Humidity
float ReadHumidity(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return TemHumSensor_readRegister(0x40, 0xE5, HUMIDITY);
 80013d8:	2201      	movs	r2, #1
 80013da:	21e5      	movs	r1, #229	; 0xe5
 80013dc:	2040      	movs	r0, #64	; 0x40
 80013de:	f7ff ff9f 	bl	8001320 <TemHumSensor_readRegister>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	bd80      	pop	{r7, pc}

080013ec <CalculatorTime>:

//Calculate time
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	uint32_t dwTimeTotal;

	if(dwTimeCurrent >= dwTimeInit)
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d304      	bcc.n	8001408 <CalculatorTime+0x1c>
	{
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e004      	b.n	8001412 <CalculatorTime+0x26>
	}
	else
	{
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
	}
	return dwTimeTotal;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <InitSensor>:
//including sensor information
Sensor sensorAfter;

//Init for Sensor
void InitSensor(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

	sensorAfter.humi = 0;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <InitSensor+0x20>)
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
	sensorAfter.temp = 0;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <InitSensor+0x20>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200004e8 	.word	0x200004e8

08001444 <processGetValueSensor>:

//Get sensor value every 5s period
//Change temperature display if the difference is more than 0.5oC
//Change humidity display if the difference is more than 1%
void processGetValueSensor(void)
{
 8001444:	b598      	push	{r3, r4, r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if(CalculatorTime(time_initial, GetMilSecTick()) >= 5000)//After 5s
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <processGetValueSensor+0xb4>)
 800144a:	681c      	ldr	r4, [r3, #0]
 800144c:	f001 fcce 	bl	8002dec <GetMilSecTick>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff ffc9 	bl	80013ec <CalculatorTime>
 800145a:	4603      	mov	r3, r0
 800145c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001460:	4293      	cmp	r3, r2
 8001462:	d947      	bls.n	80014f4 <processGetValueSensor+0xb0>
	{
		//read Sensor data
		sensorAfter.humi = ReadHumidity();
 8001464:	f7ff ffb6 	bl	80013d4 <ReadHumidity>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <processGetValueSensor+0xb8>)
 800146e:	edc3 7a00 	vstr	s15, [r3]
		sensorAfter.temp = ReadTemperature();
 8001472:	f7ff ffa3 	bl	80013bc <ReadTemperature>
 8001476:	eef0 7a40 	vmov.f32	s15, s0
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <processGetValueSensor+0xb8>)
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]

		//humi max = 100%
		if(sensorAfter.humi > 100)
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <processGetValueSensor+0xb8>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001500 <processGetValueSensor+0xbc>
 800148a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	dd03      	ble.n	800149c <processGetValueSensor+0x58>
			sensorAfter.humi = 100;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <processGetValueSensor+0xb8>)
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <processGetValueSensor+0xc0>)
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e00b      	b.n	80014b4 <processGetValueSensor+0x70>
		//humi min = 0%
		else if (sensorAfter.humi < 0) {
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <processGetValueSensor+0xb8>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	d503      	bpl.n	80014b4 <processGetValueSensor+0x70>
			sensorAfter.humi = 0;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <processGetValueSensor+0xb8>)
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
		}

		//temperature max = 100 oC
		if(sensorAfter.temp > 100)
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <processGetValueSensor+0xb8>)
 80014b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001500 <processGetValueSensor+0xbc>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd02      	ble.n	80014ce <processGetValueSensor+0x8a>
			sensorAfter.temp = 100;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <processGetValueSensor+0xb8>)
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <processGetValueSensor+0xc0>)
 80014cc:	605a      	str	r2, [r3, #4]

		//Send humidity to PC
		HumiSensor_SendPacket(sensorAfter.humi);
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <processGetValueSensor+0xb8>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 f89e 	bl	8001618 <HumiSensor_SendPacket>

		//Send Temperature to PC
		TempSensor_SendPacket(sensorAfter.temp);
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <processGetValueSensor+0xb8>)
 80014de:	edd3 7a01 	vldr	s15, [r3, #4]
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	f000 f8ab 	bl	8001640 <TempSensor_SendPacket>

		time_initial = GetMilSecTick();
 80014ea:	f001 fc7f 	bl	8002dec <GetMilSecTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a01      	ldr	r2, [pc, #4]	; (80014f8 <processGetValueSensor+0xb4>)
 80014f2:	6013      	str	r3, [r2, #0]
	}
}
 80014f4:	bf00      	nop
 80014f6:	bd98      	pop	{r3, r4, r7, pc}
 80014f8:	20000350 	.word	0x20000350
 80014fc:	200004e8 	.word	0x200004e8
 8001500:	42c80000 	.word	0x42c80000
 8001504:	42c80000 	.word	0x42c80000

08001508 <SendDataToUsart>:

//Sendata to PC (for Tem_humiSensor use)
void SendDataToUsart(uint8_t option, uint8_t cmd_id, uint8_t cmd_type, float payload1, float payload2)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	ed87 0a02 	vstr	s0, [r7, #8]
 8001514:	edc7 0a01 	vstr	s1, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	460b      	mov	r3, r1
 800151c:	73bb      	strb	r3, [r7, #14]
 800151e:	4613      	mov	r3, r2
 8001520:	737b      	strb	r3, [r7, #13]
	uint8_t checkXor = CXOR_INIT_VAL;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	76fb      	strb	r3, [r7, #27]

	//option
	checkXor ^= option; //0x00
 8001526:	7efa      	ldrb	r2, [r7, #27]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4053      	eors	r3, r2
 800152c:	76fb      	strb	r3, [r7, #27]

	//CMD_ID
	checkXor ^= cmd_id;//0x85
 800152e:	7efa      	ldrb	r2, [r7, #27]
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	4053      	eors	r3, r2
 8001534:	76fb      	strb	r3, [r7, #27]

	//CMD_TYPE	RES(send data)
	checkXor ^= cmd_type;//0x01
 8001536:	7efa      	ldrb	r2, [r7, #27]
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	4053      	eors	r3, r2
 800153c:	76fb      	strb	r3, [r7, #27]

	//Payload
	checkXor ^= (uint8_t)payload1;//0x00
 800153e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001546:	edc7 7a00 	vstr	s15, [r7]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	7efb      	ldrb	r3, [r7, #27]
 8001550:	4053      	eors	r3, r2
 8001552:	76fb      	strb	r3, [r7, #27]
	checkXor ^= (uint8_t)payload2;//data
 8001554:	edd7 7a01 	vldr	s15, [r7, #4]
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	edc7 7a00 	vstr	s15, [r7]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	7efb      	ldrb	r3, [r7, #27]
 8001566:	4053      	eors	r3, r2
 8001568:	76fb      	strb	r3, [r7, #27]

	//FUNC_ID
	checkXor ^= FunctionId;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <SendDataToUsart+0x108>)
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	7efb      	ldrb	r3, [r7, #27]
 8001570:	4053      	eors	r3, r2
 8001572:	76fb      	strb	r3, [r7, #27]

	uint8_t data[] = {0xB1, 0x07, option, cmd_id, cmd_type, payload1, payload2, FunctionId, checkXor};
 8001574:	23b1      	movs	r3, #177	; 0xb1
 8001576:	743b      	strb	r3, [r7, #16]
 8001578:	2307      	movs	r3, #7
 800157a:	747b      	strb	r3, [r7, #17]
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	74bb      	strb	r3, [r7, #18]
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	74fb      	strb	r3, [r7, #19]
 8001584:	7b7b      	ldrb	r3, [r7, #13]
 8001586:	753b      	strb	r3, [r7, #20]
 8001588:	edd7 7a02 	vldr	s15, [r7, #8]
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	edc7 7a00 	vstr	s15, [r7]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	757b      	strb	r3, [r7, #21]
 800159a:	edd7 7a01 	vldr	s15, [r7, #4]
 800159e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a2:	edc7 7a00 	vstr	s15, [r7]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	75bb      	strb	r3, [r7, #22]
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <SendDataToUsart+0x108>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	75fb      	strb	r3, [r7, #23]
 80015b2:	7efb      	ldrb	r3, [r7, #27]
 80015b4:	763b      	strb	r3, [r7, #24]

	for(int i = 0; i <= 9; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e014      	b.n	80015e6 <SendDataToUsart+0xde>
	{
		//send data
		USART_SendData(USART2, (uint16_t)data[i]);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	4812      	ldr	r0, [pc, #72]	; (8001614 <SendDataToUsart+0x10c>)
 80015cc:	f001 fabe 	bl	8002b4c <USART_SendData>
		while( !USART_GetFlagStatus(USART2,  USART_FLAG_TXE));
 80015d0:	bf00      	nop
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <SendDataToUsart+0x10c>)
 80015d6:	f001 fb23 	bl	8002c20 <USART_GetFlagStatus>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f8      	beq.n	80015d2 <SendDataToUsart+0xca>
	for(int i = 0; i <= 9; i++)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	dde7      	ble.n	80015bc <SendDataToUsart+0xb4>
	}
	//Increase func_id to 0xFE then reset
	FunctionId++;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <SendDataToUsart+0x108>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SendDataToUsart+0x108>)
 80015f6:	701a      	strb	r2, [r3, #0]
	if(FunctionId > 0xFE)
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SendDataToUsart+0x108>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d102      	bne.n	8001606 <SendDataToUsart+0xfe>
	{
		FunctionId = 1;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <SendDataToUsart+0x108>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
	}
}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000
 8001614:	40004400 	.word	0x40004400

08001618 <HumiSensor_SendPacket>:

//Send Humidity value to PC
void HumiSensor_SendPacket(float humi)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
	SendDataToUsart(OPTION, CMDID_HUMI, CMDTYPE_RES, PAYLOAD1, humi);
 8001622:	edd7 0a01 	vldr	s1, [r7, #4]
 8001626:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800163c <HumiSensor_SendPacket+0x24>
 800162a:	2201      	movs	r2, #1
 800162c:	2185      	movs	r1, #133	; 0x85
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff ff6a 	bl	8001508 <SendDataToUsart>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	00000000 	.word	0x00000000

08001640 <TempSensor_SendPacket>:

//Send Temperature value to PC
void TempSensor_SendPacket(float temp)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a01 	vstr	s0, [r7, #4]
	SendDataToUsart(OPTION, CMDID_TEMP, CMDTYPE_RES, PAYLOAD1, temp);
 800164a:	edd7 0a01 	vldr	s1, [r7, #4]
 800164e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001664 <TempSensor_SendPacket+0x24>
 8001652:	2201      	movs	r2, #1
 8001654:	2184      	movs	r1, #132	; 0x84
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff56 	bl	8001508 <SendDataToUsart>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	00000000 	.word	0x00000000

08001668 <USART2_Init>:
//Init USART2
void USART2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
	/*
	 * Init TX for USART2
	 */

	//Enable GPIOClock for PA2
	RCC_AHB1PeriphClockCmd(USART2_GPIO_CLOCK, ENABLE);
 800166e:	2101      	movs	r1, #1
 8001670:	2001      	movs	r0, #1
 8001672:	f001 f8ef 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	//Alternate function mode
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001676:	2302      	movs	r3, #2
 8001678:	773b      	strb	r3, [r7, #28]

	//Clock speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800167a:	2302      	movs	r3, #2
 800167c:	777b      	strb	r3, [r7, #29]

	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800167e:	2300      	movs	r3, #0
 8001680:	77bb      	strb	r3, [r7, #30]

	//Enable pull-up resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001682:	2301      	movs	r3, #1
 8001684:	77fb      	strb	r3, [r7, #31]

	//PA2 TX pin
	GPIO_InitStruct.GPIO_Pin = USART2_TX | USART2_RX;
 8001686:	230c      	movs	r3, #12
 8001688:	61bb      	str	r3, [r7, #24]
	GPIO_Init(USART2_GPIO, &GPIO_InitStruct);
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	4619      	mov	r1, r3
 8001690:	4823      	ldr	r0, [pc, #140]	; (8001720 <USART2_Init+0xb8>)
 8001692:	f000 fd65 	bl	8002160 <GPIO_Init>

	//Alternate function config
	GPIO_PinAFConfig(USART2_GPIO, GPIO_PinSource2, GPIO_AF_USART2);
 8001696:	2207      	movs	r2, #7
 8001698:	2102      	movs	r1, #2
 800169a:	4821      	ldr	r0, [pc, #132]	; (8001720 <USART2_Init+0xb8>)
 800169c:	f000 fe06 	bl	80022ac <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USART2_GPIO, GPIO_PinSource3, GPIO_AF_USART2);
 80016a0:	2207      	movs	r2, #7
 80016a2:	2103      	movs	r1, #3
 80016a4:	481e      	ldr	r0, [pc, #120]	; (8001720 <USART2_Init+0xb8>)
 80016a6:	f000 fe01 	bl	80022ac <GPIO_PinAFConfig>

	//Enable clock for USART2 peripheral
	RCC_APB1PeriphClockCmd(USART2_CLOCK, ENABLE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016b0:	f001 f8f0 	bl	8002894 <RCC_APB1PeriphClockCmd>

	//Enable USART2 peripheral
	USART_Cmd(USART2, ENABLE);
 80016b4:	2101      	movs	r1, #1
 80016b6:	481b      	ldr	r0, [pc, #108]	; (8001724 <USART2_Init+0xbc>)
 80016b8:	f001 fa28 	bl	8002b0c <USART_Cmd>

	USART_Initstruct.USART_BaudRate = USARTx_Buad;
 80016bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80016c0:	60bb      	str	r3, [r7, #8]
	USART_Initstruct.USART_WordLength = USART_WordLength_8b;
 80016c2:	2300      	movs	r3, #0
 80016c4:	81bb      	strh	r3, [r7, #12]
	USART_Initstruct.USART_StopBits = USART_StopBits_1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
	USART_Initstruct.USART_Parity = USART_Parity_No;
 80016ca:	2300      	movs	r3, #0
 80016cc:	823b      	strh	r3, [r7, #16]
	USART_Initstruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80016ce:	2300      	movs	r3, #0
 80016d0:	82bb      	strh	r3, [r7, #20]
	USART_Initstruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80016d2:	230c      	movs	r3, #12
 80016d4:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_Initstruct);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <USART2_Init+0xbc>)
 80016de:	f001 f95b 	bl	8002998 <USART_Init>

	USART_Cmd(USART2, ENABLE);
 80016e2:	2101      	movs	r1, #1
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <USART2_Init+0xbc>)
 80016e6:	f001 fa11 	bl	8002b0c <USART_Cmd>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f240 5125 	movw	r1, #1317	; 0x525
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <USART2_Init+0xbc>)
 80016f2:	f001 fa4d 	bl	8002b90 <USART_ITConfig>

	//enable interrupt
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80016f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80016fa:	f000 fc1f 	bl	8001f3c <NVIC_PriorityGroupConfig>
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
 80016fe:	2326      	movs	r3, #38	; 0x26
 8001700:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fc27 	bl	8001f64 <NVIC_Init>
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020000 	.word	0x40020000
 8001724:	40004400 	.word	0x40004400

08001728 <Serial_Init>:

//Init usart and RX buffer
void Serial_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	//Init buffer
	bufInit(pBuffDataRx, &serialQueueRx, sizeof(pBuffDataRx[0]), SIZE_QUEUE_DATA_RX);
 800172c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001730:	2201      	movs	r2, #1
 8001732:	4904      	ldr	r1, [pc, #16]	; (8001744 <Serial_Init+0x1c>)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <Serial_Init+0x20>)
 8001736:	f001 fb73 	bl	8002e20 <bufInit>
	//Init uart2
	USART2_Init();
 800173a:	f7ff ff95 	bl	8001668 <USART2_Init>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000218 	.word	0x20000218
 8001748:	20000228 	.word	0x20000228

0800174c <PollRxBuff>:

//Handle data from PC to device
uint8_t PollRxBuff(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	//Data get from buffer
	uint8_t byRxData;
	uint8_t byUartState = (uint8_t) UART_STATE_IDLE;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]

	while ((bufNumItems(&serialQueueRx) != 0)
 8001756:	e064      	b.n	8001822 <PollRxBuff+0xd6>
			&& (byUartState == UART_STATE_IDLE))
	{
		//When receive data from PC

		//Get data in FIFO buffer
		bufDeDat(&serialQueueRx, &byRxData);
 8001758:	1dbb      	adds	r3, r7, #6
 800175a:	4619      	mov	r1, r3
 800175c:	4838      	ldr	r0, [pc, #224]	; (8001840 <PollRxBuff+0xf4>)
 800175e:	f001 fc13 	bl	8002f88 <bufDeDat>
		switch (byRxBufState) {
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <PollRxBuff+0xf8>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d04d      	beq.n	8001806 <PollRxBuff+0xba>
 800176a:	2b02      	cmp	r3, #2
 800176c:	dc55      	bgt.n	800181a <PollRxBuff+0xce>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <PollRxBuff+0x2c>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d01c      	beq.n	80017b0 <PollRxBuff+0x64>
 8001776:	e050      	b.n	800181a <PollRxBuff+0xce>
		//if start byte
		case RX_STATE_START_BYTE:
			if (byRxData == FRAME_SOF)
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2bb1      	cmp	r3, #177	; 0xb1
 800177c:	d109      	bne.n	8001792 <PollRxBuff+0x46>
			{
				byIndexRxBuf = 0;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <PollRxBuff+0xfc>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
				byCheckXorRxBuf = CXOR_INIT_VAL;
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <PollRxBuff+0x100>)
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	701a      	strb	r2, [r3, #0]
				byRxBufState = RX_STATE_DATA_BYTES;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <PollRxBuff+0xf8>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e047      	b.n	8001822 <PollRxBuff+0xd6>
			} else if (byRxData == FRAME_ACK) {
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b06      	cmp	r3, #6
 8001796:	d102      	bne.n	800179e <PollRxBuff+0x52>
				byUartState = UART_STATE_ACK_RECEIVED;
 8001798:	2302      	movs	r3, #2
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	e041      	b.n	8001822 <PollRxBuff+0xd6>
			} else if (byRxData == FRAME_NACK)
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	2b15      	cmp	r3, #21
 80017a2:	d102      	bne.n	80017aa <PollRxBuff+0x5e>
			{
				byUartState = UART_STATE_NACK_RECEIVED;
 80017a4:	2303      	movs	r3, #3
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	e03b      	b.n	8001822 <PollRxBuff+0xd6>
			} else
			{
				byUartState = UART_STATE_ERROR;
 80017aa:	2304      	movs	r3, #4
 80017ac:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80017ae:	e038      	b.n	8001822 <PollRxBuff+0xd6>
			//if data byte
		case RX_STATE_DATA_BYTES:
			if (byIndexRxBuf < RX_BUFFER_SIZE)
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <PollRxBuff+0xfc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b1d      	cmp	r3, #29
 80017b6:	d820      	bhi.n	80017fa <PollRxBuff+0xae>
			{
				byRxBuffer[byIndexRxBuf] = byRxData;
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <PollRxBuff+0xfc>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	79b9      	ldrb	r1, [r7, #6]
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <PollRxBuff+0x104>)
 80017c2:	5499      	strb	r1, [r3, r2]
				if (byIndexRxBuf > 0)
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <PollRxBuff+0xfc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <PollRxBuff+0x8e>
				{
					byCheckXorRxBuf ^= byRxData;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <PollRxBuff+0x100>)
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	4053      	eors	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <PollRxBuff+0x100>)
 80017d8:	701a      	strb	r2, [r3, #0]
				}
				if (++byIndexRxBuf == *byRxBuffer)
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <PollRxBuff+0xfc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <PollRxBuff+0xfc>)
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <PollRxBuff+0xfc>)
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <PollRxBuff+0x104>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d117      	bne.n	8001822 <PollRxBuff+0xd6>
				{
					byRxBufState = RX_STATE_CXOR_BYTE;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <PollRxBuff+0xf8>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e013      	b.n	8001822 <PollRxBuff+0xd6>
				}
			} else
			{
				byRxBufState = RX_STATE_START_BYTE;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <PollRxBuff+0xf8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
				byUartState = UART_STATE_ERROR;
 8001800:	2304      	movs	r3, #4
 8001802:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001804:	e00d      	b.n	8001822 <PollRxBuff+0xd6>
			//if checkxor byte
		case RX_STATE_CXOR_BYTE: {
			if (byRxData == byCheckXorRxBuf)
 8001806:	79ba      	ldrb	r2, [r7, #6]
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <PollRxBuff+0x100>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d102      	bne.n	8001816 <PollRxBuff+0xca>
			{
				byUartState = UART_STATE_DATA_RECEIVED;
 8001810:	2301      	movs	r3, #1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	e001      	b.n	800181a <PollRxBuff+0xce>
			} else
			{
				byUartState = UART_STATE_ERROR;
 8001816:	2304      	movs	r3, #4
 8001818:	71fb      	strb	r3, [r7, #7]
			}
		default:
		byRxBufState = RX_STATE_START_BYTE;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <PollRxBuff+0xf8>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
		break;
 8001820:	bf00      	nop
	while ((bufNumItems(&serialQueueRx) != 0)
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <PollRxBuff+0xf4>)
 8001824:	f001 fb17 	bl	8002e56 <bufNumItems>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <PollRxBuff+0xe8>
			&& (byUartState == UART_STATE_IDLE))
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d091      	beq.n	8001758 <PollRxBuff+0xc>
		}

		}
	}
	return byUartState;
 8001834:	79fb      	ldrb	r3, [r7, #7]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000218 	.word	0x20000218
 8001844:	20000214 	.word	0x20000214
 8001848:	20000215 	.word	0x20000215
 800184c:	20000216 	.word	0x20000216
 8001850:	20000328 	.word	0x20000328

08001854 <processSerialReceiver>:

//Handle data get from PC
void processSerialReceiver(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t stateRx = PollRxBuff();
 800185a:	f7ff ff77 	bl	800174c <PollRxBuff>
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	//if receive data
	if(stateRx == UART_STATE_DATA_RECEIVED)
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 80a6 	bne.w	80019b6 <processSerialReceiver+0x162>
	{
		switch(CMD_ID)
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <processSerialReceiver+0x16c>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d003      	beq.n	800187a <processSerialReceiver+0x26>
 8001872:	2b04      	cmp	r3, #4
 8001874:	f000 808c 	beq.w	8001990 <processSerialReceiver+0x13c>
 8001878:	e09b      	b.n	80019b2 <processSerialReceiver+0x15e>
		{
			//0x01: LED control
			case LED_CONTROL:
				if(CMD_TYPE == 0x02)
 800187a:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <processSerialReceiver+0x16c>)
 800187c:	78db      	ldrb	r3, [r3, #3]
 800187e:	2b02      	cmp	r3, #2
 8001880:	f040 8084 	bne.w	800198c <processSerialReceiver+0x138>
				{
					//Left LED
					if(CMD_DATA_EPOINT == 0x02)
 8001884:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <processSerialReceiver+0x16c>)
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d13b      	bne.n	8001904 <processSerialReceiver+0xb0>
					{
						switch(CMD_DATA_STATE)
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <processSerialReceiver+0x16c>)
 800188e:	795b      	ldrb	r3, [r3, #5]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d027      	beq.n	80018e4 <processSerialReceiver+0x90>
 8001894:	2b02      	cmp	r3, #2
 8001896:	f300 808b 	bgt.w	80019b0 <processSerialReceiver+0x15c>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d012      	beq.n	80018c4 <processSerialReceiver+0x70>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	f040 8086 	bne.w	80019b0 <processSerialReceiver+0x15c>
						{
							case 0x01:
								if(CMD_LAST_STATE != 0x04)
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <processSerialReceiver+0x16c>)
 80018a6:	7a1b      	ldrb	r3, [r3, #8]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <processSerialReceiver+0x64>
									{
										GPIO_WriteBit(LED1_GREEN_GPIO_PORT, LED1_GREEN_GPIO_PIN, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2101      	movs	r1, #1
 80018b0:	4844      	ldr	r0, [pc, #272]	; (80019c4 <processSerialReceiver+0x170>)
 80018b2:	f000 fce3 	bl	800227c <GPIO_WriteBit>
									}
									else
									{
										GPIO_WriteBit(LED1_GREEN_GPIO_PORT, LED1_GREEN_GPIO_PIN, 0);
									}
								break;
 80018b6:	e06a      	b.n	800198e <processSerialReceiver+0x13a>
										GPIO_WriteBit(LED1_GREEN_GPIO_PORT, LED1_GREEN_GPIO_PIN, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	4841      	ldr	r0, [pc, #260]	; (80019c4 <processSerialReceiver+0x170>)
 80018be:	f000 fcdd 	bl	800227c <GPIO_WriteBit>
								break;
 80018c2:	e064      	b.n	800198e <processSerialReceiver+0x13a>
							case 0x00:
								if(CMD_LAST_STATE != 0x04)
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <processSerialReceiver+0x16c>)
 80018c6:	7a1b      	ldrb	r3, [r3, #8]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <processSerialReceiver+0x84>
									{
										GPIO_WriteBit(LED1_RED_GPIO_PORT, LED1_RED_GPIO_PIN, 1);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2102      	movs	r1, #2
 80018d0:	483c      	ldr	r0, [pc, #240]	; (80019c4 <processSerialReceiver+0x170>)
 80018d2:	f000 fcd3 	bl	800227c <GPIO_WriteBit>
									}
									else
									{
										GPIO_WriteBit(LED1_RED_GPIO_PORT, LED1_RED_GPIO_PIN, 0);
									}
								break;
 80018d6:	e05a      	b.n	800198e <processSerialReceiver+0x13a>
										GPIO_WriteBit(LED1_RED_GPIO_PORT, LED1_RED_GPIO_PIN, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2102      	movs	r1, #2
 80018dc:	4839      	ldr	r0, [pc, #228]	; (80019c4 <processSerialReceiver+0x170>)
 80018de:	f000 fccd 	bl	800227c <GPIO_WriteBit>
								break;
 80018e2:	e054      	b.n	800198e <processSerialReceiver+0x13a>
							case 0x02:
								if(CMD_LAST_STATE != 0x04)
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <processSerialReceiver+0x16c>)
 80018e6:	7a1b      	ldrb	r3, [r3, #8]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <processSerialReceiver+0xa4>
									{
										GPIO_WriteBit(LED1_BLUE_GPIO_PORT, LED1_BLUE_GPIO_PIN, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2108      	movs	r1, #8
 80018f0:	4834      	ldr	r0, [pc, #208]	; (80019c4 <processSerialReceiver+0x170>)
 80018f2:	f000 fcc3 	bl	800227c <GPIO_WriteBit>
									}
									else
									{
										GPIO_WriteBit(LED1_BLUE_GPIO_PORT, LED1_BLUE_GPIO_PIN, 0);
									}
								break;
 80018f6:	e04a      	b.n	800198e <processSerialReceiver+0x13a>
										GPIO_WriteBit(LED1_BLUE_GPIO_PORT, LED1_BLUE_GPIO_PIN, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2108      	movs	r1, #8
 80018fc:	4831      	ldr	r0, [pc, #196]	; (80019c4 <processSerialReceiver+0x170>)
 80018fe:	f000 fcbd 	bl	800227c <GPIO_WriteBit>
								break;
 8001902:	e044      	b.n	800198e <processSerialReceiver+0x13a>

						}
					}
					else
					//RIGRT LED
						if(CMD_DATA_EPOINT == 0x01)
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <processSerialReceiver+0x16c>)
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d13f      	bne.n	800198c <processSerialReceiver+0x138>
						{

							switch(CMD_DATA_STATE)
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <processSerialReceiver+0x16c>)
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d029      	beq.n	8001968 <processSerialReceiver+0x114>
 8001914:	2b02      	cmp	r3, #2
 8001916:	dc4b      	bgt.n	80019b0 <processSerialReceiver+0x15c>
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <processSerialReceiver+0xf0>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d147      	bne.n	80019b0 <processSerialReceiver+0x15c>
							{
								case 0x01:
									if(CMD_LAST_STATE != 0x04)
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <processSerialReceiver+0x16c>)
 8001922:	7a1b      	ldrb	r3, [r3, #8]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d006      	beq.n	8001936 <processSerialReceiver+0xe2>
										{
											GPIO_WriteBit(LED2_GREEN_GPIO_PORT, LED2_GREEN_GPIO_PIN, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192e:	4825      	ldr	r0, [pc, #148]	; (80019c4 <processSerialReceiver+0x170>)
 8001930:	f000 fca4 	bl	800227c <GPIO_WriteBit>
										}
										else
										{
											GPIO_WriteBit(LED2_GREEN_GPIO_PORT, LED2_GREEN_GPIO_PIN, 0);
										}
									break;
 8001934:	e02b      	b.n	800198e <processSerialReceiver+0x13a>
											GPIO_WriteBit(LED2_GREEN_GPIO_PORT, LED2_GREEN_GPIO_PIN, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	4821      	ldr	r0, [pc, #132]	; (80019c4 <processSerialReceiver+0x170>)
 800193e:	f000 fc9d 	bl	800227c <GPIO_WriteBit>
									break;
 8001942:	e024      	b.n	800198e <processSerialReceiver+0x13a>
								case 0x00:
									if(CMD_LAST_STATE != 0x04)
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <processSerialReceiver+0x16c>)
 8001946:	7a1b      	ldrb	r3, [r3, #8]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d006      	beq.n	800195a <processSerialReceiver+0x106>
										{
											GPIO_WriteBit(LED2_RED_GPIO_PORT, LED2_RED_GPIO_PIN, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	481d      	ldr	r0, [pc, #116]	; (80019c8 <processSerialReceiver+0x174>)
 8001954:	f000 fc92 	bl	800227c <GPIO_WriteBit>
										}
										else
										{
											GPIO_WriteBit(LED2_RED_GPIO_PORT, LED2_RED_GPIO_PIN, 0);
										}
									break;
 8001958:	e019      	b.n	800198e <processSerialReceiver+0x13a>
											GPIO_WriteBit(LED2_RED_GPIO_PORT, LED2_RED_GPIO_PIN, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001960:	4819      	ldr	r0, [pc, #100]	; (80019c8 <processSerialReceiver+0x174>)
 8001962:	f000 fc8b 	bl	800227c <GPIO_WriteBit>
									break;
 8001966:	e012      	b.n	800198e <processSerialReceiver+0x13a>
								case 0x02:
									if(CMD_LAST_STATE != 0x04)
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <processSerialReceiver+0x16c>)
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d006      	beq.n	800197e <processSerialReceiver+0x12a>
										{
											GPIO_WriteBit(LED2_BLUE_GPIO_PORT, LED2_BLUE_GPIO_PIN, 1);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <processSerialReceiver+0x170>)
 8001978:	f000 fc80 	bl	800227c <GPIO_WriteBit>
										}
										else
										{
											GPIO_WriteBit(LED2_BLUE_GPIO_PORT, LED2_BLUE_GPIO_PIN, 0);
										}
									break;
 800197c:	e007      	b.n	800198e <processSerialReceiver+0x13a>
											GPIO_WriteBit(LED2_BLUE_GPIO_PORT, LED2_BLUE_GPIO_PIN, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <processSerialReceiver+0x170>)
 8001986:	f000 fc79 	bl	800227c <GPIO_WriteBit>
									break;
 800198a:	e000      	b.n	800198e <processSerialReceiver+0x13a>

							}
					}
 800198c:	bf00      	nop
				}
				break;
 800198e:	e00f      	b.n	80019b0 <processSerialReceiver+0x15c>
			//Buzzer control
			case BUZZER_CONTROL:
				GPIO_WriteBit(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <processSerialReceiver+0x178>)
 8001998:	f000 fc70 	bl	800227c <GPIO_WriteBit>
				delay(200);
 800199c:	20c8      	movs	r0, #200	; 0xc8
 800199e:	f000 f835 	bl	8001a0c <delay>
				GPIO_WriteBit(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <processSerialReceiver+0x178>)
 80019aa:	f000 fc67 	bl	800227c <GPIO_WriteBit>
				break;
 80019ae:	e000      	b.n	80019b2 <processSerialReceiver+0x15e>
				break;
 80019b0:	bf00      	nop

		}
		stateRx = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
	}
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000328 	.word	0x20000328
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800

080019d0 <USART2_IRQHandler>:

//Data get from PC
uint8_t receive_data = 0x00;
void USART2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) == SET)
 80019d4:	f240 5125 	movw	r1, #1317	; 0x525
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <USART2_IRQHandler+0x30>)
 80019da:	f001 f93d 	bl	8002c58 <USART_GetITStatus>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10a      	bne.n	80019fa <USART2_IRQHandler+0x2a>
	{
		//take data
		receive_data = USART_ReceiveData(USART2);
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <USART2_IRQHandler+0x30>)
 80019e6:	f001 f8c3 	bl	8002b70 <USART_ReceiveData>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <USART2_IRQHandler+0x34>)
 80019f0:	701a      	strb	r2, [r3, #0]

		//push data into FIFO buffer
		bufEnDat(&serialQueueRx, (uint8_t*) &receive_data);
 80019f2:	4904      	ldr	r1, [pc, #16]	; (8001a04 <USART2_IRQHandler+0x34>)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <USART2_IRQHandler+0x38>)
 80019f6:	f001 fa79 	bl	8002eec <bufEnDat>
	}
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40004400 	.word	0x40004400
 8001a04:	20000354 	.word	0x20000354
 8001a08:	20000218 	.word	0x20000218

08001a0c <delay>:
void delay(uint32_t millisecond)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < millisecond; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e00d      	b.n	8001a36 <delay+0x2a>
	{
		for(uint32_t j = 0; j < 5000; j++);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	e002      	b.n	8001a26 <delay+0x1a>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d9f7      	bls.n	8001a20 <delay+0x14>
	for(uint32_t i = 0; i < millisecond; i++)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3ed      	bcc.n	8001a1a <delay+0xe>
	}
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LedBuzz_Init>:
//GPIO_Init for Buzzer and Led
void LedBuzz_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 8001a52:	2101      	movs	r1, #1
 8001a54:	2004      	movs	r0, #4
 8001a56:	f000 fefd 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8001a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5e:	603b      	str	r3, [r7, #0]

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a60:	2301      	movs	r3, #1
 8001a62:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a64:	2302      	movs	r3, #2
 8001a66:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType =  GPIO_OType_PP;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	71fb      	strb	r3, [r7, #7]

	//Init Buzzer

	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4619      	mov	r1, r3
 8001a74:	4825      	ldr	r0, [pc, #148]	; (8001b0c <LedBuzz_Init+0xc0>)
 8001a76:	f000 fb73 	bl	8002160 <GPIO_Init>

	//Init Led1 red

	GPIO_InitStructure.GPIO_Pin = LED1_RED_GPIO_PIN;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED1_REDControl_SetClock, ENABLE);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2001      	movs	r0, #1
 8001a82:	f000 fee7 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED1_RED_GPIO_PORT, &GPIO_InitStructure);
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4821      	ldr	r0, [pc, #132]	; (8001b10 <LedBuzz_Init+0xc4>)
 8001a8c:	f000 fb68 	bl	8002160 <GPIO_Init>

	//Init Led1 GREEN

	GPIO_InitStructure.GPIO_Pin = LED1_GREEN_GPIO_PIN;
 8001a90:	2301      	movs	r3, #1
 8001a92:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED1_GREENControl_SetClock, ENABLE);
 8001a94:	2101      	movs	r1, #1
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 fedc 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED1_GREEN_GPIO_PORT, &GPIO_InitStructure);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481b      	ldr	r0, [pc, #108]	; (8001b10 <LedBuzz_Init+0xc4>)
 8001aa2:	f000 fb5d 	bl	8002160 <GPIO_Init>

	//Init Led1 BLUE

	GPIO_InitStructure.GPIO_Pin = LED1_BLUE_GPIO_PIN;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED1_BLUEControl_SetClock, ENABLE);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2001      	movs	r0, #1
 8001aae:	f000 fed1 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED1_BLUE_GPIO_PORT, &GPIO_InitStructure);
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <LedBuzz_Init+0xc4>)
 8001ab8:	f000 fb52 	bl	8002160 <GPIO_Init>

	//Init Led2 BLUE

	GPIO_InitStructure.GPIO_Pin = LED2_BLUE_GPIO_PIN;
 8001abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac0:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED2_BLUEControl_SetClock, ENABLE);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 fec5 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED2_BLUE_GPIO_PORT, &GPIO_InitStructure);
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4810      	ldr	r0, [pc, #64]	; (8001b10 <LedBuzz_Init+0xc4>)
 8001ad0:	f000 fb46 	bl	8002160 <GPIO_Init>

	//Init Led2 RED

	GPIO_InitStructure.GPIO_Pin = LED2_RED_GPIO_PIN;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED2_REDControl_SetClock, ENABLE);
 8001ada:	2101      	movs	r1, #1
 8001adc:	2002      	movs	r0, #2
 8001ade:	f000 feb9 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED2_RED_GPIO_PORT, &GPIO_InitStructure);
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LedBuzz_Init+0xc8>)
 8001ae8:	f000 fb3a 	bl	8002160 <GPIO_Init>

	//Init Led2 RED

	GPIO_InitStructure.GPIO_Pin = LED2_GREEN_GPIO_PIN;
 8001aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001af0:	603b      	str	r3, [r7, #0]

	RCC_AHB1PeriphClockCmd(LED2_GREENControl_SetClock, ENABLE);
 8001af2:	2101      	movs	r1, #1
 8001af4:	2001      	movs	r0, #1
 8001af6:	f000 fead 	bl	8002854 <RCC_AHB1PeriphClockCmd>

	GPIO_Init(LED2_GREEN_GPIO_PORT, &GPIO_InitStructure);
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <LedBuzz_Init+0xc4>)
 8001b00:	f000 fb2e 	bl	8002160 <GPIO_Init>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400

08001b18 <main>:

int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	//Button Init
	Button_Init();
 8001b1c:	f7ff f89c 	bl	8000c58 <Button_Init>
	Interrupt_Init();
 8001b20:	f7ff f8c8 	bl	8000cb4 <Interrupt_Init>

	//Init sensor value
	InitSensor();
 8001b24:	f7ff fc7c 	bl	8001420 <InitSensor>

	//HSE clock 84 MHz
	SystemCoreClockUpdate();
 8001b28:	f000 f93c 	bl	8001da4 <SystemCoreClockUpdate>

	//Init timer
	TimerInit();
 8001b2c:	f001 f93c 	bl	8002da8 <TimerInit>

	//Init I2C
	GPIO_I2CMaster_Inits();
 8001b30:	f7ff fa70 	bl	8001014 <GPIO_I2CMaster_Inits>
	I2CMaster_Inits();
 8001b34:	f7ff faa2 	bl	800107c <I2CMaster_Inits>

	//Init time_initial
	time_initial = GetMilSecTick();
 8001b38:	f001 f958 	bl	8002dec <GetMilSecTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <main+0x3c>)
 8001b40:	6013      	str	r3, [r2, #0]

	//Init buzzer and Led
	LedBuzz_Init();
 8001b42:	f7ff ff83 	bl	8001a4c <LedBuzz_Init>

	//Init serial
	Serial_Init();
 8001b46:	f7ff fdef 	bl	8001728 <Serial_Init>
	while(1)
	{
		//Polling whether having data from PC send
		processSerialReceiver();
 8001b4a:	f7ff fe83 	bl	8001854 <processSerialReceiver>

		//Polling data from temp-humi sensor
		processGetValueSensor();
 8001b4e:	f7ff fc79 	bl	8001444 <processGetValueSensor>
		processSerialReceiver();
 8001b52:	e7fa      	b.n	8001b4a <main+0x32>
 8001b54:	20000350 	.word	0x20000350

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b72:	f001 fa65 	bl	8003040 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
	}

return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
	}
	return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f001 f9ca 	bl	8003040 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20018000 	.word	0x20018000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000358 	.word	0x20000358
 8001ce0:	20000518 	.word	0x20000518

08001ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ce8:	f000 f826 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d12:	f001 f99b 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d16:	f7ff feff 	bl	8001b18 <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001d28:	08005e4c 	.word	0x08005e4c
  ldr r2, =_sbss
 8001d2c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001d30:	20000518 	.word	0x20000518

08001d34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <SystemInit>:
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SystemInit+0x60>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <SystemInit+0x60>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <SystemInit+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <SystemInit+0x64>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SystemInit+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SystemInit+0x64>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <SystemInit+0x64>)
 8001d64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <SystemInit+0x64>)
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <SystemInit+0x68>)
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <SystemInit+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <SystemInit+0x64>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	f000 f889 	bl	8001e9c <SetSysClock>
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SystemInit+0x60>)
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	24003010 	.word	0x24003010

08001da4 <SystemCoreClockUpdate>:
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	2302      	movs	r3, #2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	2302      	movs	r3, #2
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d007      	beq.n	8001dde <SystemCoreClockUpdate+0x3a>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d009      	beq.n	8001de6 <SystemCoreClockUpdate+0x42>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13d      	bne.n	8001e52 <SystemCoreClockUpdate+0xae>
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e03d      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001de0:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <SystemCoreClockUpdate+0xf0>)
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e039      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0d9b      	lsrs	r3, r3, #22
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <SystemCoreClockUpdate+0x78>
 8001e02:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <SystemCoreClockUpdate+0xf0>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e0c:	6852      	ldr	r2, [r2, #4]
 8001e0e:	0992      	lsrs	r2, r2, #6
 8001e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e00b      	b.n	8001e34 <SystemCoreClockUpdate+0x90>
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e26:	6852      	ldr	r2, [r2, #4]
 8001e28:	0992      	lsrs	r2, r2, #6
 8001e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e003      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	bf00      	nop
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <SystemCoreClockUpdate+0xf4>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	017d7840 	.word	0x017d7840
 8001e98:	20000008 	.word	0x20000008

08001e9c <SetSysClock>:
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <SetSysClock+0x90>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <SetSysClock+0x90>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <SetSysClock+0x94>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <SetSysClock+0x94>)
 8001eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SetSysClock+0x90>)
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <SetSysClock+0x90>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	6093      	str	r3, [r2, #8]
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <SetSysClock+0x90>)
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <SetSysClock+0x90>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <SetSysClock+0x90>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <SetSysClock+0x90>)
 8001ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <SetSysClock+0x90>)
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <SetSysClock+0x98>)
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <SetSysClock+0x90>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <SetSysClock+0x90>)
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	bf00      	nop
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <SetSysClock+0x90>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f9      	beq.n	8001ee8 <SetSysClock+0x4c>
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SetSysClock+0x9c>)
 8001ef6:	f240 6202 	movw	r2, #1538	; 0x602
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SetSysClock+0x90>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SetSysClock+0x90>)
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	6093      	str	r3, [r2, #8]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SetSysClock+0x90>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <SetSysClock+0x90>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	6093      	str	r3, [r2, #8]
 8001f14:	bf00      	nop
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SetSysClock+0x90>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d1f9      	bne.n	8001f16 <SetSysClock+0x7a>
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
 8001f34:	08015410 	.word	0x08015410
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <NVIC_PriorityGroupConfig>:
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <NVIC_PriorityGroupConfig+0x24>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60d3      	str	r3, [r2, #12]
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_Init>:
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	2300      	movs	r3, #0
 8001f72:	73bb      	strb	r3, [r7, #14]
 8001f74:	230f      	movs	r3, #15
 8001f76:	737b      	strb	r3, [r7, #13]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d039      	beq.n	8001ff4 <NVIC_Init+0x90>
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <NVIC_Init+0xbc>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	f1c3 0304 	rsb	r3, r3, #4
 8001f96:	73bb      	strb	r3, [r7, #14]
 8001f98:	7b7a      	ldrb	r2, [r7, #13]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	fa42 f303 	asr.w	r3, r2, r3
 8001fa0:	737b      	strb	r3, [r7, #13]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	789a      	ldrb	r2, [r3, #2]
 8001fb4:	7b7b      	ldrb	r3, [r7, #13]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <NVIC_Init+0xc0>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	4911      	ldr	r1, [pc, #68]	; (8002024 <NVIC_Init+0xc0>)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	0952      	lsrs	r2, r2, #5
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	2201      	movs	r2, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8001ff2:	e00f      	b.n	8002014 <NVIC_Init+0xb0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <NVIC_Init+0xc0>)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0952      	lsrs	r2, r2, #5
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4610      	mov	r0, r2
 8002008:	2201      	movs	r2, #1
 800200a:	409a      	lsls	r2, r3
 800200c:	f100 0320 	add.w	r3, r0, #32
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	e000e100 	.word	0xe000e100

08002028 <EXTI_Init>:
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4b34      	ldr	r3, [pc, #208]	; (8002108 <EXTI_Init+0xe0>)
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	799b      	ldrb	r3, [r3, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d04f      	beq.n	80020e0 <EXTI_Init+0xb8>
 8002040:	4b31      	ldr	r3, [pc, #196]	; (8002108 <EXTI_Init+0xe0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	43db      	mvns	r3, r3
 800204a:	492f      	ldr	r1, [pc, #188]	; (8002108 <EXTI_Init+0xe0>)
 800204c:	4013      	ands	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <EXTI_Init+0xe0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	43db      	mvns	r3, r3
 800205a:	492b      	ldr	r1, [pc, #172]	; (8002108 <EXTI_Init+0xe0>)
 800205c:	4013      	ands	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6819      	ldr	r1, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <EXTI_Init+0xe0>)
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	43db      	mvns	r3, r3
 8002084:	4920      	ldr	r1, [pc, #128]	; (8002108 <EXTI_Init+0xe0>)
 8002086:	4013      	ands	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <EXTI_Init+0xe0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	43db      	mvns	r3, r3
 8002094:	491c      	ldr	r1, [pc, #112]	; (8002108 <EXTI_Init+0xe0>)
 8002096:	4013      	ands	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	795b      	ldrb	r3, [r3, #5]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d10e      	bne.n	80020c0 <EXTI_Init+0x98>
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <EXTI_Init+0xe0>)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4917      	ldr	r1, [pc, #92]	; (8002108 <EXTI_Init+0xe0>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <EXTI_Init+0xe0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4913      	ldr	r1, [pc, #76]	; (8002108 <EXTI_Init+0xe0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60cb      	str	r3, [r1, #12]
 80020be:	e01d      	b.n	80020fc <EXTI_Init+0xd4>
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <EXTI_Init+0xe0>)
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	795b      	ldrb	r3, [r3, #5]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e00d      	b.n	80020fc <EXTI_Init+0xd4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	461a      	mov	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40013c00 	.word	0x40013c00

0800210c <EXTI_GetFlagStatus>:
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <EXTI_GetFlagStatus+0x30>)
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <EXTI_GetFlagStatus+0x1e>
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <EXTI_GetFlagStatus+0x22>
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40013c00 	.word	0x40013c00

08002140 <EXTI_ClearITPendingBit>:
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <EXTI_ClearITPendingBit+0x1c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6153      	str	r3, [r2, #20]
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40013c00 	.word	0x40013c00

08002160 <GPIO_Init>:
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e076      	b.n	800226a <GPIO_Init+0x10a>
 800217c:	2201      	movs	r2, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d165      	bne.n	8002264 <GPIO_Init+0x104>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2103      	movs	r1, #3
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	791b      	ldrb	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d003      	beq.n	80021d6 <GPIO_Init+0x76>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d12e      	bne.n	8002234 <GPIO_Init+0xd4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2103      	movs	r1, #3
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	795b      	ldrb	r3, [r3, #5]
 80021f4:	4619      	mov	r1, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	2301      	movs	r3, #1
 8002210:	408b      	lsls	r3, r1
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	7992      	ldrb	r2, [r2, #6]
 8002222:	4611      	mov	r1, r2
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	b292      	uxth	r2, r2
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	b292      	uxth	r2, r2
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	b29b      	uxth	r3, r3
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2103      	movs	r1, #3
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	79db      	ldrb	r3, [r3, #7]
 8002254:	4619      	mov	r1, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d985      	bls.n	800217c <GPIO_Init+0x1c>
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <GPIO_WriteBit>:
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
 8002288:	4613      	mov	r3, r2
 800228a:	707b      	strb	r3, [r7, #1]
 800228c:	787b      	ldrb	r3, [r7, #1]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <GPIO_WriteBit+0x1e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	831a      	strh	r2, [r3, #24]
 8002298:	e002      	b.n	80022a0 <GPIO_WriteBit+0x24>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	835a      	strh	r2, [r3, #26]
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <GPIO_PinAFConfig>:
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	787a      	ldrb	r2, [r7, #1]
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	210f      	movs	r1, #15
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	8879      	ldrh	r1, [r7, #2]
 80022f6:	08c9      	lsrs	r1, r1, #3
 80022f8:	b289      	uxth	r1, r1
 80022fa:	4608      	mov	r0, r1
 80022fc:	ea02 0103 	and.w	r1, r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f100 0208 	add.w	r2, r0, #8
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <I2C_Init>:
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	2300      	movs	r3, #0
 800234c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800234e:	2300      	movs	r3, #0
 8002350:	847b      	strh	r3, [r7, #34]	; 0x22
 8002352:	2304      	movs	r3, #4
 8002354:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <I2C_Init+0x174>)
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002362:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002366:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f9c9 	bl	8002704 <RCC_GetClocksFreq>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <I2C_Init+0x178>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	847b      	strh	r3, [r7, #34]	; 0x22
 8002382:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002386:	4313      	orrs	r3, r2
 8002388:	84fb      	strh	r3, [r7, #38]	; 0x26
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800238e:	809a      	strh	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a44      	ldr	r2, [pc, #272]	; (80024bc <I2C_Init+0x17c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d815      	bhi.n	80023da <I2C_Init+0x9a>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d801      	bhi.n	80023c6 <I2C_Init+0x86>
 80023c2:	2304      	movs	r3, #4
 80023c4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ca:	4313      	orrs	r3, r2
 80023cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023d0:	3301      	adds	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	841a      	strh	r2, [r3, #32]
 80023d8:	e040      	b.n	800245c <I2C_Init+0x11c>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	88db      	ldrh	r3, [r3, #6]
 80023de:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d109      	bne.n	80023fa <I2C_Init+0xba>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023f8:	e00e      	b.n	8002418 <I2C_Init+0xd8>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002416:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <I2C_Init+0xea>
 8002422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	84bb      	strh	r3, [r7, #36]	; 0x24
 800242a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800242c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800242e:	4313      	orrs	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800243a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800243c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800243e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <I2C_Init+0x180>)
 8002448:	fb82 1203 	smull	r1, r2, r2, r3
 800244c:	1192      	asrs	r2, r2, #6
 800244e:	17db      	asrs	r3, r3, #31
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	b29b      	uxth	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	841a      	strh	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002460:	839a      	strh	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800247a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	889a      	ldrh	r2, [r3, #4]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	895b      	ldrh	r3, [r3, #10]
 800248c:	4313      	orrs	r3, r2
 800248e:	b29a      	uxth	r2, r3
 8002490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002492:	4313      	orrs	r3, r2
 8002494:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	899a      	ldrh	r2, [r3, #12]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	891b      	ldrh	r3, [r3, #8]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	811a      	strh	r2, [r3, #8]
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	000186a0 	.word	0x000186a0
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <I2C_Cmd>:
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <I2C_Cmd+0x24>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <I2C_Cmd+0x34>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <I2C_GenerateSTART>:
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <I2C_GenerateSTART+0x24>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <I2C_GenerateSTART+0x34>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <I2C_GenerateSTOP>:
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <I2C_GenerateSTOP+0x24>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <I2C_GenerateSTOP+0x34>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <I2C_Send7bitAddress>:
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
 8002590:	4613      	mov	r3, r2
 8002592:	70bb      	strb	r3, [r7, #2]
 8002594:	78bb      	ldrb	r3, [r7, #2]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <I2C_Send7bitAddress+0x20>
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	70fb      	strb	r3, [r7, #3]
 80025a2:	e003      	b.n	80025ac <I2C_Send7bitAddress+0x28>
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	70fb      	strb	r3, [r7, #3]
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	821a      	strh	r2, [r3, #16]
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <I2C_AcknowledgeConfig>:
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <I2C_AcknowledgeConfig+0x24>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e007      	b.n	80025f4 <I2C_AcknowledgeConfig+0x34>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <I2C_SendData>:
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	821a      	strh	r2, [r3, #16]
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <I2C_ReceiveData>:
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8a1b      	ldrh	r3, [r3, #16]
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <I2C_CheckEvent>:
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8a9b      	ldrh	r3, [r3, #20]
 800265a:	b29b      	uxth	r3, r3
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8b1b      	ldrh	r3, [r3, #24]
 8002662:	b29b      	uxth	r3, r3
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4313      	orrs	r3, r2
 8002672:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4013      	ands	r3, r2
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d102      	bne.n	800268a <I2C_CheckEvent+0x4e>
 8002684:	2301      	movs	r3, #1
 8002686:	75fb      	strb	r3, [r7, #23]
 8002688:	e001      	b.n	800268e <I2C_CheckEvent+0x52>
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <I2C_GetFlagStatus>:
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	0f1b      	lsrs	r3, r3, #28
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <I2C_GetFlagStatus+0x36>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3314      	adds	r3, #20
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e005      	b.n	80026de <I2C_GetFlagStatus+0x42>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3318      	adds	r3, #24
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <I2C_GetFlagStatus+0x54>
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
 80026ee:	e001      	b.n	80026f4 <I2C_GetFlagStatus+0x58>
 80026f0:	2300      	movs	r3, #0
 80026f2:	75fb      	strb	r3, [r7, #23]
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <RCC_GetClocksFreq>:
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	2302      	movs	r3, #2
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	2302      	movs	r3, #2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	4b47      	ldr	r3, [pc, #284]	; (8002844 <RCC_GetClocksFreq+0x140>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d007      	beq.n	8002744 <RCC_GetClocksFreq+0x40>
 8002734:	2b08      	cmp	r3, #8
 8002736:	d009      	beq.n	800274c <RCC_GetClocksFreq+0x48>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d13d      	bne.n	80027b8 <RCC_GetClocksFreq+0xb4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a42      	ldr	r2, [pc, #264]	; (8002848 <RCC_GetClocksFreq+0x144>)
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e03d      	b.n	80027c0 <RCC_GetClocksFreq+0xbc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a41      	ldr	r2, [pc, #260]	; (800284c <RCC_GetClocksFreq+0x148>)
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e039      	b.n	80027c0 <RCC_GetClocksFreq+0xbc>
 800274c:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <RCC_GetClocksFreq+0x140>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0d9b      	lsrs	r3, r3, #22
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <RCC_GetClocksFreq+0x140>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <RCC_GetClocksFreq+0x7e>
 8002768:	4a38      	ldr	r2, [pc, #224]	; (800284c <RCC_GetClocksFreq+0x148>)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	4a34      	ldr	r2, [pc, #208]	; (8002844 <RCC_GetClocksFreq+0x140>)
 8002772:	6852      	ldr	r2, [r2, #4]
 8002774:	0992      	lsrs	r2, r2, #6
 8002776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e00b      	b.n	800279a <RCC_GetClocksFreq+0x96>
 8002782:	4a31      	ldr	r2, [pc, #196]	; (8002848 <RCC_GetClocksFreq+0x144>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4a2e      	ldr	r2, [pc, #184]	; (8002844 <RCC_GetClocksFreq+0x140>)
 800278c:	6852      	ldr	r2, [r2, #4]
 800278e:	0992      	lsrs	r2, r2, #6
 8002790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <RCC_GetClocksFreq+0x140>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e003      	b.n	80027c0 <RCC_GetClocksFreq+0xbc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <RCC_GetClocksFreq+0x144>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	bf00      	nop
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <RCC_GetClocksFreq+0x140>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <RCC_GetClocksFreq+0x14c>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	40da      	lsrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <RCC_GetClocksFreq+0x140>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	0a9b      	lsrs	r3, r3, #10
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	4a15      	ldr	r2, [pc, #84]	; (8002850 <RCC_GetClocksFreq+0x14c>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	40da      	lsrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <RCC_GetClocksFreq+0x140>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	0b5b      	lsrs	r3, r3, #13
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <RCC_GetClocksFreq+0x14c>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4413      	add	r3, r2
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	40da      	lsrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	bf00      	nop
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	017d7840 	.word	0x017d7840
 8002850:	20000018 	.word	0x20000018

08002854 <RCC_AHB1PeriphClockCmd>:
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <RCC_AHB1PeriphClockCmd+0x20>
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286a:	4909      	ldr	r1, [pc, #36]	; (8002890 <RCC_AHB1PeriphClockCmd+0x3c>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4313      	orrs	r3, r2
 8002870:	630b      	str	r3, [r1, #48]	; 0x30
 8002872:	e006      	b.n	8002882 <RCC_AHB1PeriphClockCmd+0x2e>
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	43db      	mvns	r3, r3
 800287c:	4904      	ldr	r1, [pc, #16]	; (8002890 <RCC_AHB1PeriphClockCmd+0x3c>)
 800287e:	4013      	ands	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	; 0x30
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <RCC_APB1PeriphClockCmd>:
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <RCC_APB1PeriphClockCmd+0x20>
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	4909      	ldr	r1, [pc, #36]	; (80028d0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	640b      	str	r3, [r1, #64]	; 0x40
 80028b2:	e006      	b.n	80028c2 <RCC_APB1PeriphClockCmd+0x2e>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <RCC_APB1PeriphClockCmd+0x3c>)
 80028be:	4013      	ands	r3, r2
 80028c0:	640b      	str	r3, [r1, #64]	; 0x40
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <RCC_APB2PeriphClockCmd>:
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <RCC_APB2PeriphClockCmd+0x20>
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_APB2PeriphClockCmd+0x3c>)
 80028e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ea:	4909      	ldr	r1, [pc, #36]	; (8002910 <RCC_APB2PeriphClockCmd+0x3c>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	644b      	str	r3, [r1, #68]	; 0x44
 80028f2:	e006      	b.n	8002902 <RCC_APB2PeriphClockCmd+0x2e>
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <RCC_APB2PeriphClockCmd+0x3c>)
 80028f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4904      	ldr	r1, [pc, #16]	; (8002910 <RCC_APB2PeriphClockCmd+0x3c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	644b      	str	r3, [r1, #68]	; 0x44
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <SYSCFG_EXTILineConfig>:
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	460a      	mov	r2, r1
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	4613      	mov	r3, r2
 8002922:	71bb      	strb	r3, [r7, #6]
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	79bb      	ldrb	r3, [r7, #6]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <SYSCFG_EXTILineConfig+0x80>)
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3302      	adds	r3, #2
 8002942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43db      	mvns	r3, r3
 800294a:	4812      	ldr	r0, [pc, #72]	; (8002994 <SYSCFG_EXTILineConfig+0x80>)
 800294c:	79b9      	ldrb	r1, [r7, #6]
 800294e:	0889      	lsrs	r1, r1, #2
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	401a      	ands	r2, r3
 8002954:	1c8b      	adds	r3, r1, #2
 8002956:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <SYSCFG_EXTILineConfig+0x80>)
 800295c:	79bb      	ldrb	r3, [r7, #6]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3302      	adds	r3, #2
 8002964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002968:	79f9      	ldrb	r1, [r7, #7]
 800296a:	79bb      	ldrb	r3, [r7, #6]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	4807      	ldr	r0, [pc, #28]	; (8002994 <SYSCFG_EXTILineConfig+0x80>)
 8002978:	79b9      	ldrb	r1, [r7, #6]
 800297a:	0889      	lsrs	r1, r1, #2
 800297c:	b2c9      	uxtb	r1, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	1c8b      	adds	r3, r1, #2
 8002982:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40013800 	.word	0x40013800

08002998 <USART_Init>:
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8a1b      	ldrh	r3, [r3, #16]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	88db      	ldrh	r3, [r3, #6]
 80029c6:	461a      	mov	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	4313      	orrs	r3, r2
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	821a      	strh	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	899b      	ldrh	r3, [r3, #12]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029e4:	f023 030c 	bic.w	r3, r3, #12
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	889a      	ldrh	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	895b      	ldrh	r3, [r3, #10]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	4313      	orrs	r3, r2
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	819a      	strh	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8a9b      	ldrh	r3, [r3, #20]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	899b      	ldrh	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	4313      	orrs	r3, r2
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	829a      	strh	r2, [r3, #20]
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fe64 	bl	8002704 <RCC_GetClocksFreq>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	; (8002b00 <USART_Init+0x168>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <USART_Init+0xb4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <USART_Init+0x16c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <USART_Init+0xba>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	e001      	b.n	8002a56 <USART_Init+0xbe>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	899b      	ldrh	r3, [r3, #12]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0c      	bge.n	8002a7c <USART_Init+0xe4>
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e00b      	b.n	8002a94 <USART_Init+0xfc>
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009a      	lsls	r2, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <USART_Init+0x170>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	2264      	movs	r2, #100	; 0x64
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	899b      	ldrh	r3, [r3, #12]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da0c      	bge.n	8002ad8 <USART_Init+0x140>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <USART_Init+0x170>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	e00b      	b.n	8002af0 <USART_Init+0x158>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <USART_Init+0x170>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	4313      	orrs	r3, r2
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	811a      	strh	r2, [r3, #8]
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	51eb851f 	.word	0x51eb851f

08002b0c <USART_Cmd>:
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <USART_Cmd+0x24>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	899b      	ldrh	r3, [r3, #12]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	819a      	strh	r2, [r3, #12]
 8002b2e:	e007      	b.n	8002b40 <USART_Cmd+0x34>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	899b      	ldrh	r3, [r3, #12]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	819a      	strh	r2, [r3, #12]
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <USART_SendData>:
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	809a      	strh	r2, [r3, #4]
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <USART_ReceiveData>:
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	889b      	ldrh	r3, [r3, #4]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <USART_ITConfig>:
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d103      	bne.n	8002bde <USART_ITConfig+0x4e>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e009      	b.n	8002bf2 <USART_ITConfig+0x62>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d103      	bne.n	8002bec <USART_ITConfig+0x5c>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3310      	adds	r3, #16
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e002      	b.n	8002bf2 <USART_ITConfig+0x62>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <USART_ITConfig+0x76>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e006      	b.n	8002c14 <USART_ITConfig+0x84>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	400a      	ands	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <USART_GetFlagStatus>:
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <USART_GetFlagStatus+0x26>
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e001      	b.n	8002c4a <USART_GetFlagStatus+0x2a>
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <USART_GetITStatus>:
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	2300      	movs	r3, #0
 8002c72:	74fb      	strb	r3, [r7, #19]
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	2201      	movs	r2, #1
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <USART_GetITStatus+0x4e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	899b      	ldrh	r3, [r3, #12]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e011      	b.n	8002cca <USART_GetITStatus+0x72>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d107      	bne.n	8002cbc <USART_GetITStatus+0x64>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8a1b      	ldrh	r3, [r3, #16]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e006      	b.n	8002cca <USART_GetITStatus+0x72>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8a9b      	ldrh	r3, [r3, #20]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <USART_GetITStatus+0xa4>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <USART_GetITStatus+0xa4>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	74fb      	strb	r3, [r7, #19]
 8002cfa:	e001      	b.n	8002d00 <USART_GetITStatus+0xa8>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74fb      	strb	r3, [r7, #19]
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <NVIC_SetPriority>:
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da0b      	bge.n	8002d3c <NVIC_SetPriority+0x2c>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <NVIC_SetPriority+0x4c>)
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	3b04      	subs	r3, #4
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	761a      	strb	r2, [r3, #24]
 8002d3a:	e009      	b.n	8002d50 <NVIC_SetPriority+0x40>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <NVIC_SetPriority+0x50>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <SysTick_Config>:
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7ff ffc2 	bl	8002d10 <NVIC_SetPriority>
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <TimerInit>:
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	463b      	mov	r3, r7
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fca7 	bl	8002704 <RCC_GetClocksFreq>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <TimerInit+0x3c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ffcf 	bl	8002d64 <SysTick_Config>
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f7ff ffa0 	bl	8002d10 <NVIC_SetPriority>
 8002dd0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4804      	ldr	r0, [pc, #16]	; (8002de8 <TimerInit+0x40>)
 8002dd8:	f000 f918 	bl	800300c <memsetl>
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	10624dd3 	.word	0x10624dd3
 8002de8:	2000035c 	.word	0x2000035c

08002dec <GetMilSecTick>:
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <GetMilSecTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	200004dc 	.word	0x200004dc

08002e04 <SysTick_Handler>:
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <SysTick_Handler+0x18>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <SysTick_Handler+0x18>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	200004dc 	.word	0x200004dc

08002e20 <bufInit>:
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	460b      	mov	r3, r1
 8002e30:	71fb      	strb	r3, [r7, #7]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80bb      	strh	r3, [r7, #4]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	88ba      	ldrh	r2, [r7, #4]
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	711a      	strb	r2, [r3, #4]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	68b8      	ldr	r0, [r7, #8]
 8002e4a:	f000 f836 	bl	8002eba <bufFlush>
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <bufNumItems>:
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	885b      	ldrh	r3, [r3, #2]
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <bufIsFull>:
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	885a      	ldrh	r2, [r3, #2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf2c      	ite	cs
 8002e82:	2301      	movcs	r3, #1
 8002e84:	2300      	movcc	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <bufIsEmpty>:
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	88da      	ldrh	r2, [r3, #6]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	891b      	ldrh	r3, [r3, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <bufFlush>:
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	80da      	strh	r2, [r3, #6]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	811a      	strh	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	805a      	strh	r2, [r3, #2]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68d8      	ldr	r0, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f000 f894 	bl	800300c <memsetl>
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <bufEnDat>:
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	b672      	cpsid	i
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e021      	b.n	8002f42 <bufEnDat+0x56>
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	441a      	add	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	88c9      	ldrh	r1, [r1, #6]
 8002f0c:	440b      	add	r3, r1
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	88db      	ldrh	r3, [r3, #6]
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	4013      	ands	r3, r2
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	80da      	strh	r2, [r3, #6]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	885b      	ldrh	r3, [r3, #2]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	805a      	strh	r2, [r3, #2]
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3d8      	bcc.n	8002efe <bufEnDat+0x12>
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff8e 	bl	8002e6e <bufIsFull>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d011      	beq.n	8002f7c <bufEnDat+0x90>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	891a      	ldrh	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b21a      	sxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	4013      	ands	r3, r2
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	811a      	strh	r2, [r3, #8]
 8002f7c:	b662      	cpsie	i
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <bufDeDat>:
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	b672      	cpsid	i
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff7d 	bl	8002e94 <bufIsEmpty>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <bufDeDat+0x24>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	805a      	strh	r2, [r3, #2]
 8002fa6:	b662      	cpsie	i
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e02b      	b.n	8003004 <bufDeDat+0x7c>
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e021      	b.n	8002ff6 <bufDeDat+0x6e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	8912      	ldrh	r2, [r2, #8]
 8002fba:	441a      	add	r2, r3
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	440b      	add	r3, r1
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	891b      	ldrh	r3, [r3, #8]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	b21b      	sxth	r3, r3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	811a      	strh	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	885b      	ldrh	r3, [r3, #2]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	805a      	strh	r2, [r3, #2]
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	791b      	ldrb	r3, [r3, #4]
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3d8      	bcc.n	8002fb2 <bufDeDat+0x2a>
 8003000:	b662      	cpsie	i
 8003002:	2300      	movs	r3, #0
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <memsetl>:
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
 8003018:	4613      	mov	r3, r2
 800301a:	803b      	strh	r3, [r7, #0]
 800301c:	e004      	b.n	8003028 <memsetl+0x1c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	883b      	ldrh	r3, [r7, #0]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	803a      	strh	r2, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f5      	bne.n	800301e <memsetl+0x12>
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <__errno>:
 8003040:	4b01      	ldr	r3, [pc, #4]	; (8003048 <__errno+0x8>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000028 	.word	0x20000028

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4d0d      	ldr	r5, [pc, #52]	; (8003084 <__libc_init_array+0x38>)
 8003050:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	2600      	movs	r6, #0
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	4d0b      	ldr	r5, [pc, #44]	; (800308c <__libc_init_array+0x40>)
 800305e:	4c0c      	ldr	r4, [pc, #48]	; (8003090 <__libc_init_array+0x44>)
 8003060:	f002 fcf0 	bl	8005a44 <_init>
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	2600      	movs	r6, #0
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	08005e44 	.word	0x08005e44
 8003088:	08005e44 	.word	0x08005e44
 800308c:	08005e44 	.word	0x08005e44
 8003090:	08005e48 	.word	0x08005e48

08003094 <memset>:
 8003094:	4402      	add	r2, r0
 8003096:	4603      	mov	r3, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <__cvt>:
 80030a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	ec55 4b10 	vmov	r4, r5, d0
 80030ac:	2d00      	cmp	r5, #0
 80030ae:	460e      	mov	r6, r1
 80030b0:	4619      	mov	r1, r3
 80030b2:	462b      	mov	r3, r5
 80030b4:	bfbb      	ittet	lt
 80030b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030ba:	461d      	movlt	r5, r3
 80030bc:	2300      	movge	r3, #0
 80030be:	232d      	movlt	r3, #45	; 0x2d
 80030c0:	700b      	strb	r3, [r1, #0]
 80030c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030c8:	4691      	mov	r9, r2
 80030ca:	f023 0820 	bic.w	r8, r3, #32
 80030ce:	bfbc      	itt	lt
 80030d0:	4622      	movlt	r2, r4
 80030d2:	4614      	movlt	r4, r2
 80030d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030d8:	d005      	beq.n	80030e6 <__cvt+0x42>
 80030da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80030de:	d100      	bne.n	80030e2 <__cvt+0x3e>
 80030e0:	3601      	adds	r6, #1
 80030e2:	2102      	movs	r1, #2
 80030e4:	e000      	b.n	80030e8 <__cvt+0x44>
 80030e6:	2103      	movs	r1, #3
 80030e8:	ab03      	add	r3, sp, #12
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	ab02      	add	r3, sp, #8
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	ec45 4b10 	vmov	d0, r4, r5
 80030f4:	4653      	mov	r3, sl
 80030f6:	4632      	mov	r2, r6
 80030f8:	f000 fcca 	bl	8003a90 <_dtoa_r>
 80030fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003100:	4607      	mov	r7, r0
 8003102:	d102      	bne.n	800310a <__cvt+0x66>
 8003104:	f019 0f01 	tst.w	r9, #1
 8003108:	d022      	beq.n	8003150 <__cvt+0xac>
 800310a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800310e:	eb07 0906 	add.w	r9, r7, r6
 8003112:	d110      	bne.n	8003136 <__cvt+0x92>
 8003114:	783b      	ldrb	r3, [r7, #0]
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	d10a      	bne.n	8003130 <__cvt+0x8c>
 800311a:	2200      	movs	r2, #0
 800311c:	2300      	movs	r3, #0
 800311e:	4620      	mov	r0, r4
 8003120:	4629      	mov	r1, r5
 8003122:	f7fd fcd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003126:	b918      	cbnz	r0, 8003130 <__cvt+0x8c>
 8003128:	f1c6 0601 	rsb	r6, r6, #1
 800312c:	f8ca 6000 	str.w	r6, [sl]
 8003130:	f8da 3000 	ldr.w	r3, [sl]
 8003134:	4499      	add	r9, r3
 8003136:	2200      	movs	r2, #0
 8003138:	2300      	movs	r3, #0
 800313a:	4620      	mov	r0, r4
 800313c:	4629      	mov	r1, r5
 800313e:	f7fd fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003142:	b108      	cbz	r0, 8003148 <__cvt+0xa4>
 8003144:	f8cd 900c 	str.w	r9, [sp, #12]
 8003148:	2230      	movs	r2, #48	; 0x30
 800314a:	9b03      	ldr	r3, [sp, #12]
 800314c:	454b      	cmp	r3, r9
 800314e:	d307      	bcc.n	8003160 <__cvt+0xbc>
 8003150:	9b03      	ldr	r3, [sp, #12]
 8003152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003154:	1bdb      	subs	r3, r3, r7
 8003156:	4638      	mov	r0, r7
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	b004      	add	sp, #16
 800315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003160:	1c59      	adds	r1, r3, #1
 8003162:	9103      	str	r1, [sp, #12]
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e7f0      	b.n	800314a <__cvt+0xa6>

08003168 <__exponent>:
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800316a:	4603      	mov	r3, r0
 800316c:	2900      	cmp	r1, #0
 800316e:	bfb8      	it	lt
 8003170:	4249      	neglt	r1, r1
 8003172:	f803 2b02 	strb.w	r2, [r3], #2
 8003176:	bfb4      	ite	lt
 8003178:	222d      	movlt	r2, #45	; 0x2d
 800317a:	222b      	movge	r2, #43	; 0x2b
 800317c:	2909      	cmp	r1, #9
 800317e:	7042      	strb	r2, [r0, #1]
 8003180:	dd2a      	ble.n	80031d8 <__exponent+0x70>
 8003182:	f10d 0407 	add.w	r4, sp, #7
 8003186:	46a4      	mov	ip, r4
 8003188:	270a      	movs	r7, #10
 800318a:	46a6      	mov	lr, r4
 800318c:	460a      	mov	r2, r1
 800318e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003192:	fb07 1516 	mls	r5, r7, r6, r1
 8003196:	3530      	adds	r5, #48	; 0x30
 8003198:	2a63      	cmp	r2, #99	; 0x63
 800319a:	f104 34ff 	add.w	r4, r4, #4294967295
 800319e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031a2:	4631      	mov	r1, r6
 80031a4:	dcf1      	bgt.n	800318a <__exponent+0x22>
 80031a6:	3130      	adds	r1, #48	; 0x30
 80031a8:	f1ae 0502 	sub.w	r5, lr, #2
 80031ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031b0:	1c44      	adds	r4, r0, #1
 80031b2:	4629      	mov	r1, r5
 80031b4:	4561      	cmp	r1, ip
 80031b6:	d30a      	bcc.n	80031ce <__exponent+0x66>
 80031b8:	f10d 0209 	add.w	r2, sp, #9
 80031bc:	eba2 020e 	sub.w	r2, r2, lr
 80031c0:	4565      	cmp	r5, ip
 80031c2:	bf88      	it	hi
 80031c4:	2200      	movhi	r2, #0
 80031c6:	4413      	add	r3, r2
 80031c8:	1a18      	subs	r0, r3, r0
 80031ca:	b003      	add	sp, #12
 80031cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80031d6:	e7ed      	b.n	80031b4 <__exponent+0x4c>
 80031d8:	2330      	movs	r3, #48	; 0x30
 80031da:	3130      	adds	r1, #48	; 0x30
 80031dc:	7083      	strb	r3, [r0, #2]
 80031de:	70c1      	strb	r1, [r0, #3]
 80031e0:	1d03      	adds	r3, r0, #4
 80031e2:	e7f1      	b.n	80031c8 <__exponent+0x60>

080031e4 <_printf_float>:
 80031e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e8:	ed2d 8b02 	vpush	{d8}
 80031ec:	b08d      	sub	sp, #52	; 0x34
 80031ee:	460c      	mov	r4, r1
 80031f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80031f4:	4616      	mov	r6, r2
 80031f6:	461f      	mov	r7, r3
 80031f8:	4605      	mov	r5, r0
 80031fa:	f001 fa35 	bl	8004668 <_localeconv_r>
 80031fe:	f8d0 a000 	ldr.w	sl, [r0]
 8003202:	4650      	mov	r0, sl
 8003204:	f7fc ffec 	bl	80001e0 <strlen>
 8003208:	2300      	movs	r3, #0
 800320a:	930a      	str	r3, [sp, #40]	; 0x28
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	9305      	str	r3, [sp, #20]
 8003210:	f8d8 3000 	ldr.w	r3, [r8]
 8003214:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003218:	3307      	adds	r3, #7
 800321a:	f023 0307 	bic.w	r3, r3, #7
 800321e:	f103 0208 	add.w	r2, r3, #8
 8003222:	f8c8 2000 	str.w	r2, [r8]
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800322e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003236:	9307      	str	r3, [sp, #28]
 8003238:	f8cd 8018 	str.w	r8, [sp, #24]
 800323c:	ee08 0a10 	vmov	s16, r0
 8003240:	4b9f      	ldr	r3, [pc, #636]	; (80034c0 <_printf_float+0x2dc>)
 8003242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003246:	f04f 32ff 	mov.w	r2, #4294967295
 800324a:	f7fd fc77 	bl	8000b3c <__aeabi_dcmpun>
 800324e:	bb88      	cbnz	r0, 80032b4 <_printf_float+0xd0>
 8003250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003254:	4b9a      	ldr	r3, [pc, #616]	; (80034c0 <_printf_float+0x2dc>)
 8003256:	f04f 32ff 	mov.w	r2, #4294967295
 800325a:	f7fd fc51 	bl	8000b00 <__aeabi_dcmple>
 800325e:	bb48      	cbnz	r0, 80032b4 <_printf_float+0xd0>
 8003260:	2200      	movs	r2, #0
 8003262:	2300      	movs	r3, #0
 8003264:	4640      	mov	r0, r8
 8003266:	4649      	mov	r1, r9
 8003268:	f7fd fc40 	bl	8000aec <__aeabi_dcmplt>
 800326c:	b110      	cbz	r0, 8003274 <_printf_float+0x90>
 800326e:	232d      	movs	r3, #45	; 0x2d
 8003270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003274:	4b93      	ldr	r3, [pc, #588]	; (80034c4 <_printf_float+0x2e0>)
 8003276:	4894      	ldr	r0, [pc, #592]	; (80034c8 <_printf_float+0x2e4>)
 8003278:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800327c:	bf94      	ite	ls
 800327e:	4698      	movls	r8, r3
 8003280:	4680      	movhi	r8, r0
 8003282:	2303      	movs	r3, #3
 8003284:	6123      	str	r3, [r4, #16]
 8003286:	9b05      	ldr	r3, [sp, #20]
 8003288:	f023 0204 	bic.w	r2, r3, #4
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	f04f 0900 	mov.w	r9, #0
 8003292:	9700      	str	r7, [sp, #0]
 8003294:	4633      	mov	r3, r6
 8003296:	aa0b      	add	r2, sp, #44	; 0x2c
 8003298:	4621      	mov	r1, r4
 800329a:	4628      	mov	r0, r5
 800329c:	f000 f9d8 	bl	8003650 <_printf_common>
 80032a0:	3001      	adds	r0, #1
 80032a2:	f040 8090 	bne.w	80033c6 <_printf_float+0x1e2>
 80032a6:	f04f 30ff 	mov.w	r0, #4294967295
 80032aa:	b00d      	add	sp, #52	; 0x34
 80032ac:	ecbd 8b02 	vpop	{d8}
 80032b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	4640      	mov	r0, r8
 80032ba:	4649      	mov	r1, r9
 80032bc:	f7fd fc3e 	bl	8000b3c <__aeabi_dcmpun>
 80032c0:	b140      	cbz	r0, 80032d4 <_printf_float+0xf0>
 80032c2:	464b      	mov	r3, r9
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bfbc      	itt	lt
 80032c8:	232d      	movlt	r3, #45	; 0x2d
 80032ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032ce:	487f      	ldr	r0, [pc, #508]	; (80034cc <_printf_float+0x2e8>)
 80032d0:	4b7f      	ldr	r3, [pc, #508]	; (80034d0 <_printf_float+0x2ec>)
 80032d2:	e7d1      	b.n	8003278 <_printf_float+0x94>
 80032d4:	6863      	ldr	r3, [r4, #4]
 80032d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80032da:	9206      	str	r2, [sp, #24]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	d13f      	bne.n	8003360 <_printf_float+0x17c>
 80032e0:	2306      	movs	r3, #6
 80032e2:	6063      	str	r3, [r4, #4]
 80032e4:	9b05      	ldr	r3, [sp, #20]
 80032e6:	6861      	ldr	r1, [r4, #4]
 80032e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032ec:	2300      	movs	r3, #0
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	ab0a      	add	r3, sp, #40	; 0x28
 80032f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80032f6:	ab09      	add	r3, sp, #36	; 0x24
 80032f8:	ec49 8b10 	vmov	d0, r8, r9
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6022      	str	r2, [r4, #0]
 8003300:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff fecd 	bl	80030a4 <__cvt>
 800330a:	9b06      	ldr	r3, [sp, #24]
 800330c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800330e:	2b47      	cmp	r3, #71	; 0x47
 8003310:	4680      	mov	r8, r0
 8003312:	d108      	bne.n	8003326 <_printf_float+0x142>
 8003314:	1cc8      	adds	r0, r1, #3
 8003316:	db02      	blt.n	800331e <_printf_float+0x13a>
 8003318:	6863      	ldr	r3, [r4, #4]
 800331a:	4299      	cmp	r1, r3
 800331c:	dd41      	ble.n	80033a2 <_printf_float+0x1be>
 800331e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003322:	fa5f fb8b 	uxtb.w	fp, fp
 8003326:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800332a:	d820      	bhi.n	800336e <_printf_float+0x18a>
 800332c:	3901      	subs	r1, #1
 800332e:	465a      	mov	r2, fp
 8003330:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003334:	9109      	str	r1, [sp, #36]	; 0x24
 8003336:	f7ff ff17 	bl	8003168 <__exponent>
 800333a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800333c:	1813      	adds	r3, r2, r0
 800333e:	2a01      	cmp	r2, #1
 8003340:	4681      	mov	r9, r0
 8003342:	6123      	str	r3, [r4, #16]
 8003344:	dc02      	bgt.n	800334c <_printf_float+0x168>
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	07d2      	lsls	r2, r2, #31
 800334a:	d501      	bpl.n	8003350 <_printf_float+0x16c>
 800334c:	3301      	adds	r3, #1
 800334e:	6123      	str	r3, [r4, #16]
 8003350:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003354:	2b00      	cmp	r3, #0
 8003356:	d09c      	beq.n	8003292 <_printf_float+0xae>
 8003358:	232d      	movs	r3, #45	; 0x2d
 800335a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335e:	e798      	b.n	8003292 <_printf_float+0xae>
 8003360:	9a06      	ldr	r2, [sp, #24]
 8003362:	2a47      	cmp	r2, #71	; 0x47
 8003364:	d1be      	bne.n	80032e4 <_printf_float+0x100>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1bc      	bne.n	80032e4 <_printf_float+0x100>
 800336a:	2301      	movs	r3, #1
 800336c:	e7b9      	b.n	80032e2 <_printf_float+0xfe>
 800336e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003372:	d118      	bne.n	80033a6 <_printf_float+0x1c2>
 8003374:	2900      	cmp	r1, #0
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	dd0b      	ble.n	8003392 <_printf_float+0x1ae>
 800337a:	6121      	str	r1, [r4, #16]
 800337c:	b913      	cbnz	r3, 8003384 <_printf_float+0x1a0>
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	07d0      	lsls	r0, r2, #31
 8003382:	d502      	bpl.n	800338a <_printf_float+0x1a6>
 8003384:	3301      	adds	r3, #1
 8003386:	440b      	add	r3, r1
 8003388:	6123      	str	r3, [r4, #16]
 800338a:	65a1      	str	r1, [r4, #88]	; 0x58
 800338c:	f04f 0900 	mov.w	r9, #0
 8003390:	e7de      	b.n	8003350 <_printf_float+0x16c>
 8003392:	b913      	cbnz	r3, 800339a <_printf_float+0x1b6>
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	07d2      	lsls	r2, r2, #31
 8003398:	d501      	bpl.n	800339e <_printf_float+0x1ba>
 800339a:	3302      	adds	r3, #2
 800339c:	e7f4      	b.n	8003388 <_printf_float+0x1a4>
 800339e:	2301      	movs	r3, #1
 80033a0:	e7f2      	b.n	8003388 <_printf_float+0x1a4>
 80033a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033a8:	4299      	cmp	r1, r3
 80033aa:	db05      	blt.n	80033b8 <_printf_float+0x1d4>
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	6121      	str	r1, [r4, #16]
 80033b0:	07d8      	lsls	r0, r3, #31
 80033b2:	d5ea      	bpl.n	800338a <_printf_float+0x1a6>
 80033b4:	1c4b      	adds	r3, r1, #1
 80033b6:	e7e7      	b.n	8003388 <_printf_float+0x1a4>
 80033b8:	2900      	cmp	r1, #0
 80033ba:	bfd4      	ite	le
 80033bc:	f1c1 0202 	rsble	r2, r1, #2
 80033c0:	2201      	movgt	r2, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	e7e0      	b.n	8003388 <_printf_float+0x1a4>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	055a      	lsls	r2, r3, #21
 80033ca:	d407      	bmi.n	80033dc <_printf_float+0x1f8>
 80033cc:	6923      	ldr	r3, [r4, #16]
 80033ce:	4642      	mov	r2, r8
 80033d0:	4631      	mov	r1, r6
 80033d2:	4628      	mov	r0, r5
 80033d4:	47b8      	blx	r7
 80033d6:	3001      	adds	r0, #1
 80033d8:	d12c      	bne.n	8003434 <_printf_float+0x250>
 80033da:	e764      	b.n	80032a6 <_printf_float+0xc2>
 80033dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033e0:	f240 80e0 	bls.w	80035a4 <_printf_float+0x3c0>
 80033e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033e8:	2200      	movs	r2, #0
 80033ea:	2300      	movs	r3, #0
 80033ec:	f7fd fb74 	bl	8000ad8 <__aeabi_dcmpeq>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d034      	beq.n	800345e <_printf_float+0x27a>
 80033f4:	4a37      	ldr	r2, [pc, #220]	; (80034d4 <_printf_float+0x2f0>)
 80033f6:	2301      	movs	r3, #1
 80033f8:	4631      	mov	r1, r6
 80033fa:	4628      	mov	r0, r5
 80033fc:	47b8      	blx	r7
 80033fe:	3001      	adds	r0, #1
 8003400:	f43f af51 	beq.w	80032a6 <_printf_float+0xc2>
 8003404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003408:	429a      	cmp	r2, r3
 800340a:	db02      	blt.n	8003412 <_printf_float+0x22e>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	07d8      	lsls	r0, r3, #31
 8003410:	d510      	bpl.n	8003434 <_printf_float+0x250>
 8003412:	ee18 3a10 	vmov	r3, s16
 8003416:	4652      	mov	r2, sl
 8003418:	4631      	mov	r1, r6
 800341a:	4628      	mov	r0, r5
 800341c:	47b8      	blx	r7
 800341e:	3001      	adds	r0, #1
 8003420:	f43f af41 	beq.w	80032a6 <_printf_float+0xc2>
 8003424:	f04f 0800 	mov.w	r8, #0
 8003428:	f104 091a 	add.w	r9, r4, #26
 800342c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	4543      	cmp	r3, r8
 8003432:	dc09      	bgt.n	8003448 <_printf_float+0x264>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	079b      	lsls	r3, r3, #30
 8003438:	f100 8105 	bmi.w	8003646 <_printf_float+0x462>
 800343c:	68e0      	ldr	r0, [r4, #12]
 800343e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003440:	4298      	cmp	r0, r3
 8003442:	bfb8      	it	lt
 8003444:	4618      	movlt	r0, r3
 8003446:	e730      	b.n	80032aa <_printf_float+0xc6>
 8003448:	2301      	movs	r3, #1
 800344a:	464a      	mov	r2, r9
 800344c:	4631      	mov	r1, r6
 800344e:	4628      	mov	r0, r5
 8003450:	47b8      	blx	r7
 8003452:	3001      	adds	r0, #1
 8003454:	f43f af27 	beq.w	80032a6 <_printf_float+0xc2>
 8003458:	f108 0801 	add.w	r8, r8, #1
 800345c:	e7e6      	b.n	800342c <_printf_float+0x248>
 800345e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	dc39      	bgt.n	80034d8 <_printf_float+0x2f4>
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <_printf_float+0x2f0>)
 8003466:	2301      	movs	r3, #1
 8003468:	4631      	mov	r1, r6
 800346a:	4628      	mov	r0, r5
 800346c:	47b8      	blx	r7
 800346e:	3001      	adds	r0, #1
 8003470:	f43f af19 	beq.w	80032a6 <_printf_float+0xc2>
 8003474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003478:	4313      	orrs	r3, r2
 800347a:	d102      	bne.n	8003482 <_printf_float+0x29e>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	07d9      	lsls	r1, r3, #31
 8003480:	d5d8      	bpl.n	8003434 <_printf_float+0x250>
 8003482:	ee18 3a10 	vmov	r3, s16
 8003486:	4652      	mov	r2, sl
 8003488:	4631      	mov	r1, r6
 800348a:	4628      	mov	r0, r5
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	f43f af09 	beq.w	80032a6 <_printf_float+0xc2>
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	f104 0a1a 	add.w	sl, r4, #26
 800349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349e:	425b      	negs	r3, r3
 80034a0:	454b      	cmp	r3, r9
 80034a2:	dc01      	bgt.n	80034a8 <_printf_float+0x2c4>
 80034a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034a6:	e792      	b.n	80033ce <_printf_float+0x1ea>
 80034a8:	2301      	movs	r3, #1
 80034aa:	4652      	mov	r2, sl
 80034ac:	4631      	mov	r1, r6
 80034ae:	4628      	mov	r0, r5
 80034b0:	47b8      	blx	r7
 80034b2:	3001      	adds	r0, #1
 80034b4:	f43f aef7 	beq.w	80032a6 <_printf_float+0xc2>
 80034b8:	f109 0901 	add.w	r9, r9, #1
 80034bc:	e7ee      	b.n	800349c <_printf_float+0x2b8>
 80034be:	bf00      	nop
 80034c0:	7fefffff 	.word	0x7fefffff
 80034c4:	08005a64 	.word	0x08005a64
 80034c8:	08005a68 	.word	0x08005a68
 80034cc:	08005a70 	.word	0x08005a70
 80034d0:	08005a6c 	.word	0x08005a6c
 80034d4:	08005a74 	.word	0x08005a74
 80034d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034dc:	429a      	cmp	r2, r3
 80034de:	bfa8      	it	ge
 80034e0:	461a      	movge	r2, r3
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	4691      	mov	r9, r2
 80034e6:	dc37      	bgt.n	8003558 <_printf_float+0x374>
 80034e8:	f04f 0b00 	mov.w	fp, #0
 80034ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034f0:	f104 021a 	add.w	r2, r4, #26
 80034f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034f6:	9305      	str	r3, [sp, #20]
 80034f8:	eba3 0309 	sub.w	r3, r3, r9
 80034fc:	455b      	cmp	r3, fp
 80034fe:	dc33      	bgt.n	8003568 <_printf_float+0x384>
 8003500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003504:	429a      	cmp	r2, r3
 8003506:	db3b      	blt.n	8003580 <_printf_float+0x39c>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	07da      	lsls	r2, r3, #31
 800350c:	d438      	bmi.n	8003580 <_printf_float+0x39c>
 800350e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003510:	9b05      	ldr	r3, [sp, #20]
 8003512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	eba2 0901 	sub.w	r9, r2, r1
 800351a:	4599      	cmp	r9, r3
 800351c:	bfa8      	it	ge
 800351e:	4699      	movge	r9, r3
 8003520:	f1b9 0f00 	cmp.w	r9, #0
 8003524:	dc35      	bgt.n	8003592 <_printf_float+0x3ae>
 8003526:	f04f 0800 	mov.w	r8, #0
 800352a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800352e:	f104 0a1a 	add.w	sl, r4, #26
 8003532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	eba3 0309 	sub.w	r3, r3, r9
 800353c:	4543      	cmp	r3, r8
 800353e:	f77f af79 	ble.w	8003434 <_printf_float+0x250>
 8003542:	2301      	movs	r3, #1
 8003544:	4652      	mov	r2, sl
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	47b8      	blx	r7
 800354c:	3001      	adds	r0, #1
 800354e:	f43f aeaa 	beq.w	80032a6 <_printf_float+0xc2>
 8003552:	f108 0801 	add.w	r8, r8, #1
 8003556:	e7ec      	b.n	8003532 <_printf_float+0x34e>
 8003558:	4613      	mov	r3, r2
 800355a:	4631      	mov	r1, r6
 800355c:	4642      	mov	r2, r8
 800355e:	4628      	mov	r0, r5
 8003560:	47b8      	blx	r7
 8003562:	3001      	adds	r0, #1
 8003564:	d1c0      	bne.n	80034e8 <_printf_float+0x304>
 8003566:	e69e      	b.n	80032a6 <_printf_float+0xc2>
 8003568:	2301      	movs	r3, #1
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	9205      	str	r2, [sp, #20]
 8003570:	47b8      	blx	r7
 8003572:	3001      	adds	r0, #1
 8003574:	f43f ae97 	beq.w	80032a6 <_printf_float+0xc2>
 8003578:	9a05      	ldr	r2, [sp, #20]
 800357a:	f10b 0b01 	add.w	fp, fp, #1
 800357e:	e7b9      	b.n	80034f4 <_printf_float+0x310>
 8003580:	ee18 3a10 	vmov	r3, s16
 8003584:	4652      	mov	r2, sl
 8003586:	4631      	mov	r1, r6
 8003588:	4628      	mov	r0, r5
 800358a:	47b8      	blx	r7
 800358c:	3001      	adds	r0, #1
 800358e:	d1be      	bne.n	800350e <_printf_float+0x32a>
 8003590:	e689      	b.n	80032a6 <_printf_float+0xc2>
 8003592:	9a05      	ldr	r2, [sp, #20]
 8003594:	464b      	mov	r3, r9
 8003596:	4442      	add	r2, r8
 8003598:	4631      	mov	r1, r6
 800359a:	4628      	mov	r0, r5
 800359c:	47b8      	blx	r7
 800359e:	3001      	adds	r0, #1
 80035a0:	d1c1      	bne.n	8003526 <_printf_float+0x342>
 80035a2:	e680      	b.n	80032a6 <_printf_float+0xc2>
 80035a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035a6:	2a01      	cmp	r2, #1
 80035a8:	dc01      	bgt.n	80035ae <_printf_float+0x3ca>
 80035aa:	07db      	lsls	r3, r3, #31
 80035ac:	d538      	bpl.n	8003620 <_printf_float+0x43c>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4642      	mov	r2, r8
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	f43f ae74 	beq.w	80032a6 <_printf_float+0xc2>
 80035be:	ee18 3a10 	vmov	r3, s16
 80035c2:	4652      	mov	r2, sl
 80035c4:	4631      	mov	r1, r6
 80035c6:	4628      	mov	r0, r5
 80035c8:	47b8      	blx	r7
 80035ca:	3001      	adds	r0, #1
 80035cc:	f43f ae6b 	beq.w	80032a6 <_printf_float+0xc2>
 80035d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035d4:	2200      	movs	r2, #0
 80035d6:	2300      	movs	r3, #0
 80035d8:	f7fd fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80035dc:	b9d8      	cbnz	r0, 8003616 <_printf_float+0x432>
 80035de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035e0:	f108 0201 	add.w	r2, r8, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	d10e      	bne.n	800360e <_printf_float+0x42a>
 80035f0:	e659      	b.n	80032a6 <_printf_float+0xc2>
 80035f2:	2301      	movs	r3, #1
 80035f4:	4652      	mov	r2, sl
 80035f6:	4631      	mov	r1, r6
 80035f8:	4628      	mov	r0, r5
 80035fa:	47b8      	blx	r7
 80035fc:	3001      	adds	r0, #1
 80035fe:	f43f ae52 	beq.w	80032a6 <_printf_float+0xc2>
 8003602:	f108 0801 	add.w	r8, r8, #1
 8003606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	4543      	cmp	r3, r8
 800360c:	dcf1      	bgt.n	80035f2 <_printf_float+0x40e>
 800360e:	464b      	mov	r3, r9
 8003610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003614:	e6dc      	b.n	80033d0 <_printf_float+0x1ec>
 8003616:	f04f 0800 	mov.w	r8, #0
 800361a:	f104 0a1a 	add.w	sl, r4, #26
 800361e:	e7f2      	b.n	8003606 <_printf_float+0x422>
 8003620:	2301      	movs	r3, #1
 8003622:	4642      	mov	r2, r8
 8003624:	e7df      	b.n	80035e6 <_printf_float+0x402>
 8003626:	2301      	movs	r3, #1
 8003628:	464a      	mov	r2, r9
 800362a:	4631      	mov	r1, r6
 800362c:	4628      	mov	r0, r5
 800362e:	47b8      	blx	r7
 8003630:	3001      	adds	r0, #1
 8003632:	f43f ae38 	beq.w	80032a6 <_printf_float+0xc2>
 8003636:	f108 0801 	add.w	r8, r8, #1
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800363e:	1a5b      	subs	r3, r3, r1
 8003640:	4543      	cmp	r3, r8
 8003642:	dcf0      	bgt.n	8003626 <_printf_float+0x442>
 8003644:	e6fa      	b.n	800343c <_printf_float+0x258>
 8003646:	f04f 0800 	mov.w	r8, #0
 800364a:	f104 0919 	add.w	r9, r4, #25
 800364e:	e7f4      	b.n	800363a <_printf_float+0x456>

08003650 <_printf_common>:
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	4616      	mov	r6, r2
 8003656:	4699      	mov	r9, r3
 8003658:	688a      	ldr	r2, [r1, #8]
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003660:	4293      	cmp	r3, r2
 8003662:	bfb8      	it	lt
 8003664:	4613      	movlt	r3, r2
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800366c:	4607      	mov	r7, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b10a      	cbz	r2, 8003676 <_printf_common+0x26>
 8003672:	3301      	adds	r3, #1
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0699      	lsls	r1, r3, #26
 800367a:	bf42      	ittt	mi
 800367c:	6833      	ldrmi	r3, [r6, #0]
 800367e:	3302      	addmi	r3, #2
 8003680:	6033      	strmi	r3, [r6, #0]
 8003682:	6825      	ldr	r5, [r4, #0]
 8003684:	f015 0506 	ands.w	r5, r5, #6
 8003688:	d106      	bne.n	8003698 <_printf_common+0x48>
 800368a:	f104 0a19 	add.w	sl, r4, #25
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	6832      	ldr	r2, [r6, #0]
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	42ab      	cmp	r3, r5
 8003696:	dc26      	bgt.n	80036e6 <_printf_common+0x96>
 8003698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800369c:	1e13      	subs	r3, r2, #0
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	bf18      	it	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	0692      	lsls	r2, r2, #26
 80036a6:	d42b      	bmi.n	8003700 <_printf_common+0xb0>
 80036a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ac:	4649      	mov	r1, r9
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	3001      	adds	r0, #1
 80036b4:	d01e      	beq.n	80036f4 <_printf_common+0xa4>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	68e5      	ldr	r5, [r4, #12]
 80036ba:	6832      	ldr	r2, [r6, #0]
 80036bc:	f003 0306 	and.w	r3, r3, #6
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	bf08      	it	eq
 80036c4:	1aad      	subeq	r5, r5, r2
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	bf0c      	ite	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	2500      	movne	r5, #0
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bfc4      	itt	gt
 80036d6:	1a9b      	subgt	r3, r3, r2
 80036d8:	18ed      	addgt	r5, r5, r3
 80036da:	2600      	movs	r6, #0
 80036dc:	341a      	adds	r4, #26
 80036de:	42b5      	cmp	r5, r6
 80036e0:	d11a      	bne.n	8003718 <_printf_common+0xc8>
 80036e2:	2000      	movs	r0, #0
 80036e4:	e008      	b.n	80036f8 <_printf_common+0xa8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4649      	mov	r1, r9
 80036ec:	4638      	mov	r0, r7
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d103      	bne.n	80036fc <_printf_common+0xac>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7c6      	b.n	800368e <_printf_common+0x3e>
 8003700:	18e1      	adds	r1, r4, r3
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	2030      	movs	r0, #48	; 0x30
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800370a:	4422      	add	r2, r4
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003714:	3302      	adds	r3, #2
 8003716:	e7c7      	b.n	80036a8 <_printf_common+0x58>
 8003718:	2301      	movs	r3, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4649      	mov	r1, r9
 800371e:	4638      	mov	r0, r7
 8003720:	47c0      	blx	r8
 8003722:	3001      	adds	r0, #1
 8003724:	d0e6      	beq.n	80036f4 <_printf_common+0xa4>
 8003726:	3601      	adds	r6, #1
 8003728:	e7d9      	b.n	80036de <_printf_common+0x8e>
	...

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	460c      	mov	r4, r1
 8003732:	4691      	mov	r9, r2
 8003734:	7e27      	ldrb	r7, [r4, #24]
 8003736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003738:	2f78      	cmp	r7, #120	; 0x78
 800373a:	4680      	mov	r8, r0
 800373c:	469a      	mov	sl, r3
 800373e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	; 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d8 	beq.w	80038fe <_printf_i+0x1d2>
 800374e:	2f58      	cmp	r7, #88	; 0x58
 8003750:	f000 80a3 	beq.w	800389a <_printf_i+0x16e>
 8003754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a001      	add	r0, pc, #4	; (adr r0, 800376c <_printf_i+0x40>)
 8003768:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038e5 	.word	0x080038e5
 800379c:	08003809 	.word	0x08003809
 80037a0:	080038c7 	.word	0x080038c7
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	08003907 	.word	0x08003907
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	080038cf 	.word	0x080038cf
 80037c4:	680b      	ldr	r3, [r1, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	600a      	str	r2, [r1, #0]
 80037cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0a3      	b.n	8003920 <_printf_i+0x1f4>
 80037d8:	6825      	ldr	r5, [r4, #0]
 80037da:	6808      	ldr	r0, [r1, #0]
 80037dc:	062e      	lsls	r6, r5, #24
 80037de:	f100 0304 	add.w	r3, r0, #4
 80037e2:	d50a      	bpl.n	80037fa <_printf_i+0xce>
 80037e4:	6805      	ldr	r5, [r0, #0]
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	2d00      	cmp	r5, #0
 80037ea:	da03      	bge.n	80037f4 <_printf_i+0xc8>
 80037ec:	232d      	movs	r3, #45	; 0x2d
 80037ee:	426d      	negs	r5, r5
 80037f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f4:	485e      	ldr	r0, [pc, #376]	; (8003970 <_printf_i+0x244>)
 80037f6:	230a      	movs	r3, #10
 80037f8:	e019      	b.n	800382e <_printf_i+0x102>
 80037fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037fe:	6805      	ldr	r5, [r0, #0]
 8003800:	600b      	str	r3, [r1, #0]
 8003802:	bf18      	it	ne
 8003804:	b22d      	sxthne	r5, r5
 8003806:	e7ef      	b.n	80037e8 <_printf_i+0xbc>
 8003808:	680b      	ldr	r3, [r1, #0]
 800380a:	6825      	ldr	r5, [r4, #0]
 800380c:	1d18      	adds	r0, r3, #4
 800380e:	6008      	str	r0, [r1, #0]
 8003810:	0628      	lsls	r0, r5, #24
 8003812:	d501      	bpl.n	8003818 <_printf_i+0xec>
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	e002      	b.n	800381e <_printf_i+0xf2>
 8003818:	0669      	lsls	r1, r5, #25
 800381a:	d5fb      	bpl.n	8003814 <_printf_i+0xe8>
 800381c:	881d      	ldrh	r5, [r3, #0]
 800381e:	4854      	ldr	r0, [pc, #336]	; (8003970 <_printf_i+0x244>)
 8003820:	2f6f      	cmp	r7, #111	; 0x6f
 8003822:	bf0c      	ite	eq
 8003824:	2308      	moveq	r3, #8
 8003826:	230a      	movne	r3, #10
 8003828:	2100      	movs	r1, #0
 800382a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800382e:	6866      	ldr	r6, [r4, #4]
 8003830:	60a6      	str	r6, [r4, #8]
 8003832:	2e00      	cmp	r6, #0
 8003834:	bfa2      	ittt	ge
 8003836:	6821      	ldrge	r1, [r4, #0]
 8003838:	f021 0104 	bicge.w	r1, r1, #4
 800383c:	6021      	strge	r1, [r4, #0]
 800383e:	b90d      	cbnz	r5, 8003844 <_printf_i+0x118>
 8003840:	2e00      	cmp	r6, #0
 8003842:	d04d      	beq.n	80038e0 <_printf_i+0x1b4>
 8003844:	4616      	mov	r6, r2
 8003846:	fbb5 f1f3 	udiv	r1, r5, r3
 800384a:	fb03 5711 	mls	r7, r3, r1, r5
 800384e:	5dc7      	ldrb	r7, [r0, r7]
 8003850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003854:	462f      	mov	r7, r5
 8003856:	42bb      	cmp	r3, r7
 8003858:	460d      	mov	r5, r1
 800385a:	d9f4      	bls.n	8003846 <_printf_i+0x11a>
 800385c:	2b08      	cmp	r3, #8
 800385e:	d10b      	bne.n	8003878 <_printf_i+0x14c>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07df      	lsls	r7, r3, #31
 8003864:	d508      	bpl.n	8003878 <_printf_i+0x14c>
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	6861      	ldr	r1, [r4, #4]
 800386a:	4299      	cmp	r1, r3
 800386c:	bfde      	ittt	le
 800386e:	2330      	movle	r3, #48	; 0x30
 8003870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003874:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003878:	1b92      	subs	r2, r2, r6
 800387a:	6122      	str	r2, [r4, #16]
 800387c:	f8cd a000 	str.w	sl, [sp]
 8003880:	464b      	mov	r3, r9
 8003882:	aa03      	add	r2, sp, #12
 8003884:	4621      	mov	r1, r4
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fee2 	bl	8003650 <_printf_common>
 800388c:	3001      	adds	r0, #1
 800388e:	d14c      	bne.n	800392a <_printf_i+0x1fe>
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	b004      	add	sp, #16
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <_printf_i+0x244>)
 800389c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	680e      	ldr	r6, [r1, #0]
 80038a4:	061f      	lsls	r7, r3, #24
 80038a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80038aa:	600e      	str	r6, [r1, #0]
 80038ac:	d514      	bpl.n	80038d8 <_printf_i+0x1ac>
 80038ae:	07d9      	lsls	r1, r3, #31
 80038b0:	bf44      	itt	mi
 80038b2:	f043 0320 	orrmi.w	r3, r3, #32
 80038b6:	6023      	strmi	r3, [r4, #0]
 80038b8:	b91d      	cbnz	r5, 80038c2 <_printf_i+0x196>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	f023 0320 	bic.w	r3, r3, #32
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	2310      	movs	r3, #16
 80038c4:	e7b0      	b.n	8003828 <_printf_i+0xfc>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	2378      	movs	r3, #120	; 0x78
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <_printf_i+0x248>)
 80038d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d6:	e7e3      	b.n	80038a0 <_printf_i+0x174>
 80038d8:	065e      	lsls	r6, r3, #25
 80038da:	bf48      	it	mi
 80038dc:	b2ad      	uxthmi	r5, r5
 80038de:	e7e6      	b.n	80038ae <_printf_i+0x182>
 80038e0:	4616      	mov	r6, r2
 80038e2:	e7bb      	b.n	800385c <_printf_i+0x130>
 80038e4:	680b      	ldr	r3, [r1, #0]
 80038e6:	6826      	ldr	r6, [r4, #0]
 80038e8:	6960      	ldr	r0, [r4, #20]
 80038ea:	1d1d      	adds	r5, r3, #4
 80038ec:	600d      	str	r5, [r1, #0]
 80038ee:	0635      	lsls	r5, r6, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0x1cc>
 80038f4:	6018      	str	r0, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0x1d2>
 80038f8:	0671      	lsls	r1, r6, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0x1c8>
 80038fc:	8018      	strh	r0, [r3, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	4616      	mov	r6, r2
 8003904:	e7ba      	b.n	800387c <_printf_i+0x150>
 8003906:	680b      	ldr	r3, [r1, #0]
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	600a      	str	r2, [r1, #0]
 800390c:	681e      	ldr	r6, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2100      	movs	r1, #0
 8003912:	4630      	mov	r0, r6
 8003914:	f7fc fc6c 	bl	80001f0 <memchr>
 8003918:	b108      	cbz	r0, 800391e <_printf_i+0x1f2>
 800391a:	1b80      	subs	r0, r0, r6
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	e7a8      	b.n	800387c <_printf_i+0x150>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	4632      	mov	r2, r6
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d0ab      	beq.n	8003890 <_printf_i+0x164>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	079b      	lsls	r3, r3, #30
 800393c:	d413      	bmi.n	8003966 <_printf_i+0x23a>
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	4298      	cmp	r0, r3
 8003944:	bfb8      	it	lt
 8003946:	4618      	movlt	r0, r3
 8003948:	e7a4      	b.n	8003894 <_printf_i+0x168>
 800394a:	2301      	movs	r3, #1
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d09b      	beq.n	8003890 <_printf_i+0x164>
 8003958:	3501      	adds	r5, #1
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	9903      	ldr	r1, [sp, #12]
 800395e:	1a5b      	subs	r3, r3, r1
 8003960:	42ab      	cmp	r3, r5
 8003962:	dcf2      	bgt.n	800394a <_printf_i+0x21e>
 8003964:	e7eb      	b.n	800393e <_printf_i+0x212>
 8003966:	2500      	movs	r5, #0
 8003968:	f104 0619 	add.w	r6, r4, #25
 800396c:	e7f5      	b.n	800395a <_printf_i+0x22e>
 800396e:	bf00      	nop
 8003970:	08005a76 	.word	0x08005a76
 8003974:	08005a87 	.word	0x08005a87

08003978 <quorem>:
 8003978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	6903      	ldr	r3, [r0, #16]
 800397e:	690c      	ldr	r4, [r1, #16]
 8003980:	42a3      	cmp	r3, r4
 8003982:	4607      	mov	r7, r0
 8003984:	f2c0 8081 	blt.w	8003a8a <quorem+0x112>
 8003988:	3c01      	subs	r4, #1
 800398a:	f101 0814 	add.w	r8, r1, #20
 800398e:	f100 0514 	add.w	r5, r0, #20
 8003992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800399c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039a0:	3301      	adds	r3, #1
 80039a2:	429a      	cmp	r2, r3
 80039a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80039a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80039b0:	d331      	bcc.n	8003a16 <quorem+0x9e>
 80039b2:	f04f 0e00 	mov.w	lr, #0
 80039b6:	4640      	mov	r0, r8
 80039b8:	46ac      	mov	ip, r5
 80039ba:	46f2      	mov	sl, lr
 80039bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80039c0:	b293      	uxth	r3, r2
 80039c2:	fb06 e303 	mla	r3, r6, r3, lr
 80039c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	ebaa 0303 	sub.w	r3, sl, r3
 80039d0:	0c12      	lsrs	r2, r2, #16
 80039d2:	f8dc a000 	ldr.w	sl, [ip]
 80039d6:	fb06 e202 	mla	r2, r6, r2, lr
 80039da:	fa13 f38a 	uxtah	r3, r3, sl
 80039de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039e2:	fa1f fa82 	uxth.w	sl, r2
 80039e6:	f8dc 2000 	ldr.w	r2, [ip]
 80039ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80039ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039f8:	4581      	cmp	r9, r0
 80039fa:	f84c 3b04 	str.w	r3, [ip], #4
 80039fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a02:	d2db      	bcs.n	80039bc <quorem+0x44>
 8003a04:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a08:	b92b      	cbnz	r3, 8003a16 <quorem+0x9e>
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	3b04      	subs	r3, #4
 8003a0e:	429d      	cmp	r5, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	d32e      	bcc.n	8003a72 <quorem+0xfa>
 8003a14:	613c      	str	r4, [r7, #16]
 8003a16:	4638      	mov	r0, r7
 8003a18:	f001 f8be 	bl	8004b98 <__mcmp>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	db24      	blt.n	8003a6a <quorem+0xf2>
 8003a20:	3601      	adds	r6, #1
 8003a22:	4628      	mov	r0, r5
 8003a24:	f04f 0c00 	mov.w	ip, #0
 8003a28:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a2c:	f8d0 e000 	ldr.w	lr, [r0]
 8003a30:	b293      	uxth	r3, r2
 8003a32:	ebac 0303 	sub.w	r3, ip, r3
 8003a36:	0c12      	lsrs	r2, r2, #16
 8003a38:	fa13 f38e 	uxtah	r3, r3, lr
 8003a3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a4a:	45c1      	cmp	r9, r8
 8003a4c:	f840 3b04 	str.w	r3, [r0], #4
 8003a50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a54:	d2e8      	bcs.n	8003a28 <quorem+0xb0>
 8003a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a5e:	b922      	cbnz	r2, 8003a6a <quorem+0xf2>
 8003a60:	3b04      	subs	r3, #4
 8003a62:	429d      	cmp	r5, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	d30a      	bcc.n	8003a7e <quorem+0x106>
 8003a68:	613c      	str	r4, [r7, #16]
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	b003      	add	sp, #12
 8003a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	3b04      	subs	r3, #4
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d1cc      	bne.n	8003a14 <quorem+0x9c>
 8003a7a:	3c01      	subs	r4, #1
 8003a7c:	e7c7      	b.n	8003a0e <quorem+0x96>
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	3b04      	subs	r3, #4
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d1f0      	bne.n	8003a68 <quorem+0xf0>
 8003a86:	3c01      	subs	r4, #1
 8003a88:	e7eb      	b.n	8003a62 <quorem+0xea>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e7ee      	b.n	8003a6c <quorem+0xf4>
	...

08003a90 <_dtoa_r>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	ed2d 8b02 	vpush	{d8}
 8003a98:	ec57 6b10 	vmov	r6, r7, d0
 8003a9c:	b095      	sub	sp, #84	; 0x54
 8003a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003aa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003aa4:	9105      	str	r1, [sp, #20]
 8003aa6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003aaa:	4604      	mov	r4, r0
 8003aac:	9209      	str	r2, [sp, #36]	; 0x24
 8003aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ab0:	b975      	cbnz	r5, 8003ad0 <_dtoa_r+0x40>
 8003ab2:	2010      	movs	r0, #16
 8003ab4:	f000 fddc 	bl	8004670 <malloc>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6260      	str	r0, [r4, #36]	; 0x24
 8003abc:	b920      	cbnz	r0, 8003ac8 <_dtoa_r+0x38>
 8003abe:	4bb2      	ldr	r3, [pc, #712]	; (8003d88 <_dtoa_r+0x2f8>)
 8003ac0:	21ea      	movs	r1, #234	; 0xea
 8003ac2:	48b2      	ldr	r0, [pc, #712]	; (8003d8c <_dtoa_r+0x2fc>)
 8003ac4:	f001 fa32 	bl	8004f2c <__assert_func>
 8003ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003acc:	6005      	str	r5, [r0, #0]
 8003ace:	60c5      	str	r5, [r0, #12]
 8003ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	b151      	cbz	r1, 8003aec <_dtoa_r+0x5c>
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	604a      	str	r2, [r1, #4]
 8003ada:	2301      	movs	r3, #1
 8003adc:	4093      	lsls	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f000 fe1b 	bl	800471c <_Bfree>
 8003ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	1e3b      	subs	r3, r7, #0
 8003aee:	bfb9      	ittee	lt
 8003af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003af4:	9303      	strlt	r3, [sp, #12]
 8003af6:	2300      	movge	r3, #0
 8003af8:	f8c8 3000 	strge.w	r3, [r8]
 8003afc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003b00:	4ba3      	ldr	r3, [pc, #652]	; (8003d90 <_dtoa_r+0x300>)
 8003b02:	bfbc      	itt	lt
 8003b04:	2201      	movlt	r2, #1
 8003b06:	f8c8 2000 	strlt.w	r2, [r8]
 8003b0a:	ea33 0309 	bics.w	r3, r3, r9
 8003b0e:	d11b      	bne.n	8003b48 <_dtoa_r+0xb8>
 8003b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003b1c:	4333      	orrs	r3, r6
 8003b1e:	f000 857a 	beq.w	8004616 <_dtoa_r+0xb86>
 8003b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b24:	b963      	cbnz	r3, 8003b40 <_dtoa_r+0xb0>
 8003b26:	4b9b      	ldr	r3, [pc, #620]	; (8003d94 <_dtoa_r+0x304>)
 8003b28:	e024      	b.n	8003b74 <_dtoa_r+0xe4>
 8003b2a:	4b9b      	ldr	r3, [pc, #620]	; (8003d98 <_dtoa_r+0x308>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	9800      	ldr	r0, [sp, #0]
 8003b36:	b015      	add	sp, #84	; 0x54
 8003b38:	ecbd 8b02 	vpop	{d8}
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b40:	4b94      	ldr	r3, [pc, #592]	; (8003d94 <_dtoa_r+0x304>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	3303      	adds	r3, #3
 8003b46:	e7f3      	b.n	8003b30 <_dtoa_r+0xa0>
 8003b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ec51 0b17 	vmov	r0, r1, d7
 8003b52:	2300      	movs	r3, #0
 8003b54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003b58:	f7fc ffbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	b158      	cbz	r0, 8003b78 <_dtoa_r+0xe8>
 8003b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b62:	2301      	movs	r3, #1
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8551 	beq.w	8004610 <_dtoa_r+0xb80>
 8003b6e:	488b      	ldr	r0, [pc, #556]	; (8003d9c <_dtoa_r+0x30c>)
 8003b70:	6018      	str	r0, [r3, #0]
 8003b72:	1e43      	subs	r3, r0, #1
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	e7dd      	b.n	8003b34 <_dtoa_r+0xa4>
 8003b78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003b7c:	aa12      	add	r2, sp, #72	; 0x48
 8003b7e:	a913      	add	r1, sp, #76	; 0x4c
 8003b80:	4620      	mov	r0, r4
 8003b82:	f001 f8ad 	bl	8004ce0 <__d2b>
 8003b86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003b8a:	4683      	mov	fp, r0
 8003b8c:	2d00      	cmp	r5, #0
 8003b8e:	d07c      	beq.n	8003c8a <_dtoa_r+0x1fa>
 8003b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003b9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003ba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003baa:	4b7d      	ldr	r3, [pc, #500]	; (8003da0 <_dtoa_r+0x310>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	4630      	mov	r0, r6
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	f7fc fb71 	bl	8000298 <__aeabi_dsub>
 8003bb6:	a36e      	add	r3, pc, #440	; (adr r3, 8003d70 <_dtoa_r+0x2e0>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fd24 	bl	8000608 <__aeabi_dmul>
 8003bc0:	a36d      	add	r3, pc, #436	; (adr r3, 8003d78 <_dtoa_r+0x2e8>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f7fc fb69 	bl	800029c <__adddf3>
 8003bca:	4606      	mov	r6, r0
 8003bcc:	4628      	mov	r0, r5
 8003bce:	460f      	mov	r7, r1
 8003bd0:	f7fc fcb0 	bl	8000534 <__aeabi_i2d>
 8003bd4:	a36a      	add	r3, pc, #424	; (adr r3, 8003d80 <_dtoa_r+0x2f0>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fd15 	bl	8000608 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4630      	mov	r0, r6
 8003be4:	4639      	mov	r1, r7
 8003be6:	f7fc fb59 	bl	800029c <__adddf3>
 8003bea:	4606      	mov	r6, r0
 8003bec:	460f      	mov	r7, r1
 8003bee:	f7fc ffbb 	bl	8000b68 <__aeabi_d2iz>
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	4639      	mov	r1, r7
 8003bfc:	f7fc ff76 	bl	8000aec <__aeabi_dcmplt>
 8003c00:	b148      	cbz	r0, 8003c16 <_dtoa_r+0x186>
 8003c02:	4650      	mov	r0, sl
 8003c04:	f7fc fc96 	bl	8000534 <__aeabi_i2d>
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	f7fc ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c10:	b908      	cbnz	r0, 8003c16 <_dtoa_r+0x186>
 8003c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c16:	f1ba 0f16 	cmp.w	sl, #22
 8003c1a:	d854      	bhi.n	8003cc6 <_dtoa_r+0x236>
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <_dtoa_r+0x314>)
 8003c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c2a:	f7fc ff5f 	bl	8000aec <__aeabi_dcmplt>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d04b      	beq.n	8003cca <_dtoa_r+0x23a>
 8003c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c36:	2300      	movs	r3, #0
 8003c38:	930e      	str	r3, [sp, #56]	; 0x38
 8003c3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c3c:	1b5d      	subs	r5, r3, r5
 8003c3e:	1e6b      	subs	r3, r5, #1
 8003c40:	9304      	str	r3, [sp, #16]
 8003c42:	bf43      	ittte	mi
 8003c44:	2300      	movmi	r3, #0
 8003c46:	f1c5 0801 	rsbmi	r8, r5, #1
 8003c4a:	9304      	strmi	r3, [sp, #16]
 8003c4c:	f04f 0800 	movpl.w	r8, #0
 8003c50:	f1ba 0f00 	cmp.w	sl, #0
 8003c54:	db3b      	blt.n	8003cce <_dtoa_r+0x23e>
 8003c56:	9b04      	ldr	r3, [sp, #16]
 8003c58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003c5c:	4453      	add	r3, sl
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9306      	str	r3, [sp, #24]
 8003c64:	9b05      	ldr	r3, [sp, #20]
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	d869      	bhi.n	8003d3e <_dtoa_r+0x2ae>
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	bfc4      	itt	gt
 8003c6e:	3b04      	subgt	r3, #4
 8003c70:	9305      	strgt	r3, [sp, #20]
 8003c72:	9b05      	ldr	r3, [sp, #20]
 8003c74:	f1a3 0302 	sub.w	r3, r3, #2
 8003c78:	bfcc      	ite	gt
 8003c7a:	2500      	movgt	r5, #0
 8003c7c:	2501      	movle	r5, #1
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d869      	bhi.n	8003d56 <_dtoa_r+0x2c6>
 8003c82:	e8df f003 	tbb	[pc, r3]
 8003c86:	4e2c      	.short	0x4e2c
 8003c88:	5a4c      	.short	0x5a4c
 8003c8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003c8e:	441d      	add	r5, r3
 8003c90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	bfc1      	itttt	gt
 8003c98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003ca0:	fa09 f303 	lslgt.w	r3, r9, r3
 8003ca4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ca8:	bfda      	itte	le
 8003caa:	f1c3 0320 	rsble	r3, r3, #32
 8003cae:	fa06 f003 	lslle.w	r0, r6, r3
 8003cb2:	4318      	orrgt	r0, r3
 8003cb4:	f7fc fc2e 	bl	8000514 <__aeabi_ui2d>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4606      	mov	r6, r0
 8003cbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003cc0:	3d01      	subs	r5, #1
 8003cc2:	9310      	str	r3, [sp, #64]	; 0x40
 8003cc4:	e771      	b.n	8003baa <_dtoa_r+0x11a>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e7b6      	b.n	8003c38 <_dtoa_r+0x1a8>
 8003cca:	900e      	str	r0, [sp, #56]	; 0x38
 8003ccc:	e7b5      	b.n	8003c3a <_dtoa_r+0x1aa>
 8003cce:	f1ca 0300 	rsb	r3, sl, #0
 8003cd2:	9306      	str	r3, [sp, #24]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	eba8 080a 	sub.w	r8, r8, sl
 8003cda:	930d      	str	r3, [sp, #52]	; 0x34
 8003cdc:	e7c2      	b.n	8003c64 <_dtoa_r+0x1d4>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9308      	str	r3, [sp, #32]
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dc39      	bgt.n	8003d5c <_dtoa_r+0x2cc>
 8003ce8:	f04f 0901 	mov.w	r9, #1
 8003cec:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	6042      	str	r2, [r0, #4]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	f102 0614 	add.w	r6, r2, #20
 8003d02:	429e      	cmp	r6, r3
 8003d04:	6841      	ldr	r1, [r0, #4]
 8003d06:	d92f      	bls.n	8003d68 <_dtoa_r+0x2d8>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f000 fcc7 	bl	800469c <_Balloc>
 8003d0e:	9000      	str	r0, [sp, #0]
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d14b      	bne.n	8003dac <_dtoa_r+0x31c>
 8003d14:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <_dtoa_r+0x318>)
 8003d16:	4602      	mov	r2, r0
 8003d18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003d1c:	e6d1      	b.n	8003ac2 <_dtoa_r+0x32>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e7de      	b.n	8003ce0 <_dtoa_r+0x250>
 8003d22:	2300      	movs	r3, #0
 8003d24:	9308      	str	r3, [sp, #32]
 8003d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d28:	eb0a 0903 	add.w	r9, sl, r3
 8003d2c:	f109 0301 	add.w	r3, r9, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	bfb8      	it	lt
 8003d36:	2301      	movlt	r3, #1
 8003d38:	e7dd      	b.n	8003cf6 <_dtoa_r+0x266>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e7f2      	b.n	8003d24 <_dtoa_r+0x294>
 8003d3e:	2501      	movs	r5, #1
 8003d40:	2300      	movs	r3, #0
 8003d42:	9305      	str	r3, [sp, #20]
 8003d44:	9508      	str	r5, [sp, #32]
 8003d46:	f04f 39ff 	mov.w	r9, #4294967295
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d50:	2312      	movs	r3, #18
 8003d52:	9209      	str	r2, [sp, #36]	; 0x24
 8003d54:	e7cf      	b.n	8003cf6 <_dtoa_r+0x266>
 8003d56:	2301      	movs	r3, #1
 8003d58:	9308      	str	r3, [sp, #32]
 8003d5a:	e7f4      	b.n	8003d46 <_dtoa_r+0x2b6>
 8003d5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d60:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d64:	464b      	mov	r3, r9
 8003d66:	e7c6      	b.n	8003cf6 <_dtoa_r+0x266>
 8003d68:	3101      	adds	r1, #1
 8003d6a:	6041      	str	r1, [r0, #4]
 8003d6c:	0052      	lsls	r2, r2, #1
 8003d6e:	e7c6      	b.n	8003cfe <_dtoa_r+0x26e>
 8003d70:	636f4361 	.word	0x636f4361
 8003d74:	3fd287a7 	.word	0x3fd287a7
 8003d78:	8b60c8b3 	.word	0x8b60c8b3
 8003d7c:	3fc68a28 	.word	0x3fc68a28
 8003d80:	509f79fb 	.word	0x509f79fb
 8003d84:	3fd34413 	.word	0x3fd34413
 8003d88:	08005aa5 	.word	0x08005aa5
 8003d8c:	08005abc 	.word	0x08005abc
 8003d90:	7ff00000 	.word	0x7ff00000
 8003d94:	08005aa1 	.word	0x08005aa1
 8003d98:	08005a98 	.word	0x08005a98
 8003d9c:	08005a75 	.word	0x08005a75
 8003da0:	3ff80000 	.word	0x3ff80000
 8003da4:	08005bb8 	.word	0x08005bb8
 8003da8:	08005b1b 	.word	0x08005b1b
 8003dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dae:	9a00      	ldr	r2, [sp, #0]
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	9b01      	ldr	r3, [sp, #4]
 8003db4:	2b0e      	cmp	r3, #14
 8003db6:	f200 80ad 	bhi.w	8003f14 <_dtoa_r+0x484>
 8003dba:	2d00      	cmp	r5, #0
 8003dbc:	f000 80aa 	beq.w	8003f14 <_dtoa_r+0x484>
 8003dc0:	f1ba 0f00 	cmp.w	sl, #0
 8003dc4:	dd36      	ble.n	8003e34 <_dtoa_r+0x3a4>
 8003dc6:	4ac3      	ldr	r2, [pc, #780]	; (80040d4 <_dtoa_r+0x644>)
 8003dc8:	f00a 030f 	and.w	r3, sl, #15
 8003dcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003dd0:	ed93 7b00 	vldr	d7, [r3]
 8003dd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003dd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003ddc:	eeb0 8a47 	vmov.f32	s16, s14
 8003de0:	eef0 8a67 	vmov.f32	s17, s15
 8003de4:	d016      	beq.n	8003e14 <_dtoa_r+0x384>
 8003de6:	4bbc      	ldr	r3, [pc, #752]	; (80040d8 <_dtoa_r+0x648>)
 8003de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003df0:	f7fc fd34 	bl	800085c <__aeabi_ddiv>
 8003df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003df8:	f007 070f 	and.w	r7, r7, #15
 8003dfc:	2503      	movs	r5, #3
 8003dfe:	4eb6      	ldr	r6, [pc, #728]	; (80040d8 <_dtoa_r+0x648>)
 8003e00:	b957      	cbnz	r7, 8003e18 <_dtoa_r+0x388>
 8003e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e06:	ec53 2b18 	vmov	r2, r3, d8
 8003e0a:	f7fc fd27 	bl	800085c <__aeabi_ddiv>
 8003e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e12:	e029      	b.n	8003e68 <_dtoa_r+0x3d8>
 8003e14:	2502      	movs	r5, #2
 8003e16:	e7f2      	b.n	8003dfe <_dtoa_r+0x36e>
 8003e18:	07f9      	lsls	r1, r7, #31
 8003e1a:	d508      	bpl.n	8003e2e <_dtoa_r+0x39e>
 8003e1c:	ec51 0b18 	vmov	r0, r1, d8
 8003e20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e24:	f7fc fbf0 	bl	8000608 <__aeabi_dmul>
 8003e28:	ec41 0b18 	vmov	d8, r0, r1
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	107f      	asrs	r7, r7, #1
 8003e30:	3608      	adds	r6, #8
 8003e32:	e7e5      	b.n	8003e00 <_dtoa_r+0x370>
 8003e34:	f000 80a6 	beq.w	8003f84 <_dtoa_r+0x4f4>
 8003e38:	f1ca 0600 	rsb	r6, sl, #0
 8003e3c:	4ba5      	ldr	r3, [pc, #660]	; (80040d4 <_dtoa_r+0x644>)
 8003e3e:	4fa6      	ldr	r7, [pc, #664]	; (80040d8 <_dtoa_r+0x648>)
 8003e40:	f006 020f 	and.w	r2, r6, #15
 8003e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e50:	f7fc fbda 	bl	8000608 <__aeabi_dmul>
 8003e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e58:	1136      	asrs	r6, r6, #4
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2502      	movs	r5, #2
 8003e5e:	2e00      	cmp	r6, #0
 8003e60:	f040 8085 	bne.w	8003f6e <_dtoa_r+0x4de>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1d2      	bne.n	8003e0e <_dtoa_r+0x37e>
 8003e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 808c 	beq.w	8003f88 <_dtoa_r+0x4f8>
 8003e70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e74:	4b99      	ldr	r3, [pc, #612]	; (80040dc <_dtoa_r+0x64c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	4630      	mov	r0, r6
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	f7fc fe36 	bl	8000aec <__aeabi_dcmplt>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f000 8081 	beq.w	8003f88 <_dtoa_r+0x4f8>
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d07d      	beq.n	8003f88 <_dtoa_r+0x4f8>
 8003e8c:	f1b9 0f00 	cmp.w	r9, #0
 8003e90:	dd3c      	ble.n	8003f0c <_dtoa_r+0x47c>
 8003e92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003e96:	9307      	str	r3, [sp, #28]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4b91      	ldr	r3, [pc, #580]	; (80040e0 <_dtoa_r+0x650>)
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fc fbb2 	bl	8000608 <__aeabi_dmul>
 8003ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003eae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f7fc fb3e 	bl	8000534 <__aeabi_i2d>
 8003eb8:	4632      	mov	r2, r6
 8003eba:	463b      	mov	r3, r7
 8003ebc:	f7fc fba4 	bl	8000608 <__aeabi_dmul>
 8003ec0:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <_dtoa_r+0x654>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f7fc f9ea 	bl	800029c <__adddf3>
 8003ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ed0:	9303      	str	r3, [sp, #12]
 8003ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d15c      	bne.n	8003f92 <_dtoa_r+0x502>
 8003ed8:	4b83      	ldr	r3, [pc, #524]	; (80040e8 <_dtoa_r+0x658>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	4630      	mov	r0, r6
 8003ede:	4639      	mov	r1, r7
 8003ee0:	f7fc f9da 	bl	8000298 <__aeabi_dsub>
 8003ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ee8:	4606      	mov	r6, r0
 8003eea:	460f      	mov	r7, r1
 8003eec:	f7fc fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	f040 8296 	bne.w	8004422 <_dtoa_r+0x992>
 8003ef6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003efa:	4630      	mov	r0, r6
 8003efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f00:	4639      	mov	r1, r7
 8003f02:	f7fc fdf3 	bl	8000aec <__aeabi_dcmplt>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	f040 8288 	bne.w	800441c <_dtoa_r+0x98c>
 8003f0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f2c0 8158 	blt.w	80041cc <_dtoa_r+0x73c>
 8003f1c:	f1ba 0f0e 	cmp.w	sl, #14
 8003f20:	f300 8154 	bgt.w	80041cc <_dtoa_r+0x73c>
 8003f24:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <_dtoa_r+0x644>)
 8003f26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f280 80e3 	bge.w	80040fc <_dtoa_r+0x66c>
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f300 80df 	bgt.w	80040fc <_dtoa_r+0x66c>
 8003f3e:	f040 826d 	bne.w	800441c <_dtoa_r+0x98c>
 8003f42:	4b69      	ldr	r3, [pc, #420]	; (80040e8 <_dtoa_r+0x658>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc fb5d 	bl	8000608 <__aeabi_dmul>
 8003f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f52:	f7fc fddf 	bl	8000b14 <__aeabi_dcmpge>
 8003f56:	9e01      	ldr	r6, [sp, #4]
 8003f58:	4637      	mov	r7, r6
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	f040 8243 	bne.w	80043e6 <_dtoa_r+0x956>
 8003f60:	9d00      	ldr	r5, [sp, #0]
 8003f62:	2331      	movs	r3, #49	; 0x31
 8003f64:	f805 3b01 	strb.w	r3, [r5], #1
 8003f68:	f10a 0a01 	add.w	sl, sl, #1
 8003f6c:	e23f      	b.n	80043ee <_dtoa_r+0x95e>
 8003f6e:	07f2      	lsls	r2, r6, #31
 8003f70:	d505      	bpl.n	8003f7e <_dtoa_r+0x4ee>
 8003f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f76:	f7fc fb47 	bl	8000608 <__aeabi_dmul>
 8003f7a:	3501      	adds	r5, #1
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	1076      	asrs	r6, r6, #1
 8003f80:	3708      	adds	r7, #8
 8003f82:	e76c      	b.n	8003e5e <_dtoa_r+0x3ce>
 8003f84:	2502      	movs	r5, #2
 8003f86:	e76f      	b.n	8003e68 <_dtoa_r+0x3d8>
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8003f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f90:	e78d      	b.n	8003eae <_dtoa_r+0x41e>
 8003f92:	9900      	ldr	r1, [sp, #0]
 8003f94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f98:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <_dtoa_r+0x644>)
 8003f9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f9e:	4401      	add	r1, r0
 8003fa0:	9102      	str	r1, [sp, #8]
 8003fa2:	9908      	ldr	r1, [sp, #32]
 8003fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8003fa8:	eef0 8a67 	vmov.f32	s17, s15
 8003fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d045      	beq.n	8004044 <_dtoa_r+0x5b4>
 8003fb8:	494c      	ldr	r1, [pc, #304]	; (80040ec <_dtoa_r+0x65c>)
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f7fc fc4e 	bl	800085c <__aeabi_ddiv>
 8003fc0:	ec53 2b18 	vmov	r2, r3, d8
 8003fc4:	f7fc f968 	bl	8000298 <__aeabi_dsub>
 8003fc8:	9d00      	ldr	r5, [sp, #0]
 8003fca:	ec41 0b18 	vmov	d8, r0, r1
 8003fce:	4639      	mov	r1, r7
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f7fc fdc9 	bl	8000b68 <__aeabi_d2iz>
 8003fd6:	900c      	str	r0, [sp, #48]	; 0x30
 8003fd8:	f7fc faac 	bl	8000534 <__aeabi_i2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	f7fc f958 	bl	8000298 <__aeabi_dsub>
 8003fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fea:	3330      	adds	r3, #48	; 0x30
 8003fec:	f805 3b01 	strb.w	r3, [r5], #1
 8003ff0:	ec53 2b18 	vmov	r2, r3, d8
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	460f      	mov	r7, r1
 8003ff8:	f7fc fd78 	bl	8000aec <__aeabi_dcmplt>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d165      	bne.n	80040cc <_dtoa_r+0x63c>
 8004000:	4632      	mov	r2, r6
 8004002:	463b      	mov	r3, r7
 8004004:	4935      	ldr	r1, [pc, #212]	; (80040dc <_dtoa_r+0x64c>)
 8004006:	2000      	movs	r0, #0
 8004008:	f7fc f946 	bl	8000298 <__aeabi_dsub>
 800400c:	ec53 2b18 	vmov	r2, r3, d8
 8004010:	f7fc fd6c 	bl	8000aec <__aeabi_dcmplt>
 8004014:	2800      	cmp	r0, #0
 8004016:	f040 80b9 	bne.w	800418c <_dtoa_r+0x6fc>
 800401a:	9b02      	ldr	r3, [sp, #8]
 800401c:	429d      	cmp	r5, r3
 800401e:	f43f af75 	beq.w	8003f0c <_dtoa_r+0x47c>
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <_dtoa_r+0x650>)
 8004024:	ec51 0b18 	vmov	r0, r1, d8
 8004028:	2200      	movs	r2, #0
 800402a:	f7fc faed 	bl	8000608 <__aeabi_dmul>
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <_dtoa_r+0x650>)
 8004030:	ec41 0b18 	vmov	d8, r0, r1
 8004034:	2200      	movs	r2, #0
 8004036:	4630      	mov	r0, r6
 8004038:	4639      	mov	r1, r7
 800403a:	f7fc fae5 	bl	8000608 <__aeabi_dmul>
 800403e:	4606      	mov	r6, r0
 8004040:	460f      	mov	r7, r1
 8004042:	e7c4      	b.n	8003fce <_dtoa_r+0x53e>
 8004044:	ec51 0b17 	vmov	r0, r1, d7
 8004048:	f7fc fade 	bl	8000608 <__aeabi_dmul>
 800404c:	9b02      	ldr	r3, [sp, #8]
 800404e:	9d00      	ldr	r5, [sp, #0]
 8004050:	930c      	str	r3, [sp, #48]	; 0x30
 8004052:	ec41 0b18 	vmov	d8, r0, r1
 8004056:	4639      	mov	r1, r7
 8004058:	4630      	mov	r0, r6
 800405a:	f7fc fd85 	bl	8000b68 <__aeabi_d2iz>
 800405e:	9011      	str	r0, [sp, #68]	; 0x44
 8004060:	f7fc fa68 	bl	8000534 <__aeabi_i2d>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4630      	mov	r0, r6
 800406a:	4639      	mov	r1, r7
 800406c:	f7fc f914 	bl	8000298 <__aeabi_dsub>
 8004070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004072:	3330      	adds	r3, #48	; 0x30
 8004074:	f805 3b01 	strb.w	r3, [r5], #1
 8004078:	9b02      	ldr	r3, [sp, #8]
 800407a:	429d      	cmp	r5, r3
 800407c:	4606      	mov	r6, r0
 800407e:	460f      	mov	r7, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	d134      	bne.n	80040f0 <_dtoa_r+0x660>
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <_dtoa_r+0x65c>)
 8004088:	ec51 0b18 	vmov	r0, r1, d8
 800408c:	f7fc f906 	bl	800029c <__adddf3>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4630      	mov	r0, r6
 8004096:	4639      	mov	r1, r7
 8004098:	f7fc fd46 	bl	8000b28 <__aeabi_dcmpgt>
 800409c:	2800      	cmp	r0, #0
 800409e:	d175      	bne.n	800418c <_dtoa_r+0x6fc>
 80040a0:	ec53 2b18 	vmov	r2, r3, d8
 80040a4:	4911      	ldr	r1, [pc, #68]	; (80040ec <_dtoa_r+0x65c>)
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7fc f8f6 	bl	8000298 <__aeabi_dsub>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4630      	mov	r0, r6
 80040b2:	4639      	mov	r1, r7
 80040b4:	f7fc fd1a 	bl	8000aec <__aeabi_dcmplt>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f43f af27 	beq.w	8003f0c <_dtoa_r+0x47c>
 80040be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040c0:	1e6b      	subs	r3, r5, #1
 80040c2:	930c      	str	r3, [sp, #48]	; 0x30
 80040c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d0f8      	beq.n	80040be <_dtoa_r+0x62e>
 80040cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80040d0:	e04a      	b.n	8004168 <_dtoa_r+0x6d8>
 80040d2:	bf00      	nop
 80040d4:	08005bb8 	.word	0x08005bb8
 80040d8:	08005b90 	.word	0x08005b90
 80040dc:	3ff00000 	.word	0x3ff00000
 80040e0:	40240000 	.word	0x40240000
 80040e4:	401c0000 	.word	0x401c0000
 80040e8:	40140000 	.word	0x40140000
 80040ec:	3fe00000 	.word	0x3fe00000
 80040f0:	4baf      	ldr	r3, [pc, #700]	; (80043b0 <_dtoa_r+0x920>)
 80040f2:	f7fc fa89 	bl	8000608 <__aeabi_dmul>
 80040f6:	4606      	mov	r6, r0
 80040f8:	460f      	mov	r7, r1
 80040fa:	e7ac      	b.n	8004056 <_dtoa_r+0x5c6>
 80040fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004100:	9d00      	ldr	r5, [sp, #0]
 8004102:	4642      	mov	r2, r8
 8004104:	464b      	mov	r3, r9
 8004106:	4630      	mov	r0, r6
 8004108:	4639      	mov	r1, r7
 800410a:	f7fc fba7 	bl	800085c <__aeabi_ddiv>
 800410e:	f7fc fd2b 	bl	8000b68 <__aeabi_d2iz>
 8004112:	9002      	str	r0, [sp, #8]
 8004114:	f7fc fa0e 	bl	8000534 <__aeabi_i2d>
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	f7fc fa74 	bl	8000608 <__aeabi_dmul>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4630      	mov	r0, r6
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc f8b6 	bl	8000298 <__aeabi_dsub>
 800412c:	9e02      	ldr	r6, [sp, #8]
 800412e:	9f01      	ldr	r7, [sp, #4]
 8004130:	3630      	adds	r6, #48	; 0x30
 8004132:	f805 6b01 	strb.w	r6, [r5], #1
 8004136:	9e00      	ldr	r6, [sp, #0]
 8004138:	1bae      	subs	r6, r5, r6
 800413a:	42b7      	cmp	r7, r6
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	d137      	bne.n	80041b2 <_dtoa_r+0x722>
 8004142:	f7fc f8ab 	bl	800029c <__adddf3>
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	4606      	mov	r6, r0
 800414c:	460f      	mov	r7, r1
 800414e:	f7fc fceb 	bl	8000b28 <__aeabi_dcmpgt>
 8004152:	b9c8      	cbnz	r0, 8004188 <_dtoa_r+0x6f8>
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	4630      	mov	r0, r6
 800415a:	4639      	mov	r1, r7
 800415c:	f7fc fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004160:	b110      	cbz	r0, 8004168 <_dtoa_r+0x6d8>
 8004162:	9b02      	ldr	r3, [sp, #8]
 8004164:	07d9      	lsls	r1, r3, #31
 8004166:	d40f      	bmi.n	8004188 <_dtoa_r+0x6f8>
 8004168:	4620      	mov	r0, r4
 800416a:	4659      	mov	r1, fp
 800416c:	f000 fad6 	bl	800471c <_Bfree>
 8004170:	2300      	movs	r3, #0
 8004172:	702b      	strb	r3, [r5, #0]
 8004174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004176:	f10a 0001 	add.w	r0, sl, #1
 800417a:	6018      	str	r0, [r3, #0]
 800417c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800417e:	2b00      	cmp	r3, #0
 8004180:	f43f acd8 	beq.w	8003b34 <_dtoa_r+0xa4>
 8004184:	601d      	str	r5, [r3, #0]
 8004186:	e4d5      	b.n	8003b34 <_dtoa_r+0xa4>
 8004188:	f8cd a01c 	str.w	sl, [sp, #28]
 800418c:	462b      	mov	r3, r5
 800418e:	461d      	mov	r5, r3
 8004190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004194:	2a39      	cmp	r2, #57	; 0x39
 8004196:	d108      	bne.n	80041aa <_dtoa_r+0x71a>
 8004198:	9a00      	ldr	r2, [sp, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d1f7      	bne.n	800418e <_dtoa_r+0x6fe>
 800419e:	9a07      	ldr	r2, [sp, #28]
 80041a0:	9900      	ldr	r1, [sp, #0]
 80041a2:	3201      	adds	r2, #1
 80041a4:	9207      	str	r2, [sp, #28]
 80041a6:	2230      	movs	r2, #48	; 0x30
 80041a8:	700a      	strb	r2, [r1, #0]
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	3201      	adds	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e78c      	b.n	80040cc <_dtoa_r+0x63c>
 80041b2:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <_dtoa_r+0x920>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	f7fc fa27 	bl	8000608 <__aeabi_dmul>
 80041ba:	2200      	movs	r2, #0
 80041bc:	2300      	movs	r3, #0
 80041be:	4606      	mov	r6, r0
 80041c0:	460f      	mov	r7, r1
 80041c2:	f7fc fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d09b      	beq.n	8004102 <_dtoa_r+0x672>
 80041ca:	e7cd      	b.n	8004168 <_dtoa_r+0x6d8>
 80041cc:	9a08      	ldr	r2, [sp, #32]
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	f000 80c4 	beq.w	800435c <_dtoa_r+0x8cc>
 80041d4:	9a05      	ldr	r2, [sp, #20]
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	f300 80a8 	bgt.w	800432c <_dtoa_r+0x89c>
 80041dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041de:	2a00      	cmp	r2, #0
 80041e0:	f000 80a0 	beq.w	8004324 <_dtoa_r+0x894>
 80041e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041e8:	9e06      	ldr	r6, [sp, #24]
 80041ea:	4645      	mov	r5, r8
 80041ec:	9a04      	ldr	r2, [sp, #16]
 80041ee:	2101      	movs	r1, #1
 80041f0:	441a      	add	r2, r3
 80041f2:	4620      	mov	r0, r4
 80041f4:	4498      	add	r8, r3
 80041f6:	9204      	str	r2, [sp, #16]
 80041f8:	f000 fb4c 	bl	8004894 <__i2b>
 80041fc:	4607      	mov	r7, r0
 80041fe:	2d00      	cmp	r5, #0
 8004200:	dd0b      	ble.n	800421a <_dtoa_r+0x78a>
 8004202:	9b04      	ldr	r3, [sp, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	dd08      	ble.n	800421a <_dtoa_r+0x78a>
 8004208:	42ab      	cmp	r3, r5
 800420a:	9a04      	ldr	r2, [sp, #16]
 800420c:	bfa8      	it	ge
 800420e:	462b      	movge	r3, r5
 8004210:	eba8 0803 	sub.w	r8, r8, r3
 8004214:	1aed      	subs	r5, r5, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	9b06      	ldr	r3, [sp, #24]
 800421c:	b1fb      	cbz	r3, 800425e <_dtoa_r+0x7ce>
 800421e:	9b08      	ldr	r3, [sp, #32]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 809f 	beq.w	8004364 <_dtoa_r+0x8d4>
 8004226:	2e00      	cmp	r6, #0
 8004228:	dd11      	ble.n	800424e <_dtoa_r+0x7be>
 800422a:	4639      	mov	r1, r7
 800422c:	4632      	mov	r2, r6
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fbec 	bl	8004a0c <__pow5mult>
 8004234:	465a      	mov	r2, fp
 8004236:	4601      	mov	r1, r0
 8004238:	4607      	mov	r7, r0
 800423a:	4620      	mov	r0, r4
 800423c:	f000 fb40 	bl	80048c0 <__multiply>
 8004240:	4659      	mov	r1, fp
 8004242:	9007      	str	r0, [sp, #28]
 8004244:	4620      	mov	r0, r4
 8004246:	f000 fa69 	bl	800471c <_Bfree>
 800424a:	9b07      	ldr	r3, [sp, #28]
 800424c:	469b      	mov	fp, r3
 800424e:	9b06      	ldr	r3, [sp, #24]
 8004250:	1b9a      	subs	r2, r3, r6
 8004252:	d004      	beq.n	800425e <_dtoa_r+0x7ce>
 8004254:	4659      	mov	r1, fp
 8004256:	4620      	mov	r0, r4
 8004258:	f000 fbd8 	bl	8004a0c <__pow5mult>
 800425c:	4683      	mov	fp, r0
 800425e:	2101      	movs	r1, #1
 8004260:	4620      	mov	r0, r4
 8004262:	f000 fb17 	bl	8004894 <__i2b>
 8004266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	4606      	mov	r6, r0
 800426c:	dd7c      	ble.n	8004368 <_dtoa_r+0x8d8>
 800426e:	461a      	mov	r2, r3
 8004270:	4601      	mov	r1, r0
 8004272:	4620      	mov	r0, r4
 8004274:	f000 fbca 	bl	8004a0c <__pow5mult>
 8004278:	9b05      	ldr	r3, [sp, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	4606      	mov	r6, r0
 800427e:	dd76      	ble.n	800436e <_dtoa_r+0x8de>
 8004280:	2300      	movs	r3, #0
 8004282:	9306      	str	r3, [sp, #24]
 8004284:	6933      	ldr	r3, [r6, #16]
 8004286:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800428a:	6918      	ldr	r0, [r3, #16]
 800428c:	f000 fab2 	bl	80047f4 <__hi0bits>
 8004290:	f1c0 0020 	rsb	r0, r0, #32
 8004294:	9b04      	ldr	r3, [sp, #16]
 8004296:	4418      	add	r0, r3
 8004298:	f010 001f 	ands.w	r0, r0, #31
 800429c:	f000 8086 	beq.w	80043ac <_dtoa_r+0x91c>
 80042a0:	f1c0 0320 	rsb	r3, r0, #32
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	dd7f      	ble.n	80043a8 <_dtoa_r+0x918>
 80042a8:	f1c0 001c 	rsb	r0, r0, #28
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	4403      	add	r3, r0
 80042b0:	4480      	add	r8, r0
 80042b2:	4405      	add	r5, r0
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	f1b8 0f00 	cmp.w	r8, #0
 80042ba:	dd05      	ble.n	80042c8 <_dtoa_r+0x838>
 80042bc:	4659      	mov	r1, fp
 80042be:	4642      	mov	r2, r8
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fbfd 	bl	8004ac0 <__lshift>
 80042c6:	4683      	mov	fp, r0
 80042c8:	9b04      	ldr	r3, [sp, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	dd05      	ble.n	80042da <_dtoa_r+0x84a>
 80042ce:	4631      	mov	r1, r6
 80042d0:	461a      	mov	r2, r3
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fbf4 	bl	8004ac0 <__lshift>
 80042d8:	4606      	mov	r6, r0
 80042da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d069      	beq.n	80043b4 <_dtoa_r+0x924>
 80042e0:	4631      	mov	r1, r6
 80042e2:	4658      	mov	r0, fp
 80042e4:	f000 fc58 	bl	8004b98 <__mcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	da63      	bge.n	80043b4 <_dtoa_r+0x924>
 80042ec:	2300      	movs	r3, #0
 80042ee:	4659      	mov	r1, fp
 80042f0:	220a      	movs	r2, #10
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 fa34 	bl	8004760 <__multadd>
 80042f8:	9b08      	ldr	r3, [sp, #32]
 80042fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042fe:	4683      	mov	fp, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 818f 	beq.w	8004624 <_dtoa_r+0xb94>
 8004306:	4639      	mov	r1, r7
 8004308:	2300      	movs	r3, #0
 800430a:	220a      	movs	r2, #10
 800430c:	4620      	mov	r0, r4
 800430e:	f000 fa27 	bl	8004760 <__multadd>
 8004312:	f1b9 0f00 	cmp.w	r9, #0
 8004316:	4607      	mov	r7, r0
 8004318:	f300 808e 	bgt.w	8004438 <_dtoa_r+0x9a8>
 800431c:	9b05      	ldr	r3, [sp, #20]
 800431e:	2b02      	cmp	r3, #2
 8004320:	dc50      	bgt.n	80043c4 <_dtoa_r+0x934>
 8004322:	e089      	b.n	8004438 <_dtoa_r+0x9a8>
 8004324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800432a:	e75d      	b.n	80041e8 <_dtoa_r+0x758>
 800432c:	9b01      	ldr	r3, [sp, #4]
 800432e:	1e5e      	subs	r6, r3, #1
 8004330:	9b06      	ldr	r3, [sp, #24]
 8004332:	42b3      	cmp	r3, r6
 8004334:	bfbf      	itttt	lt
 8004336:	9b06      	ldrlt	r3, [sp, #24]
 8004338:	9606      	strlt	r6, [sp, #24]
 800433a:	1af2      	sublt	r2, r6, r3
 800433c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800433e:	bfb6      	itet	lt
 8004340:	189b      	addlt	r3, r3, r2
 8004342:	1b9e      	subge	r6, r3, r6
 8004344:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004346:	9b01      	ldr	r3, [sp, #4]
 8004348:	bfb8      	it	lt
 800434a:	2600      	movlt	r6, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	bfb5      	itete	lt
 8004350:	eba8 0503 	sublt.w	r5, r8, r3
 8004354:	9b01      	ldrge	r3, [sp, #4]
 8004356:	2300      	movlt	r3, #0
 8004358:	4645      	movge	r5, r8
 800435a:	e747      	b.n	80041ec <_dtoa_r+0x75c>
 800435c:	9e06      	ldr	r6, [sp, #24]
 800435e:	9f08      	ldr	r7, [sp, #32]
 8004360:	4645      	mov	r5, r8
 8004362:	e74c      	b.n	80041fe <_dtoa_r+0x76e>
 8004364:	9a06      	ldr	r2, [sp, #24]
 8004366:	e775      	b.n	8004254 <_dtoa_r+0x7c4>
 8004368:	9b05      	ldr	r3, [sp, #20]
 800436a:	2b01      	cmp	r3, #1
 800436c:	dc18      	bgt.n	80043a0 <_dtoa_r+0x910>
 800436e:	9b02      	ldr	r3, [sp, #8]
 8004370:	b9b3      	cbnz	r3, 80043a0 <_dtoa_r+0x910>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	b9a3      	cbnz	r3, 80043a4 <_dtoa_r+0x914>
 800437a:	9b03      	ldr	r3, [sp, #12]
 800437c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004380:	0d1b      	lsrs	r3, r3, #20
 8004382:	051b      	lsls	r3, r3, #20
 8004384:	b12b      	cbz	r3, 8004392 <_dtoa_r+0x902>
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	3301      	adds	r3, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	f108 0801 	add.w	r8, r8, #1
 8004390:	2301      	movs	r3, #1
 8004392:	9306      	str	r3, [sp, #24]
 8004394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f af74 	bne.w	8004284 <_dtoa_r+0x7f4>
 800439c:	2001      	movs	r0, #1
 800439e:	e779      	b.n	8004294 <_dtoa_r+0x804>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e7f6      	b.n	8004392 <_dtoa_r+0x902>
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	e7f4      	b.n	8004392 <_dtoa_r+0x902>
 80043a8:	d085      	beq.n	80042b6 <_dtoa_r+0x826>
 80043aa:	4618      	mov	r0, r3
 80043ac:	301c      	adds	r0, #28
 80043ae:	e77d      	b.n	80042ac <_dtoa_r+0x81c>
 80043b0:	40240000 	.word	0x40240000
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dc38      	bgt.n	800442c <_dtoa_r+0x99c>
 80043ba:	9b05      	ldr	r3, [sp, #20]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	dd35      	ble.n	800442c <_dtoa_r+0x99c>
 80043c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80043c4:	f1b9 0f00 	cmp.w	r9, #0
 80043c8:	d10d      	bne.n	80043e6 <_dtoa_r+0x956>
 80043ca:	4631      	mov	r1, r6
 80043cc:	464b      	mov	r3, r9
 80043ce:	2205      	movs	r2, #5
 80043d0:	4620      	mov	r0, r4
 80043d2:	f000 f9c5 	bl	8004760 <__multadd>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4606      	mov	r6, r0
 80043da:	4658      	mov	r0, fp
 80043dc:	f000 fbdc 	bl	8004b98 <__mcmp>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	f73f adbd 	bgt.w	8003f60 <_dtoa_r+0x4d0>
 80043e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e8:	9d00      	ldr	r5, [sp, #0]
 80043ea:	ea6f 0a03 	mvn.w	sl, r3
 80043ee:	f04f 0800 	mov.w	r8, #0
 80043f2:	4631      	mov	r1, r6
 80043f4:	4620      	mov	r0, r4
 80043f6:	f000 f991 	bl	800471c <_Bfree>
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	f43f aeb4 	beq.w	8004168 <_dtoa_r+0x6d8>
 8004400:	f1b8 0f00 	cmp.w	r8, #0
 8004404:	d005      	beq.n	8004412 <_dtoa_r+0x982>
 8004406:	45b8      	cmp	r8, r7
 8004408:	d003      	beq.n	8004412 <_dtoa_r+0x982>
 800440a:	4641      	mov	r1, r8
 800440c:	4620      	mov	r0, r4
 800440e:	f000 f985 	bl	800471c <_Bfree>
 8004412:	4639      	mov	r1, r7
 8004414:	4620      	mov	r0, r4
 8004416:	f000 f981 	bl	800471c <_Bfree>
 800441a:	e6a5      	b.n	8004168 <_dtoa_r+0x6d8>
 800441c:	2600      	movs	r6, #0
 800441e:	4637      	mov	r7, r6
 8004420:	e7e1      	b.n	80043e6 <_dtoa_r+0x956>
 8004422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004424:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004428:	4637      	mov	r7, r6
 800442a:	e599      	b.n	8003f60 <_dtoa_r+0x4d0>
 800442c:	9b08      	ldr	r3, [sp, #32]
 800442e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80fd 	beq.w	8004632 <_dtoa_r+0xba2>
 8004438:	2d00      	cmp	r5, #0
 800443a:	dd05      	ble.n	8004448 <_dtoa_r+0x9b8>
 800443c:	4639      	mov	r1, r7
 800443e:	462a      	mov	r2, r5
 8004440:	4620      	mov	r0, r4
 8004442:	f000 fb3d 	bl	8004ac0 <__lshift>
 8004446:	4607      	mov	r7, r0
 8004448:	9b06      	ldr	r3, [sp, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d05c      	beq.n	8004508 <_dtoa_r+0xa78>
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f923 	bl	800469c <_Balloc>
 8004456:	4605      	mov	r5, r0
 8004458:	b928      	cbnz	r0, 8004466 <_dtoa_r+0x9d6>
 800445a:	4b80      	ldr	r3, [pc, #512]	; (800465c <_dtoa_r+0xbcc>)
 800445c:	4602      	mov	r2, r0
 800445e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004462:	f7ff bb2e 	b.w	8003ac2 <_dtoa_r+0x32>
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	3202      	adds	r2, #2
 800446a:	0092      	lsls	r2, r2, #2
 800446c:	f107 010c 	add.w	r1, r7, #12
 8004470:	300c      	adds	r0, #12
 8004472:	f000 f905 	bl	8004680 <memcpy>
 8004476:	2201      	movs	r2, #1
 8004478:	4629      	mov	r1, r5
 800447a:	4620      	mov	r0, r4
 800447c:	f000 fb20 	bl	8004ac0 <__lshift>
 8004480:	9b00      	ldr	r3, [sp, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	9b00      	ldr	r3, [sp, #0]
 8004488:	444b      	add	r3, r9
 800448a:	9307      	str	r3, [sp, #28]
 800448c:	9b02      	ldr	r3, [sp, #8]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	46b8      	mov	r8, r7
 8004494:	9306      	str	r3, [sp, #24]
 8004496:	4607      	mov	r7, r0
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	4631      	mov	r1, r6
 800449c:	3b01      	subs	r3, #1
 800449e:	4658      	mov	r0, fp
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	f7ff fa69 	bl	8003978 <quorem>
 80044a6:	4603      	mov	r3, r0
 80044a8:	3330      	adds	r3, #48	; 0x30
 80044aa:	9004      	str	r0, [sp, #16]
 80044ac:	4641      	mov	r1, r8
 80044ae:	4658      	mov	r0, fp
 80044b0:	9308      	str	r3, [sp, #32]
 80044b2:	f000 fb71 	bl	8004b98 <__mcmp>
 80044b6:	463a      	mov	r2, r7
 80044b8:	4681      	mov	r9, r0
 80044ba:	4631      	mov	r1, r6
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 fb87 	bl	8004bd0 <__mdiff>
 80044c2:	68c2      	ldr	r2, [r0, #12]
 80044c4:	9b08      	ldr	r3, [sp, #32]
 80044c6:	4605      	mov	r5, r0
 80044c8:	bb02      	cbnz	r2, 800450c <_dtoa_r+0xa7c>
 80044ca:	4601      	mov	r1, r0
 80044cc:	4658      	mov	r0, fp
 80044ce:	f000 fb63 	bl	8004b98 <__mcmp>
 80044d2:	9b08      	ldr	r3, [sp, #32]
 80044d4:	4602      	mov	r2, r0
 80044d6:	4629      	mov	r1, r5
 80044d8:	4620      	mov	r0, r4
 80044da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80044de:	f000 f91d 	bl	800471c <_Bfree>
 80044e2:	9b05      	ldr	r3, [sp, #20]
 80044e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044e6:	9d01      	ldr	r5, [sp, #4]
 80044e8:	ea43 0102 	orr.w	r1, r3, r2
 80044ec:	9b06      	ldr	r3, [sp, #24]
 80044ee:	430b      	orrs	r3, r1
 80044f0:	9b08      	ldr	r3, [sp, #32]
 80044f2:	d10d      	bne.n	8004510 <_dtoa_r+0xa80>
 80044f4:	2b39      	cmp	r3, #57	; 0x39
 80044f6:	d029      	beq.n	800454c <_dtoa_r+0xabc>
 80044f8:	f1b9 0f00 	cmp.w	r9, #0
 80044fc:	dd01      	ble.n	8004502 <_dtoa_r+0xa72>
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	3331      	adds	r3, #49	; 0x31
 8004502:	9a02      	ldr	r2, [sp, #8]
 8004504:	7013      	strb	r3, [r2, #0]
 8004506:	e774      	b.n	80043f2 <_dtoa_r+0x962>
 8004508:	4638      	mov	r0, r7
 800450a:	e7b9      	b.n	8004480 <_dtoa_r+0x9f0>
 800450c:	2201      	movs	r2, #1
 800450e:	e7e2      	b.n	80044d6 <_dtoa_r+0xa46>
 8004510:	f1b9 0f00 	cmp.w	r9, #0
 8004514:	db06      	blt.n	8004524 <_dtoa_r+0xa94>
 8004516:	9905      	ldr	r1, [sp, #20]
 8004518:	ea41 0909 	orr.w	r9, r1, r9
 800451c:	9906      	ldr	r1, [sp, #24]
 800451e:	ea59 0101 	orrs.w	r1, r9, r1
 8004522:	d120      	bne.n	8004566 <_dtoa_r+0xad6>
 8004524:	2a00      	cmp	r2, #0
 8004526:	ddec      	ble.n	8004502 <_dtoa_r+0xa72>
 8004528:	4659      	mov	r1, fp
 800452a:	2201      	movs	r2, #1
 800452c:	4620      	mov	r0, r4
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	f000 fac6 	bl	8004ac0 <__lshift>
 8004534:	4631      	mov	r1, r6
 8004536:	4683      	mov	fp, r0
 8004538:	f000 fb2e 	bl	8004b98 <__mcmp>
 800453c:	2800      	cmp	r0, #0
 800453e:	9b01      	ldr	r3, [sp, #4]
 8004540:	dc02      	bgt.n	8004548 <_dtoa_r+0xab8>
 8004542:	d1de      	bne.n	8004502 <_dtoa_r+0xa72>
 8004544:	07da      	lsls	r2, r3, #31
 8004546:	d5dc      	bpl.n	8004502 <_dtoa_r+0xa72>
 8004548:	2b39      	cmp	r3, #57	; 0x39
 800454a:	d1d8      	bne.n	80044fe <_dtoa_r+0xa6e>
 800454c:	9a02      	ldr	r2, [sp, #8]
 800454e:	2339      	movs	r3, #57	; 0x39
 8004550:	7013      	strb	r3, [r2, #0]
 8004552:	462b      	mov	r3, r5
 8004554:	461d      	mov	r5, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800455c:	2a39      	cmp	r2, #57	; 0x39
 800455e:	d050      	beq.n	8004602 <_dtoa_r+0xb72>
 8004560:	3201      	adds	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e745      	b.n	80043f2 <_dtoa_r+0x962>
 8004566:	2a00      	cmp	r2, #0
 8004568:	dd03      	ble.n	8004572 <_dtoa_r+0xae2>
 800456a:	2b39      	cmp	r3, #57	; 0x39
 800456c:	d0ee      	beq.n	800454c <_dtoa_r+0xabc>
 800456e:	3301      	adds	r3, #1
 8004570:	e7c7      	b.n	8004502 <_dtoa_r+0xa72>
 8004572:	9a01      	ldr	r2, [sp, #4]
 8004574:	9907      	ldr	r1, [sp, #28]
 8004576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800457a:	428a      	cmp	r2, r1
 800457c:	d02a      	beq.n	80045d4 <_dtoa_r+0xb44>
 800457e:	4659      	mov	r1, fp
 8004580:	2300      	movs	r3, #0
 8004582:	220a      	movs	r2, #10
 8004584:	4620      	mov	r0, r4
 8004586:	f000 f8eb 	bl	8004760 <__multadd>
 800458a:	45b8      	cmp	r8, r7
 800458c:	4683      	mov	fp, r0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	f04f 020a 	mov.w	r2, #10
 8004596:	4641      	mov	r1, r8
 8004598:	4620      	mov	r0, r4
 800459a:	d107      	bne.n	80045ac <_dtoa_r+0xb1c>
 800459c:	f000 f8e0 	bl	8004760 <__multadd>
 80045a0:	4680      	mov	r8, r0
 80045a2:	4607      	mov	r7, r0
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	3301      	adds	r3, #1
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	e775      	b.n	8004498 <_dtoa_r+0xa08>
 80045ac:	f000 f8d8 	bl	8004760 <__multadd>
 80045b0:	4639      	mov	r1, r7
 80045b2:	4680      	mov	r8, r0
 80045b4:	2300      	movs	r3, #0
 80045b6:	220a      	movs	r2, #10
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f8d1 	bl	8004760 <__multadd>
 80045be:	4607      	mov	r7, r0
 80045c0:	e7f0      	b.n	80045a4 <_dtoa_r+0xb14>
 80045c2:	f1b9 0f00 	cmp.w	r9, #0
 80045c6:	9a00      	ldr	r2, [sp, #0]
 80045c8:	bfcc      	ite	gt
 80045ca:	464d      	movgt	r5, r9
 80045cc:	2501      	movle	r5, #1
 80045ce:	4415      	add	r5, r2
 80045d0:	f04f 0800 	mov.w	r8, #0
 80045d4:	4659      	mov	r1, fp
 80045d6:	2201      	movs	r2, #1
 80045d8:	4620      	mov	r0, r4
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	f000 fa70 	bl	8004ac0 <__lshift>
 80045e0:	4631      	mov	r1, r6
 80045e2:	4683      	mov	fp, r0
 80045e4:	f000 fad8 	bl	8004b98 <__mcmp>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	dcb2      	bgt.n	8004552 <_dtoa_r+0xac2>
 80045ec:	d102      	bne.n	80045f4 <_dtoa_r+0xb64>
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	07db      	lsls	r3, r3, #31
 80045f2:	d4ae      	bmi.n	8004552 <_dtoa_r+0xac2>
 80045f4:	462b      	mov	r3, r5
 80045f6:	461d      	mov	r5, r3
 80045f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045fc:	2a30      	cmp	r2, #48	; 0x30
 80045fe:	d0fa      	beq.n	80045f6 <_dtoa_r+0xb66>
 8004600:	e6f7      	b.n	80043f2 <_dtoa_r+0x962>
 8004602:	9a00      	ldr	r2, [sp, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d1a5      	bne.n	8004554 <_dtoa_r+0xac4>
 8004608:	f10a 0a01 	add.w	sl, sl, #1
 800460c:	2331      	movs	r3, #49	; 0x31
 800460e:	e779      	b.n	8004504 <_dtoa_r+0xa74>
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <_dtoa_r+0xbd0>)
 8004612:	f7ff baaf 	b.w	8003b74 <_dtoa_r+0xe4>
 8004616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004618:	2b00      	cmp	r3, #0
 800461a:	f47f aa86 	bne.w	8003b2a <_dtoa_r+0x9a>
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <_dtoa_r+0xbd4>)
 8004620:	f7ff baa8 	b.w	8003b74 <_dtoa_r+0xe4>
 8004624:	f1b9 0f00 	cmp.w	r9, #0
 8004628:	dc03      	bgt.n	8004632 <_dtoa_r+0xba2>
 800462a:	9b05      	ldr	r3, [sp, #20]
 800462c:	2b02      	cmp	r3, #2
 800462e:	f73f aec9 	bgt.w	80043c4 <_dtoa_r+0x934>
 8004632:	9d00      	ldr	r5, [sp, #0]
 8004634:	4631      	mov	r1, r6
 8004636:	4658      	mov	r0, fp
 8004638:	f7ff f99e 	bl	8003978 <quorem>
 800463c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004640:	f805 3b01 	strb.w	r3, [r5], #1
 8004644:	9a00      	ldr	r2, [sp, #0]
 8004646:	1aaa      	subs	r2, r5, r2
 8004648:	4591      	cmp	r9, r2
 800464a:	ddba      	ble.n	80045c2 <_dtoa_r+0xb32>
 800464c:	4659      	mov	r1, fp
 800464e:	2300      	movs	r3, #0
 8004650:	220a      	movs	r2, #10
 8004652:	4620      	mov	r0, r4
 8004654:	f000 f884 	bl	8004760 <__multadd>
 8004658:	4683      	mov	fp, r0
 800465a:	e7eb      	b.n	8004634 <_dtoa_r+0xba4>
 800465c:	08005b1b 	.word	0x08005b1b
 8004660:	08005a74 	.word	0x08005a74
 8004664:	08005a98 	.word	0x08005a98

08004668 <_localeconv_r>:
 8004668:	4800      	ldr	r0, [pc, #0]	; (800466c <_localeconv_r+0x4>)
 800466a:	4770      	bx	lr
 800466c:	2000017c 	.word	0x2000017c

08004670 <malloc>:
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <malloc+0xc>)
 8004672:	4601      	mov	r1, r0
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f000 bbef 	b.w	8004e58 <_malloc_r>
 800467a:	bf00      	nop
 800467c:	20000028 	.word	0x20000028

08004680 <memcpy>:
 8004680:	440a      	add	r2, r1
 8004682:	4291      	cmp	r1, r2
 8004684:	f100 33ff 	add.w	r3, r0, #4294967295
 8004688:	d100      	bne.n	800468c <memcpy+0xc>
 800468a:	4770      	bx	lr
 800468c:	b510      	push	{r4, lr}
 800468e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004696:	4291      	cmp	r1, r2
 8004698:	d1f9      	bne.n	800468e <memcpy+0xe>
 800469a:	bd10      	pop	{r4, pc}

0800469c <_Balloc>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046a0:	4604      	mov	r4, r0
 80046a2:	460d      	mov	r5, r1
 80046a4:	b976      	cbnz	r6, 80046c4 <_Balloc+0x28>
 80046a6:	2010      	movs	r0, #16
 80046a8:	f7ff ffe2 	bl	8004670 <malloc>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6260      	str	r0, [r4, #36]	; 0x24
 80046b0:	b920      	cbnz	r0, 80046bc <_Balloc+0x20>
 80046b2:	4b18      	ldr	r3, [pc, #96]	; (8004714 <_Balloc+0x78>)
 80046b4:	4818      	ldr	r0, [pc, #96]	; (8004718 <_Balloc+0x7c>)
 80046b6:	2166      	movs	r1, #102	; 0x66
 80046b8:	f000 fc38 	bl	8004f2c <__assert_func>
 80046bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046c0:	6006      	str	r6, [r0, #0]
 80046c2:	60c6      	str	r6, [r0, #12]
 80046c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046c6:	68f3      	ldr	r3, [r6, #12]
 80046c8:	b183      	cbz	r3, 80046ec <_Balloc+0x50>
 80046ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046d2:	b9b8      	cbnz	r0, 8004704 <_Balloc+0x68>
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f605 	lsl.w	r6, r1, r5
 80046da:	1d72      	adds	r2, r6, #5
 80046dc:	0092      	lsls	r2, r2, #2
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 fb5a 	bl	8004d98 <_calloc_r>
 80046e4:	b160      	cbz	r0, 8004700 <_Balloc+0x64>
 80046e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046ea:	e00e      	b.n	800470a <_Balloc+0x6e>
 80046ec:	2221      	movs	r2, #33	; 0x21
 80046ee:	2104      	movs	r1, #4
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fb51 	bl	8004d98 <_calloc_r>
 80046f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f8:	60f0      	str	r0, [r6, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e4      	bne.n	80046ca <_Balloc+0x2e>
 8004700:	2000      	movs	r0, #0
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	6802      	ldr	r2, [r0, #0]
 8004706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800470a:	2300      	movs	r3, #0
 800470c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004710:	e7f7      	b.n	8004702 <_Balloc+0x66>
 8004712:	bf00      	nop
 8004714:	08005aa5 	.word	0x08005aa5
 8004718:	08005b2c 	.word	0x08005b2c

0800471c <_Bfree>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004720:	4605      	mov	r5, r0
 8004722:	460c      	mov	r4, r1
 8004724:	b976      	cbnz	r6, 8004744 <_Bfree+0x28>
 8004726:	2010      	movs	r0, #16
 8004728:	f7ff ffa2 	bl	8004670 <malloc>
 800472c:	4602      	mov	r2, r0
 800472e:	6268      	str	r0, [r5, #36]	; 0x24
 8004730:	b920      	cbnz	r0, 800473c <_Bfree+0x20>
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <_Bfree+0x3c>)
 8004734:	4809      	ldr	r0, [pc, #36]	; (800475c <_Bfree+0x40>)
 8004736:	218a      	movs	r1, #138	; 0x8a
 8004738:	f000 fbf8 	bl	8004f2c <__assert_func>
 800473c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004740:	6006      	str	r6, [r0, #0]
 8004742:	60c6      	str	r6, [r0, #12]
 8004744:	b13c      	cbz	r4, 8004756 <_Bfree+0x3a>
 8004746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004748:	6862      	ldr	r2, [r4, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004750:	6021      	str	r1, [r4, #0]
 8004752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	08005aa5 	.word	0x08005aa5
 800475c:	08005b2c 	.word	0x08005b2c

08004760 <__multadd>:
 8004760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004764:	690e      	ldr	r6, [r1, #16]
 8004766:	4607      	mov	r7, r0
 8004768:	4698      	mov	r8, r3
 800476a:	460c      	mov	r4, r1
 800476c:	f101 0014 	add.w	r0, r1, #20
 8004770:	2300      	movs	r3, #0
 8004772:	6805      	ldr	r5, [r0, #0]
 8004774:	b2a9      	uxth	r1, r5
 8004776:	fb02 8101 	mla	r1, r2, r1, r8
 800477a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800477e:	0c2d      	lsrs	r5, r5, #16
 8004780:	fb02 c505 	mla	r5, r2, r5, ip
 8004784:	b289      	uxth	r1, r1
 8004786:	3301      	adds	r3, #1
 8004788:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800478c:	429e      	cmp	r6, r3
 800478e:	f840 1b04 	str.w	r1, [r0], #4
 8004792:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004796:	dcec      	bgt.n	8004772 <__multadd+0x12>
 8004798:	f1b8 0f00 	cmp.w	r8, #0
 800479c:	d022      	beq.n	80047e4 <__multadd+0x84>
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	42b3      	cmp	r3, r6
 80047a2:	dc19      	bgt.n	80047d8 <__multadd+0x78>
 80047a4:	6861      	ldr	r1, [r4, #4]
 80047a6:	4638      	mov	r0, r7
 80047a8:	3101      	adds	r1, #1
 80047aa:	f7ff ff77 	bl	800469c <_Balloc>
 80047ae:	4605      	mov	r5, r0
 80047b0:	b928      	cbnz	r0, 80047be <__multadd+0x5e>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <__multadd+0x8c>)
 80047b6:	480e      	ldr	r0, [pc, #56]	; (80047f0 <__multadd+0x90>)
 80047b8:	21b5      	movs	r1, #181	; 0xb5
 80047ba:	f000 fbb7 	bl	8004f2c <__assert_func>
 80047be:	6922      	ldr	r2, [r4, #16]
 80047c0:	3202      	adds	r2, #2
 80047c2:	f104 010c 	add.w	r1, r4, #12
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	300c      	adds	r0, #12
 80047ca:	f7ff ff59 	bl	8004680 <memcpy>
 80047ce:	4621      	mov	r1, r4
 80047d0:	4638      	mov	r0, r7
 80047d2:	f7ff ffa3 	bl	800471c <_Bfree>
 80047d6:	462c      	mov	r4, r5
 80047d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80047dc:	3601      	adds	r6, #1
 80047de:	f8c3 8014 	str.w	r8, [r3, #20]
 80047e2:	6126      	str	r6, [r4, #16]
 80047e4:	4620      	mov	r0, r4
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ea:	bf00      	nop
 80047ec:	08005b1b 	.word	0x08005b1b
 80047f0:	08005b2c 	.word	0x08005b2c

080047f4 <__hi0bits>:
 80047f4:	0c03      	lsrs	r3, r0, #16
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	b9d3      	cbnz	r3, 8004830 <__hi0bits+0x3c>
 80047fa:	0400      	lsls	r0, r0, #16
 80047fc:	2310      	movs	r3, #16
 80047fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004802:	bf04      	itt	eq
 8004804:	0200      	lsleq	r0, r0, #8
 8004806:	3308      	addeq	r3, #8
 8004808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800480c:	bf04      	itt	eq
 800480e:	0100      	lsleq	r0, r0, #4
 8004810:	3304      	addeq	r3, #4
 8004812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004816:	bf04      	itt	eq
 8004818:	0080      	lsleq	r0, r0, #2
 800481a:	3302      	addeq	r3, #2
 800481c:	2800      	cmp	r0, #0
 800481e:	db05      	blt.n	800482c <__hi0bits+0x38>
 8004820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004824:	f103 0301 	add.w	r3, r3, #1
 8004828:	bf08      	it	eq
 800482a:	2320      	moveq	r3, #32
 800482c:	4618      	mov	r0, r3
 800482e:	4770      	bx	lr
 8004830:	2300      	movs	r3, #0
 8004832:	e7e4      	b.n	80047fe <__hi0bits+0xa>

08004834 <__lo0bits>:
 8004834:	6803      	ldr	r3, [r0, #0]
 8004836:	f013 0207 	ands.w	r2, r3, #7
 800483a:	4601      	mov	r1, r0
 800483c:	d00b      	beq.n	8004856 <__lo0bits+0x22>
 800483e:	07da      	lsls	r2, r3, #31
 8004840:	d424      	bmi.n	800488c <__lo0bits+0x58>
 8004842:	0798      	lsls	r0, r3, #30
 8004844:	bf49      	itett	mi
 8004846:	085b      	lsrmi	r3, r3, #1
 8004848:	089b      	lsrpl	r3, r3, #2
 800484a:	2001      	movmi	r0, #1
 800484c:	600b      	strmi	r3, [r1, #0]
 800484e:	bf5c      	itt	pl
 8004850:	600b      	strpl	r3, [r1, #0]
 8004852:	2002      	movpl	r0, #2
 8004854:	4770      	bx	lr
 8004856:	b298      	uxth	r0, r3
 8004858:	b9b0      	cbnz	r0, 8004888 <__lo0bits+0x54>
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	2010      	movs	r0, #16
 800485e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004862:	bf04      	itt	eq
 8004864:	0a1b      	lsreq	r3, r3, #8
 8004866:	3008      	addeq	r0, #8
 8004868:	071a      	lsls	r2, r3, #28
 800486a:	bf04      	itt	eq
 800486c:	091b      	lsreq	r3, r3, #4
 800486e:	3004      	addeq	r0, #4
 8004870:	079a      	lsls	r2, r3, #30
 8004872:	bf04      	itt	eq
 8004874:	089b      	lsreq	r3, r3, #2
 8004876:	3002      	addeq	r0, #2
 8004878:	07da      	lsls	r2, r3, #31
 800487a:	d403      	bmi.n	8004884 <__lo0bits+0x50>
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	f100 0001 	add.w	r0, r0, #1
 8004882:	d005      	beq.n	8004890 <__lo0bits+0x5c>
 8004884:	600b      	str	r3, [r1, #0]
 8004886:	4770      	bx	lr
 8004888:	4610      	mov	r0, r2
 800488a:	e7e8      	b.n	800485e <__lo0bits+0x2a>
 800488c:	2000      	movs	r0, #0
 800488e:	4770      	bx	lr
 8004890:	2020      	movs	r0, #32
 8004892:	4770      	bx	lr

08004894 <__i2b>:
 8004894:	b510      	push	{r4, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	2101      	movs	r1, #1
 800489a:	f7ff feff 	bl	800469c <_Balloc>
 800489e:	4602      	mov	r2, r0
 80048a0:	b928      	cbnz	r0, 80048ae <__i2b+0x1a>
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <__i2b+0x24>)
 80048a4:	4805      	ldr	r0, [pc, #20]	; (80048bc <__i2b+0x28>)
 80048a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80048aa:	f000 fb3f 	bl	8004f2c <__assert_func>
 80048ae:	2301      	movs	r3, #1
 80048b0:	6144      	str	r4, [r0, #20]
 80048b2:	6103      	str	r3, [r0, #16]
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	bf00      	nop
 80048b8:	08005b1b 	.word	0x08005b1b
 80048bc:	08005b2c 	.word	0x08005b2c

080048c0 <__multiply>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	4614      	mov	r4, r2
 80048c6:	690a      	ldr	r2, [r1, #16]
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bfb8      	it	lt
 80048ce:	460b      	movlt	r3, r1
 80048d0:	460d      	mov	r5, r1
 80048d2:	bfbc      	itt	lt
 80048d4:	4625      	movlt	r5, r4
 80048d6:	461c      	movlt	r4, r3
 80048d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80048dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048e0:	68ab      	ldr	r3, [r5, #8]
 80048e2:	6869      	ldr	r1, [r5, #4]
 80048e4:	eb0a 0709 	add.w	r7, sl, r9
 80048e8:	42bb      	cmp	r3, r7
 80048ea:	b085      	sub	sp, #20
 80048ec:	bfb8      	it	lt
 80048ee:	3101      	addlt	r1, #1
 80048f0:	f7ff fed4 	bl	800469c <_Balloc>
 80048f4:	b930      	cbnz	r0, 8004904 <__multiply+0x44>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <__multiply+0x144>)
 80048fa:	4843      	ldr	r0, [pc, #268]	; (8004a08 <__multiply+0x148>)
 80048fc:	f240 115d 	movw	r1, #349	; 0x15d
 8004900:	f000 fb14 	bl	8004f2c <__assert_func>
 8004904:	f100 0614 	add.w	r6, r0, #20
 8004908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800490c:	4633      	mov	r3, r6
 800490e:	2200      	movs	r2, #0
 8004910:	4543      	cmp	r3, r8
 8004912:	d31e      	bcc.n	8004952 <__multiply+0x92>
 8004914:	f105 0c14 	add.w	ip, r5, #20
 8004918:	f104 0314 	add.w	r3, r4, #20
 800491c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004924:	9202      	str	r2, [sp, #8]
 8004926:	ebac 0205 	sub.w	r2, ip, r5
 800492a:	3a15      	subs	r2, #21
 800492c:	f022 0203 	bic.w	r2, r2, #3
 8004930:	3204      	adds	r2, #4
 8004932:	f105 0115 	add.w	r1, r5, #21
 8004936:	458c      	cmp	ip, r1
 8004938:	bf38      	it	cc
 800493a:	2204      	movcc	r2, #4
 800493c:	9201      	str	r2, [sp, #4]
 800493e:	9a02      	ldr	r2, [sp, #8]
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d808      	bhi.n	8004958 <__multiply+0x98>
 8004946:	2f00      	cmp	r7, #0
 8004948:	dc55      	bgt.n	80049f6 <__multiply+0x136>
 800494a:	6107      	str	r7, [r0, #16]
 800494c:	b005      	add	sp, #20
 800494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004952:	f843 2b04 	str.w	r2, [r3], #4
 8004956:	e7db      	b.n	8004910 <__multiply+0x50>
 8004958:	f8b3 a000 	ldrh.w	sl, [r3]
 800495c:	f1ba 0f00 	cmp.w	sl, #0
 8004960:	d020      	beq.n	80049a4 <__multiply+0xe4>
 8004962:	f105 0e14 	add.w	lr, r5, #20
 8004966:	46b1      	mov	r9, r6
 8004968:	2200      	movs	r2, #0
 800496a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800496e:	f8d9 b000 	ldr.w	fp, [r9]
 8004972:	b2a1      	uxth	r1, r4
 8004974:	fa1f fb8b 	uxth.w	fp, fp
 8004978:	fb0a b101 	mla	r1, sl, r1, fp
 800497c:	4411      	add	r1, r2
 800497e:	f8d9 2000 	ldr.w	r2, [r9]
 8004982:	0c24      	lsrs	r4, r4, #16
 8004984:	0c12      	lsrs	r2, r2, #16
 8004986:	fb0a 2404 	mla	r4, sl, r4, r2
 800498a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800498e:	b289      	uxth	r1, r1
 8004990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004994:	45f4      	cmp	ip, lr
 8004996:	f849 1b04 	str.w	r1, [r9], #4
 800499a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800499e:	d8e4      	bhi.n	800496a <__multiply+0xaa>
 80049a0:	9901      	ldr	r1, [sp, #4]
 80049a2:	5072      	str	r2, [r6, r1]
 80049a4:	9a03      	ldr	r2, [sp, #12]
 80049a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049aa:	3304      	adds	r3, #4
 80049ac:	f1b9 0f00 	cmp.w	r9, #0
 80049b0:	d01f      	beq.n	80049f2 <__multiply+0x132>
 80049b2:	6834      	ldr	r4, [r6, #0]
 80049b4:	f105 0114 	add.w	r1, r5, #20
 80049b8:	46b6      	mov	lr, r6
 80049ba:	f04f 0a00 	mov.w	sl, #0
 80049be:	880a      	ldrh	r2, [r1, #0]
 80049c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80049c4:	fb09 b202 	mla	r2, r9, r2, fp
 80049c8:	4492      	add	sl, r2
 80049ca:	b2a4      	uxth	r4, r4
 80049cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80049d0:	f84e 4b04 	str.w	r4, [lr], #4
 80049d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80049d8:	f8be 2000 	ldrh.w	r2, [lr]
 80049dc:	0c24      	lsrs	r4, r4, #16
 80049de:	fb09 2404 	mla	r4, r9, r4, r2
 80049e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80049e6:	458c      	cmp	ip, r1
 80049e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80049ec:	d8e7      	bhi.n	80049be <__multiply+0xfe>
 80049ee:	9a01      	ldr	r2, [sp, #4]
 80049f0:	50b4      	str	r4, [r6, r2]
 80049f2:	3604      	adds	r6, #4
 80049f4:	e7a3      	b.n	800493e <__multiply+0x7e>
 80049f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1a5      	bne.n	800494a <__multiply+0x8a>
 80049fe:	3f01      	subs	r7, #1
 8004a00:	e7a1      	b.n	8004946 <__multiply+0x86>
 8004a02:	bf00      	nop
 8004a04:	08005b1b 	.word	0x08005b1b
 8004a08:	08005b2c 	.word	0x08005b2c

08004a0c <__pow5mult>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	4615      	mov	r5, r2
 8004a12:	f012 0203 	ands.w	r2, r2, #3
 8004a16:	4606      	mov	r6, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	d007      	beq.n	8004a2c <__pow5mult+0x20>
 8004a1c:	4c25      	ldr	r4, [pc, #148]	; (8004ab4 <__pow5mult+0xa8>)
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	2300      	movs	r3, #0
 8004a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a26:	f7ff fe9b 	bl	8004760 <__multadd>
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	10ad      	asrs	r5, r5, #2
 8004a2e:	d03d      	beq.n	8004aac <__pow5mult+0xa0>
 8004a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a32:	b97c      	cbnz	r4, 8004a54 <__pow5mult+0x48>
 8004a34:	2010      	movs	r0, #16
 8004a36:	f7ff fe1b 	bl	8004670 <malloc>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6270      	str	r0, [r6, #36]	; 0x24
 8004a3e:	b928      	cbnz	r0, 8004a4c <__pow5mult+0x40>
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <__pow5mult+0xac>)
 8004a42:	481e      	ldr	r0, [pc, #120]	; (8004abc <__pow5mult+0xb0>)
 8004a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a48:	f000 fa70 	bl	8004f2c <__assert_func>
 8004a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a50:	6004      	str	r4, [r0, #0]
 8004a52:	60c4      	str	r4, [r0, #12]
 8004a54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a5c:	b94c      	cbnz	r4, 8004a72 <__pow5mult+0x66>
 8004a5e:	f240 2171 	movw	r1, #625	; 0x271
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff ff16 	bl	8004894 <__i2b>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a6e:	4604      	mov	r4, r0
 8004a70:	6003      	str	r3, [r0, #0]
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	07eb      	lsls	r3, r5, #31
 8004a78:	d50a      	bpl.n	8004a90 <__pow5mult+0x84>
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f7ff ff1e 	bl	80048c0 <__multiply>
 8004a84:	4639      	mov	r1, r7
 8004a86:	4680      	mov	r8, r0
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff fe47 	bl	800471c <_Bfree>
 8004a8e:	4647      	mov	r7, r8
 8004a90:	106d      	asrs	r5, r5, #1
 8004a92:	d00b      	beq.n	8004aac <__pow5mult+0xa0>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	b938      	cbnz	r0, 8004aa8 <__pow5mult+0x9c>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff ff0f 	bl	80048c0 <__multiply>
 8004aa2:	6020      	str	r0, [r4, #0]
 8004aa4:	f8c0 9000 	str.w	r9, [r0]
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	e7e4      	b.n	8004a76 <__pow5mult+0x6a>
 8004aac:	4638      	mov	r0, r7
 8004aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08005c80 	.word	0x08005c80
 8004ab8:	08005aa5 	.word	0x08005aa5
 8004abc:	08005b2c 	.word	0x08005b2c

08004ac0 <__lshift>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	6849      	ldr	r1, [r1, #4]
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	4691      	mov	r9, r2
 8004ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ad8:	f108 0601 	add.w	r6, r8, #1
 8004adc:	42b3      	cmp	r3, r6
 8004ade:	db0b      	blt.n	8004af8 <__lshift+0x38>
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f7ff fddb 	bl	800469c <_Balloc>
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	b948      	cbnz	r0, 8004afe <__lshift+0x3e>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <__lshift+0xd0>)
 8004aee:	4829      	ldr	r0, [pc, #164]	; (8004b94 <__lshift+0xd4>)
 8004af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004af4:	f000 fa1a 	bl	8004f2c <__assert_func>
 8004af8:	3101      	adds	r1, #1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	e7ee      	b.n	8004adc <__lshift+0x1c>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f100 0114 	add.w	r1, r0, #20
 8004b04:	f100 0210 	add.w	r2, r0, #16
 8004b08:	4618      	mov	r0, r3
 8004b0a:	4553      	cmp	r3, sl
 8004b0c:	db33      	blt.n	8004b76 <__lshift+0xb6>
 8004b0e:	6920      	ldr	r0, [r4, #16]
 8004b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b14:	f104 0314 	add.w	r3, r4, #20
 8004b18:	f019 091f 	ands.w	r9, r9, #31
 8004b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b24:	d02b      	beq.n	8004b7e <__lshift+0xbe>
 8004b26:	f1c9 0e20 	rsb	lr, r9, #32
 8004b2a:	468a      	mov	sl, r1
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	fa00 f009 	lsl.w	r0, r0, r9
 8004b34:	4302      	orrs	r2, r0
 8004b36:	f84a 2b04 	str.w	r2, [sl], #4
 8004b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3e:	459c      	cmp	ip, r3
 8004b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b44:	d8f3      	bhi.n	8004b2e <__lshift+0x6e>
 8004b46:	ebac 0304 	sub.w	r3, ip, r4
 8004b4a:	3b15      	subs	r3, #21
 8004b4c:	f023 0303 	bic.w	r3, r3, #3
 8004b50:	3304      	adds	r3, #4
 8004b52:	f104 0015 	add.w	r0, r4, #21
 8004b56:	4584      	cmp	ip, r0
 8004b58:	bf38      	it	cc
 8004b5a:	2304      	movcc	r3, #4
 8004b5c:	50ca      	str	r2, [r1, r3]
 8004b5e:	b10a      	cbz	r2, 8004b64 <__lshift+0xa4>
 8004b60:	f108 0602 	add.w	r6, r8, #2
 8004b64:	3e01      	subs	r6, #1
 8004b66:	4638      	mov	r0, r7
 8004b68:	612e      	str	r6, [r5, #16]
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	f7ff fdd6 	bl	800471c <_Bfree>
 8004b70:	4628      	mov	r0, r5
 8004b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	e7c5      	b.n	8004b0a <__lshift+0x4a>
 8004b7e:	3904      	subs	r1, #4
 8004b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b88:	459c      	cmp	ip, r3
 8004b8a:	d8f9      	bhi.n	8004b80 <__lshift+0xc0>
 8004b8c:	e7ea      	b.n	8004b64 <__lshift+0xa4>
 8004b8e:	bf00      	nop
 8004b90:	08005b1b 	.word	0x08005b1b
 8004b94:	08005b2c 	.word	0x08005b2c

08004b98 <__mcmp>:
 8004b98:	b530      	push	{r4, r5, lr}
 8004b9a:	6902      	ldr	r2, [r0, #16]
 8004b9c:	690c      	ldr	r4, [r1, #16]
 8004b9e:	1b12      	subs	r2, r2, r4
 8004ba0:	d10e      	bne.n	8004bc0 <__mcmp+0x28>
 8004ba2:	f100 0314 	add.w	r3, r0, #20
 8004ba6:	3114      	adds	r1, #20
 8004ba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004bb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004bb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004bb8:	42a5      	cmp	r5, r4
 8004bba:	d003      	beq.n	8004bc4 <__mcmp+0x2c>
 8004bbc:	d305      	bcc.n	8004bca <__mcmp+0x32>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	bd30      	pop	{r4, r5, pc}
 8004bc4:	4283      	cmp	r3, r0
 8004bc6:	d3f3      	bcc.n	8004bb0 <__mcmp+0x18>
 8004bc8:	e7fa      	b.n	8004bc0 <__mcmp+0x28>
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	e7f7      	b.n	8004bc0 <__mcmp+0x28>

08004bd0 <__mdiff>:
 8004bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4620      	mov	r0, r4
 8004bdc:	4617      	mov	r7, r2
 8004bde:	f7ff ffdb 	bl	8004b98 <__mcmp>
 8004be2:	1e05      	subs	r5, r0, #0
 8004be4:	d110      	bne.n	8004c08 <__mdiff+0x38>
 8004be6:	4629      	mov	r1, r5
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7ff fd57 	bl	800469c <_Balloc>
 8004bee:	b930      	cbnz	r0, 8004bfe <__mdiff+0x2e>
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <__mdiff+0x108>)
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	f240 2132 	movw	r1, #562	; 0x232
 8004bf8:	4838      	ldr	r0, [pc, #224]	; (8004cdc <__mdiff+0x10c>)
 8004bfa:	f000 f997 	bl	8004f2c <__assert_func>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	bfa4      	itt	ge
 8004c0a:	463b      	movge	r3, r7
 8004c0c:	4627      	movge	r7, r4
 8004c0e:	4630      	mov	r0, r6
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	bfa6      	itte	ge
 8004c14:	461c      	movge	r4, r3
 8004c16:	2500      	movge	r5, #0
 8004c18:	2501      	movlt	r5, #1
 8004c1a:	f7ff fd3f 	bl	800469c <_Balloc>
 8004c1e:	b920      	cbnz	r0, 8004c2a <__mdiff+0x5a>
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <__mdiff+0x108>)
 8004c22:	4602      	mov	r2, r0
 8004c24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c28:	e7e6      	b.n	8004bf8 <__mdiff+0x28>
 8004c2a:	693e      	ldr	r6, [r7, #16]
 8004c2c:	60c5      	str	r5, [r0, #12]
 8004c2e:	6925      	ldr	r5, [r4, #16]
 8004c30:	f107 0114 	add.w	r1, r7, #20
 8004c34:	f104 0914 	add.w	r9, r4, #20
 8004c38:	f100 0e14 	add.w	lr, r0, #20
 8004c3c:	f107 0210 	add.w	r2, r7, #16
 8004c40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004c44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004c48:	46f2      	mov	sl, lr
 8004c4a:	2700      	movs	r7, #0
 8004c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c54:	fa1f f883 	uxth.w	r8, r3
 8004c58:	fa17 f78b 	uxtah	r7, r7, fp
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	eba7 0808 	sub.w	r8, r7, r8
 8004c62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c6a:	fa1f f888 	uxth.w	r8, r8
 8004c6e:	141f      	asrs	r7, r3, #16
 8004c70:	454d      	cmp	r5, r9
 8004c72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c76:	f84a 3b04 	str.w	r3, [sl], #4
 8004c7a:	d8e7      	bhi.n	8004c4c <__mdiff+0x7c>
 8004c7c:	1b2b      	subs	r3, r5, r4
 8004c7e:	3b15      	subs	r3, #21
 8004c80:	f023 0303 	bic.w	r3, r3, #3
 8004c84:	3304      	adds	r3, #4
 8004c86:	3415      	adds	r4, #21
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	bf38      	it	cc
 8004c8c:	2304      	movcc	r3, #4
 8004c8e:	4419      	add	r1, r3
 8004c90:	4473      	add	r3, lr
 8004c92:	469e      	mov	lr, r3
 8004c94:	460d      	mov	r5, r1
 8004c96:	4565      	cmp	r5, ip
 8004c98:	d30e      	bcc.n	8004cb8 <__mdiff+0xe8>
 8004c9a:	f10c 0203 	add.w	r2, ip, #3
 8004c9e:	1a52      	subs	r2, r2, r1
 8004ca0:	f022 0203 	bic.w	r2, r2, #3
 8004ca4:	3903      	subs	r1, #3
 8004ca6:	458c      	cmp	ip, r1
 8004ca8:	bf38      	it	cc
 8004caa:	2200      	movcc	r2, #0
 8004cac:	441a      	add	r2, r3
 8004cae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004cb2:	b17b      	cbz	r3, 8004cd4 <__mdiff+0x104>
 8004cb4:	6106      	str	r6, [r0, #16]
 8004cb6:	e7a5      	b.n	8004c04 <__mdiff+0x34>
 8004cb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cbc:	fa17 f488 	uxtah	r4, r7, r8
 8004cc0:	1422      	asrs	r2, r4, #16
 8004cc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004cc6:	b2a4      	uxth	r4, r4
 8004cc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004ccc:	f84e 4b04 	str.w	r4, [lr], #4
 8004cd0:	1417      	asrs	r7, r2, #16
 8004cd2:	e7e0      	b.n	8004c96 <__mdiff+0xc6>
 8004cd4:	3e01      	subs	r6, #1
 8004cd6:	e7ea      	b.n	8004cae <__mdiff+0xde>
 8004cd8:	08005b1b 	.word	0x08005b1b
 8004cdc:	08005b2c 	.word	0x08005b2c

08004ce0 <__d2b>:
 8004ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	4689      	mov	r9, r1
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	ec57 6b10 	vmov	r6, r7, d0
 8004cec:	4690      	mov	r8, r2
 8004cee:	f7ff fcd5 	bl	800469c <_Balloc>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	b930      	cbnz	r0, 8004d04 <__d2b+0x24>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <__d2b+0xb0>)
 8004cfa:	4826      	ldr	r0, [pc, #152]	; (8004d94 <__d2b+0xb4>)
 8004cfc:	f240 310a 	movw	r1, #778	; 0x30a
 8004d00:	f000 f914 	bl	8004f2c <__assert_func>
 8004d04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d0c:	bb35      	cbnz	r5, 8004d5c <__d2b+0x7c>
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	d028      	beq.n	8004d66 <__d2b+0x86>
 8004d14:	4668      	mov	r0, sp
 8004d16:	9600      	str	r6, [sp, #0]
 8004d18:	f7ff fd8c 	bl	8004834 <__lo0bits>
 8004d1c:	9900      	ldr	r1, [sp, #0]
 8004d1e:	b300      	cbz	r0, 8004d62 <__d2b+0x82>
 8004d20:	9a01      	ldr	r2, [sp, #4]
 8004d22:	f1c0 0320 	rsb	r3, r0, #32
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	40c2      	lsrs	r2, r0
 8004d2e:	6163      	str	r3, [r4, #20]
 8004d30:	9201      	str	r2, [sp, #4]
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	61a3      	str	r3, [r4, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2202      	movne	r2, #2
 8004d3c:	2201      	moveq	r2, #1
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	b1d5      	cbz	r5, 8004d78 <__d2b+0x98>
 8004d42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d46:	4405      	add	r5, r0
 8004d48:	f8c9 5000 	str.w	r5, [r9]
 8004d4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d50:	f8c8 0000 	str.w	r0, [r8]
 8004d54:	4620      	mov	r0, r4
 8004d56:	b003      	add	sp, #12
 8004d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d60:	e7d5      	b.n	8004d0e <__d2b+0x2e>
 8004d62:	6161      	str	r1, [r4, #20]
 8004d64:	e7e5      	b.n	8004d32 <__d2b+0x52>
 8004d66:	a801      	add	r0, sp, #4
 8004d68:	f7ff fd64 	bl	8004834 <__lo0bits>
 8004d6c:	9b01      	ldr	r3, [sp, #4]
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	2201      	movs	r2, #1
 8004d72:	6122      	str	r2, [r4, #16]
 8004d74:	3020      	adds	r0, #32
 8004d76:	e7e3      	b.n	8004d40 <__d2b+0x60>
 8004d78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d80:	f8c9 0000 	str.w	r0, [r9]
 8004d84:	6918      	ldr	r0, [r3, #16]
 8004d86:	f7ff fd35 	bl	80047f4 <__hi0bits>
 8004d8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004d8e:	e7df      	b.n	8004d50 <__d2b+0x70>
 8004d90:	08005b1b 	.word	0x08005b1b
 8004d94:	08005b2c 	.word	0x08005b2c

08004d98 <_calloc_r>:
 8004d98:	b513      	push	{r0, r1, r4, lr}
 8004d9a:	434a      	muls	r2, r1
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	9201      	str	r2, [sp, #4]
 8004da0:	f000 f85a 	bl	8004e58 <_malloc_r>
 8004da4:	4604      	mov	r4, r0
 8004da6:	b118      	cbz	r0, 8004db0 <_calloc_r+0x18>
 8004da8:	9a01      	ldr	r2, [sp, #4]
 8004daa:	2100      	movs	r1, #0
 8004dac:	f7fe f972 	bl	8003094 <memset>
 8004db0:	4620      	mov	r0, r4
 8004db2:	b002      	add	sp, #8
 8004db4:	bd10      	pop	{r4, pc}
	...

08004db8 <_free_r>:
 8004db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d048      	beq.n	8004e50 <_free_r+0x98>
 8004dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc2:	9001      	str	r0, [sp, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dca:	bfb8      	it	lt
 8004dcc:	18e4      	addlt	r4, r4, r3
 8004dce:	f000 f8ef 	bl	8004fb0 <__malloc_lock>
 8004dd2:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <_free_r+0x9c>)
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	4615      	mov	r5, r2
 8004dda:	b933      	cbnz	r3, 8004dea <_free_r+0x32>
 8004ddc:	6063      	str	r3, [r4, #4]
 8004dde:	6014      	str	r4, [r2, #0]
 8004de0:	b003      	add	sp, #12
 8004de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de6:	f000 b8e9 	b.w	8004fbc <__malloc_unlock>
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	d90b      	bls.n	8004e06 <_free_r+0x4e>
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	1862      	adds	r2, r4, r1
 8004df2:	4293      	cmp	r3, r2
 8004df4:	bf04      	itt	eq
 8004df6:	681a      	ldreq	r2, [r3, #0]
 8004df8:	685b      	ldreq	r3, [r3, #4]
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	bf04      	itt	eq
 8004dfe:	1852      	addeq	r2, r2, r1
 8004e00:	6022      	streq	r2, [r4, #0]
 8004e02:	602c      	str	r4, [r5, #0]
 8004e04:	e7ec      	b.n	8004de0 <_free_r+0x28>
 8004e06:	461a      	mov	r2, r3
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b10b      	cbz	r3, 8004e10 <_free_r+0x58>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d9fa      	bls.n	8004e06 <_free_r+0x4e>
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	1855      	adds	r5, r2, r1
 8004e14:	42a5      	cmp	r5, r4
 8004e16:	d10b      	bne.n	8004e30 <_free_r+0x78>
 8004e18:	6824      	ldr	r4, [r4, #0]
 8004e1a:	4421      	add	r1, r4
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	d1dd      	bne.n	8004de0 <_free_r+0x28>
 8004e24:	681c      	ldr	r4, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	6053      	str	r3, [r2, #4]
 8004e2a:	4421      	add	r1, r4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	e7d7      	b.n	8004de0 <_free_r+0x28>
 8004e30:	d902      	bls.n	8004e38 <_free_r+0x80>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6003      	str	r3, [r0, #0]
 8004e36:	e7d3      	b.n	8004de0 <_free_r+0x28>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	1961      	adds	r1, r4, r5
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf04      	itt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	bf04      	itt	eq
 8004e48:	1949      	addeq	r1, r1, r5
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	6054      	str	r4, [r2, #4]
 8004e4e:	e7c7      	b.n	8004de0 <_free_r+0x28>
 8004e50:	b003      	add	sp, #12
 8004e52:	bd30      	pop	{r4, r5, pc}
 8004e54:	200004e0 	.word	0x200004e0

08004e58 <_malloc_r>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	1ccd      	adds	r5, r1, #3
 8004e5c:	f025 0503 	bic.w	r5, r5, #3
 8004e60:	3508      	adds	r5, #8
 8004e62:	2d0c      	cmp	r5, #12
 8004e64:	bf38      	it	cc
 8004e66:	250c      	movcc	r5, #12
 8004e68:	2d00      	cmp	r5, #0
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	db01      	blt.n	8004e72 <_malloc_r+0x1a>
 8004e6e:	42a9      	cmp	r1, r5
 8004e70:	d903      	bls.n	8004e7a <_malloc_r+0x22>
 8004e72:	230c      	movs	r3, #12
 8004e74:	6033      	str	r3, [r6, #0]
 8004e76:	2000      	movs	r0, #0
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	f000 f899 	bl	8004fb0 <__malloc_lock>
 8004e7e:	4921      	ldr	r1, [pc, #132]	; (8004f04 <_malloc_r+0xac>)
 8004e80:	680a      	ldr	r2, [r1, #0]
 8004e82:	4614      	mov	r4, r2
 8004e84:	b99c      	cbnz	r4, 8004eae <_malloc_r+0x56>
 8004e86:	4f20      	ldr	r7, [pc, #128]	; (8004f08 <_malloc_r+0xb0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	b923      	cbnz	r3, 8004e96 <_malloc_r+0x3e>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f000 f83c 	bl	8004f0c <_sbrk_r>
 8004e94:	6038      	str	r0, [r7, #0]
 8004e96:	4629      	mov	r1, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f837 	bl	8004f0c <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d123      	bne.n	8004eea <_malloc_r+0x92>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 f888 	bl	8004fbc <__malloc_unlock>
 8004eac:	e7e3      	b.n	8004e76 <_malloc_r+0x1e>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	1b5b      	subs	r3, r3, r5
 8004eb2:	d417      	bmi.n	8004ee4 <_malloc_r+0x8c>
 8004eb4:	2b0b      	cmp	r3, #11
 8004eb6:	d903      	bls.n	8004ec0 <_malloc_r+0x68>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	441c      	add	r4, r3
 8004ebc:	6025      	str	r5, [r4, #0]
 8004ebe:	e004      	b.n	8004eca <_malloc_r+0x72>
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	42a2      	cmp	r2, r4
 8004ec4:	bf0c      	ite	eq
 8004ec6:	600b      	streq	r3, [r1, #0]
 8004ec8:	6053      	strne	r3, [r2, #4]
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f000 f876 	bl	8004fbc <__malloc_unlock>
 8004ed0:	f104 000b 	add.w	r0, r4, #11
 8004ed4:	1d23      	adds	r3, r4, #4
 8004ed6:	f020 0007 	bic.w	r0, r0, #7
 8004eda:	1ac2      	subs	r2, r0, r3
 8004edc:	d0cc      	beq.n	8004e78 <_malloc_r+0x20>
 8004ede:	1a1b      	subs	r3, r3, r0
 8004ee0:	50a3      	str	r3, [r4, r2]
 8004ee2:	e7c9      	b.n	8004e78 <_malloc_r+0x20>
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	6864      	ldr	r4, [r4, #4]
 8004ee8:	e7cc      	b.n	8004e84 <_malloc_r+0x2c>
 8004eea:	1cc4      	adds	r4, r0, #3
 8004eec:	f024 0403 	bic.w	r4, r4, #3
 8004ef0:	42a0      	cmp	r0, r4
 8004ef2:	d0e3      	beq.n	8004ebc <_malloc_r+0x64>
 8004ef4:	1a21      	subs	r1, r4, r0
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f000 f808 	bl	8004f0c <_sbrk_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d1dd      	bne.n	8004ebc <_malloc_r+0x64>
 8004f00:	e7cf      	b.n	8004ea2 <_malloc_r+0x4a>
 8004f02:	bf00      	nop
 8004f04:	200004e0 	.word	0x200004e0
 8004f08:	200004e4 	.word	0x200004e4

08004f0c <_sbrk_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	; (8004f28 <_sbrk_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fc feae 	bl	8001c78 <_sbrk>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_sbrk_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_sbrk_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000508 	.word	0x20000508

08004f2c <__assert_func>:
 8004f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f2e:	4614      	mov	r4, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <__assert_func+0x2c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4605      	mov	r5, r0
 8004f38:	68d8      	ldr	r0, [r3, #12]
 8004f3a:	b14c      	cbz	r4, 8004f50 <__assert_func+0x24>
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <__assert_func+0x30>)
 8004f3e:	9100      	str	r1, [sp, #0]
 8004f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f44:	4906      	ldr	r1, [pc, #24]	; (8004f60 <__assert_func+0x34>)
 8004f46:	462b      	mov	r3, r5
 8004f48:	f000 f80e 	bl	8004f68 <fiprintf>
 8004f4c:	f000 fa64 	bl	8005418 <abort>
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <__assert_func+0x38>)
 8004f52:	461c      	mov	r4, r3
 8004f54:	e7f3      	b.n	8004f3e <__assert_func+0x12>
 8004f56:	bf00      	nop
 8004f58:	20000028 	.word	0x20000028
 8004f5c:	08005c8c 	.word	0x08005c8c
 8004f60:	08005c99 	.word	0x08005c99
 8004f64:	08005cc7 	.word	0x08005cc7

08004f68 <fiprintf>:
 8004f68:	b40e      	push	{r1, r2, r3}
 8004f6a:	b503      	push	{r0, r1, lr}
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	ab03      	add	r3, sp, #12
 8004f70:	4805      	ldr	r0, [pc, #20]	; (8004f88 <fiprintf+0x20>)
 8004f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f76:	6800      	ldr	r0, [r0, #0]
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	f000 f84f 	bl	800501c <_vfiprintf_r>
 8004f7e:	b002      	add	sp, #8
 8004f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f84:	b003      	add	sp, #12
 8004f86:	4770      	bx	lr
 8004f88:	20000028 	.word	0x20000028

08004f8c <__ascii_mbtowc>:
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	b901      	cbnz	r1, 8004f92 <__ascii_mbtowc+0x6>
 8004f90:	a901      	add	r1, sp, #4
 8004f92:	b142      	cbz	r2, 8004fa6 <__ascii_mbtowc+0x1a>
 8004f94:	b14b      	cbz	r3, 8004faa <__ascii_mbtowc+0x1e>
 8004f96:	7813      	ldrb	r3, [r2, #0]
 8004f98:	600b      	str	r3, [r1, #0]
 8004f9a:	7812      	ldrb	r2, [r2, #0]
 8004f9c:	1e10      	subs	r0, r2, #0
 8004f9e:	bf18      	it	ne
 8004fa0:	2001      	movne	r0, #1
 8004fa2:	b002      	add	sp, #8
 8004fa4:	4770      	bx	lr
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	e7fb      	b.n	8004fa2 <__ascii_mbtowc+0x16>
 8004faa:	f06f 0001 	mvn.w	r0, #1
 8004fae:	e7f8      	b.n	8004fa2 <__ascii_mbtowc+0x16>

08004fb0 <__malloc_lock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	; (8004fb8 <__malloc_lock+0x8>)
 8004fb2:	f000 bbf1 	b.w	8005798 <__retarget_lock_acquire_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	20000510 	.word	0x20000510

08004fbc <__malloc_unlock>:
 8004fbc:	4801      	ldr	r0, [pc, #4]	; (8004fc4 <__malloc_unlock+0x8>)
 8004fbe:	f000 bbec 	b.w	800579a <__retarget_lock_release_recursive>
 8004fc2:	bf00      	nop
 8004fc4:	20000510 	.word	0x20000510

08004fc8 <__sfputc_r>:
 8004fc8:	6893      	ldr	r3, [r2, #8]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	b410      	push	{r4}
 8004fd0:	6093      	str	r3, [r2, #8]
 8004fd2:	da08      	bge.n	8004fe6 <__sfputc_r+0x1e>
 8004fd4:	6994      	ldr	r4, [r2, #24]
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	db01      	blt.n	8004fde <__sfputc_r+0x16>
 8004fda:	290a      	cmp	r1, #10
 8004fdc:	d103      	bne.n	8004fe6 <__sfputc_r+0x1e>
 8004fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe2:	f000 b94b 	b.w	800527c <__swbuf_r>
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	1c58      	adds	r0, r3, #1
 8004fea:	6010      	str	r0, [r2, #0]
 8004fec:	7019      	strb	r1, [r3, #0]
 8004fee:	4608      	mov	r0, r1
 8004ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <__sfputs_r>:
 8004ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	460f      	mov	r7, r1
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	18d5      	adds	r5, r2, r3
 8005000:	42ac      	cmp	r4, r5
 8005002:	d101      	bne.n	8005008 <__sfputs_r+0x12>
 8005004:	2000      	movs	r0, #0
 8005006:	e007      	b.n	8005018 <__sfputs_r+0x22>
 8005008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500c:	463a      	mov	r2, r7
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff ffda 	bl	8004fc8 <__sfputc_r>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d1f3      	bne.n	8005000 <__sfputs_r+0xa>
 8005018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800501c <_vfiprintf_r>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	460d      	mov	r5, r1
 8005022:	b09d      	sub	sp, #116	; 0x74
 8005024:	4614      	mov	r4, r2
 8005026:	4698      	mov	r8, r3
 8005028:	4606      	mov	r6, r0
 800502a:	b118      	cbz	r0, 8005034 <_vfiprintf_r+0x18>
 800502c:	6983      	ldr	r3, [r0, #24]
 800502e:	b90b      	cbnz	r3, 8005034 <_vfiprintf_r+0x18>
 8005030:	f000 fb14 	bl	800565c <__sinit>
 8005034:	4b89      	ldr	r3, [pc, #548]	; (800525c <_vfiprintf_r+0x240>)
 8005036:	429d      	cmp	r5, r3
 8005038:	d11b      	bne.n	8005072 <_vfiprintf_r+0x56>
 800503a:	6875      	ldr	r5, [r6, #4]
 800503c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	d405      	bmi.n	800504e <_vfiprintf_r+0x32>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	059a      	lsls	r2, r3, #22
 8005046:	d402      	bmi.n	800504e <_vfiprintf_r+0x32>
 8005048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800504a:	f000 fba5 	bl	8005798 <__retarget_lock_acquire_recursive>
 800504e:	89ab      	ldrh	r3, [r5, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	d501      	bpl.n	8005058 <_vfiprintf_r+0x3c>
 8005054:	692b      	ldr	r3, [r5, #16]
 8005056:	b9eb      	cbnz	r3, 8005094 <_vfiprintf_r+0x78>
 8005058:	4629      	mov	r1, r5
 800505a:	4630      	mov	r0, r6
 800505c:	f000 f96e 	bl	800533c <__swsetup_r>
 8005060:	b1c0      	cbz	r0, 8005094 <_vfiprintf_r+0x78>
 8005062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005064:	07dc      	lsls	r4, r3, #31
 8005066:	d50e      	bpl.n	8005086 <_vfiprintf_r+0x6a>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	b01d      	add	sp, #116	; 0x74
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <_vfiprintf_r+0x244>)
 8005074:	429d      	cmp	r5, r3
 8005076:	d101      	bne.n	800507c <_vfiprintf_r+0x60>
 8005078:	68b5      	ldr	r5, [r6, #8]
 800507a:	e7df      	b.n	800503c <_vfiprintf_r+0x20>
 800507c:	4b79      	ldr	r3, [pc, #484]	; (8005264 <_vfiprintf_r+0x248>)
 800507e:	429d      	cmp	r5, r3
 8005080:	bf08      	it	eq
 8005082:	68f5      	ldreq	r5, [r6, #12]
 8005084:	e7da      	b.n	800503c <_vfiprintf_r+0x20>
 8005086:	89ab      	ldrh	r3, [r5, #12]
 8005088:	0598      	lsls	r0, r3, #22
 800508a:	d4ed      	bmi.n	8005068 <_vfiprintf_r+0x4c>
 800508c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800508e:	f000 fb84 	bl	800579a <__retarget_lock_release_recursive>
 8005092:	e7e9      	b.n	8005068 <_vfiprintf_r+0x4c>
 8005094:	2300      	movs	r3, #0
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	2320      	movs	r3, #32
 800509a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800509e:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a2:	2330      	movs	r3, #48	; 0x30
 80050a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005268 <_vfiprintf_r+0x24c>
 80050a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050ac:	f04f 0901 	mov.w	r9, #1
 80050b0:	4623      	mov	r3, r4
 80050b2:	469a      	mov	sl, r3
 80050b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b8:	b10a      	cbz	r2, 80050be <_vfiprintf_r+0xa2>
 80050ba:	2a25      	cmp	r2, #37	; 0x25
 80050bc:	d1f9      	bne.n	80050b2 <_vfiprintf_r+0x96>
 80050be:	ebba 0b04 	subs.w	fp, sl, r4
 80050c2:	d00b      	beq.n	80050dc <_vfiprintf_r+0xc0>
 80050c4:	465b      	mov	r3, fp
 80050c6:	4622      	mov	r2, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ff93 	bl	8004ff6 <__sfputs_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	f000 80aa 	beq.w	800522a <_vfiprintf_r+0x20e>
 80050d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d8:	445a      	add	r2, fp
 80050da:	9209      	str	r2, [sp, #36]	; 0x24
 80050dc:	f89a 3000 	ldrb.w	r3, [sl]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a2 	beq.w	800522a <_vfiprintf_r+0x20e>
 80050e6:	2300      	movs	r3, #0
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f0:	f10a 0a01 	add.w	sl, sl, #1
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	9307      	str	r3, [sp, #28]
 80050f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050fc:	931a      	str	r3, [sp, #104]	; 0x68
 80050fe:	4654      	mov	r4, sl
 8005100:	2205      	movs	r2, #5
 8005102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005106:	4858      	ldr	r0, [pc, #352]	; (8005268 <_vfiprintf_r+0x24c>)
 8005108:	f7fb f872 	bl	80001f0 <memchr>
 800510c:	9a04      	ldr	r2, [sp, #16]
 800510e:	b9d8      	cbnz	r0, 8005148 <_vfiprintf_r+0x12c>
 8005110:	06d1      	lsls	r1, r2, #27
 8005112:	bf44      	itt	mi
 8005114:	2320      	movmi	r3, #32
 8005116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800511a:	0713      	lsls	r3, r2, #28
 800511c:	bf44      	itt	mi
 800511e:	232b      	movmi	r3, #43	; 0x2b
 8005120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005124:	f89a 3000 	ldrb.w	r3, [sl]
 8005128:	2b2a      	cmp	r3, #42	; 0x2a
 800512a:	d015      	beq.n	8005158 <_vfiprintf_r+0x13c>
 800512c:	9a07      	ldr	r2, [sp, #28]
 800512e:	4654      	mov	r4, sl
 8005130:	2000      	movs	r0, #0
 8005132:	f04f 0c0a 	mov.w	ip, #10
 8005136:	4621      	mov	r1, r4
 8005138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800513c:	3b30      	subs	r3, #48	; 0x30
 800513e:	2b09      	cmp	r3, #9
 8005140:	d94e      	bls.n	80051e0 <_vfiprintf_r+0x1c4>
 8005142:	b1b0      	cbz	r0, 8005172 <_vfiprintf_r+0x156>
 8005144:	9207      	str	r2, [sp, #28]
 8005146:	e014      	b.n	8005172 <_vfiprintf_r+0x156>
 8005148:	eba0 0308 	sub.w	r3, r0, r8
 800514c:	fa09 f303 	lsl.w	r3, r9, r3
 8005150:	4313      	orrs	r3, r2
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	46a2      	mov	sl, r4
 8005156:	e7d2      	b.n	80050fe <_vfiprintf_r+0xe2>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	1d19      	adds	r1, r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	9103      	str	r1, [sp, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfbb      	ittet	lt
 8005164:	425b      	neglt	r3, r3
 8005166:	f042 0202 	orrlt.w	r2, r2, #2
 800516a:	9307      	strge	r3, [sp, #28]
 800516c:	9307      	strlt	r3, [sp, #28]
 800516e:	bfb8      	it	lt
 8005170:	9204      	strlt	r2, [sp, #16]
 8005172:	7823      	ldrb	r3, [r4, #0]
 8005174:	2b2e      	cmp	r3, #46	; 0x2e
 8005176:	d10c      	bne.n	8005192 <_vfiprintf_r+0x176>
 8005178:	7863      	ldrb	r3, [r4, #1]
 800517a:	2b2a      	cmp	r3, #42	; 0x2a
 800517c:	d135      	bne.n	80051ea <_vfiprintf_r+0x1ce>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	1d1a      	adds	r2, r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	9203      	str	r2, [sp, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfb8      	it	lt
 800518a:	f04f 33ff 	movlt.w	r3, #4294967295
 800518e:	3402      	adds	r4, #2
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005278 <_vfiprintf_r+0x25c>
 8005196:	7821      	ldrb	r1, [r4, #0]
 8005198:	2203      	movs	r2, #3
 800519a:	4650      	mov	r0, sl
 800519c:	f7fb f828 	bl	80001f0 <memchr>
 80051a0:	b140      	cbz	r0, 80051b4 <_vfiprintf_r+0x198>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	eba0 000a 	sub.w	r0, r0, sl
 80051a8:	fa03 f000 	lsl.w	r0, r3, r0
 80051ac:	9b04      	ldr	r3, [sp, #16]
 80051ae:	4303      	orrs	r3, r0
 80051b0:	3401      	adds	r4, #1
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b8:	482c      	ldr	r0, [pc, #176]	; (800526c <_vfiprintf_r+0x250>)
 80051ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051be:	2206      	movs	r2, #6
 80051c0:	f7fb f816 	bl	80001f0 <memchr>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d03f      	beq.n	8005248 <_vfiprintf_r+0x22c>
 80051c8:	4b29      	ldr	r3, [pc, #164]	; (8005270 <_vfiprintf_r+0x254>)
 80051ca:	bb1b      	cbnz	r3, 8005214 <_vfiprintf_r+0x1f8>
 80051cc:	9b03      	ldr	r3, [sp, #12]
 80051ce:	3307      	adds	r3, #7
 80051d0:	f023 0307 	bic.w	r3, r3, #7
 80051d4:	3308      	adds	r3, #8
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051da:	443b      	add	r3, r7
 80051dc:	9309      	str	r3, [sp, #36]	; 0x24
 80051de:	e767      	b.n	80050b0 <_vfiprintf_r+0x94>
 80051e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e4:	460c      	mov	r4, r1
 80051e6:	2001      	movs	r0, #1
 80051e8:	e7a5      	b.n	8005136 <_vfiprintf_r+0x11a>
 80051ea:	2300      	movs	r3, #0
 80051ec:	3401      	adds	r4, #1
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 0c0a 	mov.w	ip, #10
 80051f6:	4620      	mov	r0, r4
 80051f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051fc:	3a30      	subs	r2, #48	; 0x30
 80051fe:	2a09      	cmp	r2, #9
 8005200:	d903      	bls.n	800520a <_vfiprintf_r+0x1ee>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0c5      	beq.n	8005192 <_vfiprintf_r+0x176>
 8005206:	9105      	str	r1, [sp, #20]
 8005208:	e7c3      	b.n	8005192 <_vfiprintf_r+0x176>
 800520a:	fb0c 2101 	mla	r1, ip, r1, r2
 800520e:	4604      	mov	r4, r0
 8005210:	2301      	movs	r3, #1
 8005212:	e7f0      	b.n	80051f6 <_vfiprintf_r+0x1da>
 8005214:	ab03      	add	r3, sp, #12
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	462a      	mov	r2, r5
 800521a:	4b16      	ldr	r3, [pc, #88]	; (8005274 <_vfiprintf_r+0x258>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	4630      	mov	r0, r6
 8005220:	f7fd ffe0 	bl	80031e4 <_printf_float>
 8005224:	4607      	mov	r7, r0
 8005226:	1c78      	adds	r0, r7, #1
 8005228:	d1d6      	bne.n	80051d8 <_vfiprintf_r+0x1bc>
 800522a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800522c:	07d9      	lsls	r1, r3, #31
 800522e:	d405      	bmi.n	800523c <_vfiprintf_r+0x220>
 8005230:	89ab      	ldrh	r3, [r5, #12]
 8005232:	059a      	lsls	r2, r3, #22
 8005234:	d402      	bmi.n	800523c <_vfiprintf_r+0x220>
 8005236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005238:	f000 faaf 	bl	800579a <__retarget_lock_release_recursive>
 800523c:	89ab      	ldrh	r3, [r5, #12]
 800523e:	065b      	lsls	r3, r3, #25
 8005240:	f53f af12 	bmi.w	8005068 <_vfiprintf_r+0x4c>
 8005244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005246:	e711      	b.n	800506c <_vfiprintf_r+0x50>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <_vfiprintf_r+0x258>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4630      	mov	r0, r6
 8005254:	f7fe fa6a 	bl	800372c <_printf_i>
 8005258:	e7e4      	b.n	8005224 <_vfiprintf_r+0x208>
 800525a:	bf00      	nop
 800525c:	08005e04 	.word	0x08005e04
 8005260:	08005e24 	.word	0x08005e24
 8005264:	08005de4 	.word	0x08005de4
 8005268:	08005cd2 	.word	0x08005cd2
 800526c:	08005cdc 	.word	0x08005cdc
 8005270:	080031e5 	.word	0x080031e5
 8005274:	08004ff7 	.word	0x08004ff7
 8005278:	08005cd8 	.word	0x08005cd8

0800527c <__swbuf_r>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	460e      	mov	r6, r1
 8005280:	4614      	mov	r4, r2
 8005282:	4605      	mov	r5, r0
 8005284:	b118      	cbz	r0, 800528e <__swbuf_r+0x12>
 8005286:	6983      	ldr	r3, [r0, #24]
 8005288:	b90b      	cbnz	r3, 800528e <__swbuf_r+0x12>
 800528a:	f000 f9e7 	bl	800565c <__sinit>
 800528e:	4b21      	ldr	r3, [pc, #132]	; (8005314 <__swbuf_r+0x98>)
 8005290:	429c      	cmp	r4, r3
 8005292:	d12b      	bne.n	80052ec <__swbuf_r+0x70>
 8005294:	686c      	ldr	r4, [r5, #4]
 8005296:	69a3      	ldr	r3, [r4, #24]
 8005298:	60a3      	str	r3, [r4, #8]
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	071a      	lsls	r2, r3, #28
 800529e:	d52f      	bpl.n	8005300 <__swbuf_r+0x84>
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	b36b      	cbz	r3, 8005300 <__swbuf_r+0x84>
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	1ac0      	subs	r0, r0, r3
 80052aa:	6963      	ldr	r3, [r4, #20]
 80052ac:	b2f6      	uxtb	r6, r6
 80052ae:	4283      	cmp	r3, r0
 80052b0:	4637      	mov	r7, r6
 80052b2:	dc04      	bgt.n	80052be <__swbuf_r+0x42>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f93c 	bl	8005534 <_fflush_r>
 80052bc:	bb30      	cbnz	r0, 800530c <__swbuf_r+0x90>
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60a3      	str	r3, [r4, #8]
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	701e      	strb	r6, [r3, #0]
 80052cc:	6963      	ldr	r3, [r4, #20]
 80052ce:	3001      	adds	r0, #1
 80052d0:	4283      	cmp	r3, r0
 80052d2:	d004      	beq.n	80052de <__swbuf_r+0x62>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d506      	bpl.n	80052e8 <__swbuf_r+0x6c>
 80052da:	2e0a      	cmp	r6, #10
 80052dc:	d104      	bne.n	80052e8 <__swbuf_r+0x6c>
 80052de:	4621      	mov	r1, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 f927 	bl	8005534 <_fflush_r>
 80052e6:	b988      	cbnz	r0, 800530c <__swbuf_r+0x90>
 80052e8:	4638      	mov	r0, r7
 80052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <__swbuf_r+0x9c>)
 80052ee:	429c      	cmp	r4, r3
 80052f0:	d101      	bne.n	80052f6 <__swbuf_r+0x7a>
 80052f2:	68ac      	ldr	r4, [r5, #8]
 80052f4:	e7cf      	b.n	8005296 <__swbuf_r+0x1a>
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <__swbuf_r+0xa0>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	bf08      	it	eq
 80052fc:	68ec      	ldreq	r4, [r5, #12]
 80052fe:	e7ca      	b.n	8005296 <__swbuf_r+0x1a>
 8005300:	4621      	mov	r1, r4
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f81a 	bl	800533c <__swsetup_r>
 8005308:	2800      	cmp	r0, #0
 800530a:	d0cb      	beq.n	80052a4 <__swbuf_r+0x28>
 800530c:	f04f 37ff 	mov.w	r7, #4294967295
 8005310:	e7ea      	b.n	80052e8 <__swbuf_r+0x6c>
 8005312:	bf00      	nop
 8005314:	08005e04 	.word	0x08005e04
 8005318:	08005e24 	.word	0x08005e24
 800531c:	08005de4 	.word	0x08005de4

08005320 <__ascii_wctomb>:
 8005320:	b149      	cbz	r1, 8005336 <__ascii_wctomb+0x16>
 8005322:	2aff      	cmp	r2, #255	; 0xff
 8005324:	bf85      	ittet	hi
 8005326:	238a      	movhi	r3, #138	; 0x8a
 8005328:	6003      	strhi	r3, [r0, #0]
 800532a:	700a      	strbls	r2, [r1, #0]
 800532c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005330:	bf98      	it	ls
 8005332:	2001      	movls	r0, #1
 8005334:	4770      	bx	lr
 8005336:	4608      	mov	r0, r1
 8005338:	4770      	bx	lr
	...

0800533c <__swsetup_r>:
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <__swsetup_r+0xcc>)
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	4606      	mov	r6, r0
 8005344:	460c      	mov	r4, r1
 8005346:	b125      	cbz	r5, 8005352 <__swsetup_r+0x16>
 8005348:	69ab      	ldr	r3, [r5, #24]
 800534a:	b913      	cbnz	r3, 8005352 <__swsetup_r+0x16>
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f985 	bl	800565c <__sinit>
 8005352:	4b2e      	ldr	r3, [pc, #184]	; (800540c <__swsetup_r+0xd0>)
 8005354:	429c      	cmp	r4, r3
 8005356:	d10f      	bne.n	8005378 <__swsetup_r+0x3c>
 8005358:	686c      	ldr	r4, [r5, #4]
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005360:	0719      	lsls	r1, r3, #28
 8005362:	d42c      	bmi.n	80053be <__swsetup_r+0x82>
 8005364:	06dd      	lsls	r5, r3, #27
 8005366:	d411      	bmi.n	800538c <__swsetup_r+0x50>
 8005368:	2309      	movs	r3, #9
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	e03e      	b.n	80053f6 <__swsetup_r+0xba>
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <__swsetup_r+0xd4>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d101      	bne.n	8005382 <__swsetup_r+0x46>
 800537e:	68ac      	ldr	r4, [r5, #8]
 8005380:	e7eb      	b.n	800535a <__swsetup_r+0x1e>
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <__swsetup_r+0xd8>)
 8005384:	429c      	cmp	r4, r3
 8005386:	bf08      	it	eq
 8005388:	68ec      	ldreq	r4, [r5, #12]
 800538a:	e7e6      	b.n	800535a <__swsetup_r+0x1e>
 800538c:	0758      	lsls	r0, r3, #29
 800538e:	d512      	bpl.n	80053b6 <__swsetup_r+0x7a>
 8005390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005392:	b141      	cbz	r1, 80053a6 <__swsetup_r+0x6a>
 8005394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005398:	4299      	cmp	r1, r3
 800539a:	d002      	beq.n	80053a2 <__swsetup_r+0x66>
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff fd0b 	bl	8004db8 <_free_r>
 80053a2:	2300      	movs	r3, #0
 80053a4:	6363      	str	r3, [r4, #52]	; 0x34
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	81a3      	strh	r3, [r4, #12]
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	b94b      	cbnz	r3, 80053d6 <__swsetup_r+0x9a>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d003      	beq.n	80053d6 <__swsetup_r+0x9a>
 80053ce:	4621      	mov	r1, r4
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 fa07 	bl	80057e4 <__smakebuf_r>
 80053d6:	89a0      	ldrh	r0, [r4, #12]
 80053d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053dc:	f010 0301 	ands.w	r3, r0, #1
 80053e0:	d00a      	beq.n	80053f8 <__swsetup_r+0xbc>
 80053e2:	2300      	movs	r3, #0
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6963      	ldr	r3, [r4, #20]
 80053e8:	425b      	negs	r3, r3
 80053ea:	61a3      	str	r3, [r4, #24]
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	b943      	cbnz	r3, 8005402 <__swsetup_r+0xc6>
 80053f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053f4:	d1ba      	bne.n	800536c <__swsetup_r+0x30>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	0781      	lsls	r1, r0, #30
 80053fa:	bf58      	it	pl
 80053fc:	6963      	ldrpl	r3, [r4, #20]
 80053fe:	60a3      	str	r3, [r4, #8]
 8005400:	e7f4      	b.n	80053ec <__swsetup_r+0xb0>
 8005402:	2000      	movs	r0, #0
 8005404:	e7f7      	b.n	80053f6 <__swsetup_r+0xba>
 8005406:	bf00      	nop
 8005408:	20000028 	.word	0x20000028
 800540c:	08005e04 	.word	0x08005e04
 8005410:	08005e24 	.word	0x08005e24
 8005414:	08005de4 	.word	0x08005de4

08005418 <abort>:
 8005418:	b508      	push	{r3, lr}
 800541a:	2006      	movs	r0, #6
 800541c:	f000 fa4a 	bl	80058b4 <raise>
 8005420:	2001      	movs	r0, #1
 8005422:	f7fc fbb1 	bl	8001b88 <_exit>
	...

08005428 <__sflush_r>:
 8005428:	898a      	ldrh	r2, [r1, #12]
 800542a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	4605      	mov	r5, r0
 8005430:	0710      	lsls	r0, r2, #28
 8005432:	460c      	mov	r4, r1
 8005434:	d458      	bmi.n	80054e8 <__sflush_r+0xc0>
 8005436:	684b      	ldr	r3, [r1, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	dc05      	bgt.n	8005448 <__sflush_r+0x20>
 800543c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	dc02      	bgt.n	8005448 <__sflush_r+0x20>
 8005442:	2000      	movs	r0, #0
 8005444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800544a:	2e00      	cmp	r6, #0
 800544c:	d0f9      	beq.n	8005442 <__sflush_r+0x1a>
 800544e:	2300      	movs	r3, #0
 8005450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005454:	682f      	ldr	r7, [r5, #0]
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	d032      	beq.n	80054c0 <__sflush_r+0x98>
 800545a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	075a      	lsls	r2, r3, #29
 8005460:	d505      	bpl.n	800546e <__sflush_r+0x46>
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	1ac0      	subs	r0, r0, r3
 8005466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005468:	b10b      	cbz	r3, 800546e <__sflush_r+0x46>
 800546a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800546c:	1ac0      	subs	r0, r0, r3
 800546e:	2300      	movs	r3, #0
 8005470:	4602      	mov	r2, r0
 8005472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005474:	6a21      	ldr	r1, [r4, #32]
 8005476:	4628      	mov	r0, r5
 8005478:	47b0      	blx	r6
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	d106      	bne.n	800548e <__sflush_r+0x66>
 8005480:	6829      	ldr	r1, [r5, #0]
 8005482:	291d      	cmp	r1, #29
 8005484:	d82c      	bhi.n	80054e0 <__sflush_r+0xb8>
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <__sflush_r+0x108>)
 8005488:	40ca      	lsrs	r2, r1
 800548a:	07d6      	lsls	r6, r2, #31
 800548c:	d528      	bpl.n	80054e0 <__sflush_r+0xb8>
 800548e:	2200      	movs	r2, #0
 8005490:	6062      	str	r2, [r4, #4]
 8005492:	04d9      	lsls	r1, r3, #19
 8005494:	6922      	ldr	r2, [r4, #16]
 8005496:	6022      	str	r2, [r4, #0]
 8005498:	d504      	bpl.n	80054a4 <__sflush_r+0x7c>
 800549a:	1c42      	adds	r2, r0, #1
 800549c:	d101      	bne.n	80054a2 <__sflush_r+0x7a>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	b903      	cbnz	r3, 80054a4 <__sflush_r+0x7c>
 80054a2:	6560      	str	r0, [r4, #84]	; 0x54
 80054a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054a6:	602f      	str	r7, [r5, #0]
 80054a8:	2900      	cmp	r1, #0
 80054aa:	d0ca      	beq.n	8005442 <__sflush_r+0x1a>
 80054ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <__sflush_r+0x92>
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7ff fc7f 	bl	8004db8 <_free_r>
 80054ba:	2000      	movs	r0, #0
 80054bc:	6360      	str	r0, [r4, #52]	; 0x34
 80054be:	e7c1      	b.n	8005444 <__sflush_r+0x1c>
 80054c0:	6a21      	ldr	r1, [r4, #32]
 80054c2:	2301      	movs	r3, #1
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b0      	blx	r6
 80054c8:	1c41      	adds	r1, r0, #1
 80054ca:	d1c7      	bne.n	800545c <__sflush_r+0x34>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0c4      	beq.n	800545c <__sflush_r+0x34>
 80054d2:	2b1d      	cmp	r3, #29
 80054d4:	d001      	beq.n	80054da <__sflush_r+0xb2>
 80054d6:	2b16      	cmp	r3, #22
 80054d8:	d101      	bne.n	80054de <__sflush_r+0xb6>
 80054da:	602f      	str	r7, [r5, #0]
 80054dc:	e7b1      	b.n	8005442 <__sflush_r+0x1a>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	e7ad      	b.n	8005444 <__sflush_r+0x1c>
 80054e8:	690f      	ldr	r7, [r1, #16]
 80054ea:	2f00      	cmp	r7, #0
 80054ec:	d0a9      	beq.n	8005442 <__sflush_r+0x1a>
 80054ee:	0793      	lsls	r3, r2, #30
 80054f0:	680e      	ldr	r6, [r1, #0]
 80054f2:	bf08      	it	eq
 80054f4:	694b      	ldreq	r3, [r1, #20]
 80054f6:	600f      	str	r7, [r1, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2300      	movne	r3, #0
 80054fc:	eba6 0807 	sub.w	r8, r6, r7
 8005500:	608b      	str	r3, [r1, #8]
 8005502:	f1b8 0f00 	cmp.w	r8, #0
 8005506:	dd9c      	ble.n	8005442 <__sflush_r+0x1a>
 8005508:	6a21      	ldr	r1, [r4, #32]
 800550a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800550c:	4643      	mov	r3, r8
 800550e:	463a      	mov	r2, r7
 8005510:	4628      	mov	r0, r5
 8005512:	47b0      	blx	r6
 8005514:	2800      	cmp	r0, #0
 8005516:	dc06      	bgt.n	8005526 <__sflush_r+0xfe>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	e78e      	b.n	8005444 <__sflush_r+0x1c>
 8005526:	4407      	add	r7, r0
 8005528:	eba8 0800 	sub.w	r8, r8, r0
 800552c:	e7e9      	b.n	8005502 <__sflush_r+0xda>
 800552e:	bf00      	nop
 8005530:	20400001 	.word	0x20400001

08005534 <_fflush_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4605      	mov	r5, r0
 800553a:	460c      	mov	r4, r1
 800553c:	b913      	cbnz	r3, 8005544 <_fflush_r+0x10>
 800553e:	2500      	movs	r5, #0
 8005540:	4628      	mov	r0, r5
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	b118      	cbz	r0, 800554e <_fflush_r+0x1a>
 8005546:	6983      	ldr	r3, [r0, #24]
 8005548:	b90b      	cbnz	r3, 800554e <_fflush_r+0x1a>
 800554a:	f000 f887 	bl	800565c <__sinit>
 800554e:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <_fflush_r+0x6c>)
 8005550:	429c      	cmp	r4, r3
 8005552:	d11b      	bne.n	800558c <_fflush_r+0x58>
 8005554:	686c      	ldr	r4, [r5, #4]
 8005556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0ef      	beq.n	800553e <_fflush_r+0xa>
 800555e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005560:	07d0      	lsls	r0, r2, #31
 8005562:	d404      	bmi.n	800556e <_fflush_r+0x3a>
 8005564:	0599      	lsls	r1, r3, #22
 8005566:	d402      	bmi.n	800556e <_fflush_r+0x3a>
 8005568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556a:	f000 f915 	bl	8005798 <__retarget_lock_acquire_recursive>
 800556e:	4628      	mov	r0, r5
 8005570:	4621      	mov	r1, r4
 8005572:	f7ff ff59 	bl	8005428 <__sflush_r>
 8005576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005578:	07da      	lsls	r2, r3, #31
 800557a:	4605      	mov	r5, r0
 800557c:	d4e0      	bmi.n	8005540 <_fflush_r+0xc>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	059b      	lsls	r3, r3, #22
 8005582:	d4dd      	bmi.n	8005540 <_fflush_r+0xc>
 8005584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005586:	f000 f908 	bl	800579a <__retarget_lock_release_recursive>
 800558a:	e7d9      	b.n	8005540 <_fflush_r+0xc>
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <_fflush_r+0x70>)
 800558e:	429c      	cmp	r4, r3
 8005590:	d101      	bne.n	8005596 <_fflush_r+0x62>
 8005592:	68ac      	ldr	r4, [r5, #8]
 8005594:	e7df      	b.n	8005556 <_fflush_r+0x22>
 8005596:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <_fflush_r+0x74>)
 8005598:	429c      	cmp	r4, r3
 800559a:	bf08      	it	eq
 800559c:	68ec      	ldreq	r4, [r5, #12]
 800559e:	e7da      	b.n	8005556 <_fflush_r+0x22>
 80055a0:	08005e04 	.word	0x08005e04
 80055a4:	08005e24 	.word	0x08005e24
 80055a8:	08005de4 	.word	0x08005de4

080055ac <std>:
 80055ac:	2300      	movs	r3, #0
 80055ae:	b510      	push	{r4, lr}
 80055b0:	4604      	mov	r4, r0
 80055b2:	e9c0 3300 	strd	r3, r3, [r0]
 80055b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ba:	6083      	str	r3, [r0, #8]
 80055bc:	8181      	strh	r1, [r0, #12]
 80055be:	6643      	str	r3, [r0, #100]	; 0x64
 80055c0:	81c2      	strh	r2, [r0, #14]
 80055c2:	6183      	str	r3, [r0, #24]
 80055c4:	4619      	mov	r1, r3
 80055c6:	2208      	movs	r2, #8
 80055c8:	305c      	adds	r0, #92	; 0x5c
 80055ca:	f7fd fd63 	bl	8003094 <memset>
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <std+0x38>)
 80055d0:	6263      	str	r3, [r4, #36]	; 0x24
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <std+0x3c>)
 80055d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <std+0x40>)
 80055d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <std+0x44>)
 80055dc:	6224      	str	r4, [r4, #32]
 80055de:	6323      	str	r3, [r4, #48]	; 0x30
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	bf00      	nop
 80055e4:	080058ed 	.word	0x080058ed
 80055e8:	0800590f 	.word	0x0800590f
 80055ec:	08005947 	.word	0x08005947
 80055f0:	0800596b 	.word	0x0800596b

080055f4 <_cleanup_r>:
 80055f4:	4901      	ldr	r1, [pc, #4]	; (80055fc <_cleanup_r+0x8>)
 80055f6:	f000 b8af 	b.w	8005758 <_fwalk_reent>
 80055fa:	bf00      	nop
 80055fc:	08005535 	.word	0x08005535

08005600 <__sfmoreglue>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	1e4a      	subs	r2, r1, #1
 8005604:	2568      	movs	r5, #104	; 0x68
 8005606:	4355      	muls	r5, r2
 8005608:	460e      	mov	r6, r1
 800560a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800560e:	f7ff fc23 	bl	8004e58 <_malloc_r>
 8005612:	4604      	mov	r4, r0
 8005614:	b140      	cbz	r0, 8005628 <__sfmoreglue+0x28>
 8005616:	2100      	movs	r1, #0
 8005618:	e9c0 1600 	strd	r1, r6, [r0]
 800561c:	300c      	adds	r0, #12
 800561e:	60a0      	str	r0, [r4, #8]
 8005620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005624:	f7fd fd36 	bl	8003094 <memset>
 8005628:	4620      	mov	r0, r4
 800562a:	bd70      	pop	{r4, r5, r6, pc}

0800562c <__sfp_lock_acquire>:
 800562c:	4801      	ldr	r0, [pc, #4]	; (8005634 <__sfp_lock_acquire+0x8>)
 800562e:	f000 b8b3 	b.w	8005798 <__retarget_lock_acquire_recursive>
 8005632:	bf00      	nop
 8005634:	20000514 	.word	0x20000514

08005638 <__sfp_lock_release>:
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <__sfp_lock_release+0x8>)
 800563a:	f000 b8ae 	b.w	800579a <__retarget_lock_release_recursive>
 800563e:	bf00      	nop
 8005640:	20000514 	.word	0x20000514

08005644 <__sinit_lock_acquire>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__sinit_lock_acquire+0x8>)
 8005646:	f000 b8a7 	b.w	8005798 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	2000050f 	.word	0x2000050f

08005650 <__sinit_lock_release>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__sinit_lock_release+0x8>)
 8005652:	f000 b8a2 	b.w	800579a <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	2000050f 	.word	0x2000050f

0800565c <__sinit>:
 800565c:	b510      	push	{r4, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	f7ff fff0 	bl	8005644 <__sinit_lock_acquire>
 8005664:	69a3      	ldr	r3, [r4, #24]
 8005666:	b11b      	cbz	r3, 8005670 <__sinit+0x14>
 8005668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800566c:	f7ff bff0 	b.w	8005650 <__sinit_lock_release>
 8005670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005674:	6523      	str	r3, [r4, #80]	; 0x50
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <__sinit+0x68>)
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <__sinit+0x6c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	62a2      	str	r2, [r4, #40]	; 0x28
 800567e:	42a3      	cmp	r3, r4
 8005680:	bf04      	itt	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	61a3      	streq	r3, [r4, #24]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f820 	bl	80056cc <__sfp>
 800568c:	6060      	str	r0, [r4, #4]
 800568e:	4620      	mov	r0, r4
 8005690:	f000 f81c 	bl	80056cc <__sfp>
 8005694:	60a0      	str	r0, [r4, #8]
 8005696:	4620      	mov	r0, r4
 8005698:	f000 f818 	bl	80056cc <__sfp>
 800569c:	2200      	movs	r2, #0
 800569e:	60e0      	str	r0, [r4, #12]
 80056a0:	2104      	movs	r1, #4
 80056a2:	6860      	ldr	r0, [r4, #4]
 80056a4:	f7ff ff82 	bl	80055ac <std>
 80056a8:	68a0      	ldr	r0, [r4, #8]
 80056aa:	2201      	movs	r2, #1
 80056ac:	2109      	movs	r1, #9
 80056ae:	f7ff ff7d 	bl	80055ac <std>
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	2202      	movs	r2, #2
 80056b6:	2112      	movs	r1, #18
 80056b8:	f7ff ff78 	bl	80055ac <std>
 80056bc:	2301      	movs	r3, #1
 80056be:	61a3      	str	r3, [r4, #24]
 80056c0:	e7d2      	b.n	8005668 <__sinit+0xc>
 80056c2:	bf00      	nop
 80056c4:	08005a60 	.word	0x08005a60
 80056c8:	080055f5 	.word	0x080055f5

080056cc <__sfp>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	4607      	mov	r7, r0
 80056d0:	f7ff ffac 	bl	800562c <__sfp_lock_acquire>
 80056d4:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <__sfp+0x84>)
 80056d6:	681e      	ldr	r6, [r3, #0]
 80056d8:	69b3      	ldr	r3, [r6, #24]
 80056da:	b913      	cbnz	r3, 80056e2 <__sfp+0x16>
 80056dc:	4630      	mov	r0, r6
 80056de:	f7ff ffbd 	bl	800565c <__sinit>
 80056e2:	3648      	adds	r6, #72	; 0x48
 80056e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	d503      	bpl.n	80056f4 <__sfp+0x28>
 80056ec:	6833      	ldr	r3, [r6, #0]
 80056ee:	b30b      	cbz	r3, 8005734 <__sfp+0x68>
 80056f0:	6836      	ldr	r6, [r6, #0]
 80056f2:	e7f7      	b.n	80056e4 <__sfp+0x18>
 80056f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056f8:	b9d5      	cbnz	r5, 8005730 <__sfp+0x64>
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <__sfp+0x88>)
 80056fc:	60e3      	str	r3, [r4, #12]
 80056fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005702:	6665      	str	r5, [r4, #100]	; 0x64
 8005704:	f000 f847 	bl	8005796 <__retarget_lock_init_recursive>
 8005708:	f7ff ff96 	bl	8005638 <__sfp_lock_release>
 800570c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005714:	6025      	str	r5, [r4, #0]
 8005716:	61a5      	str	r5, [r4, #24]
 8005718:	2208      	movs	r2, #8
 800571a:	4629      	mov	r1, r5
 800571c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005720:	f7fd fcb8 	bl	8003094 <memset>
 8005724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800572c:	4620      	mov	r0, r4
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	3468      	adds	r4, #104	; 0x68
 8005732:	e7d9      	b.n	80056e8 <__sfp+0x1c>
 8005734:	2104      	movs	r1, #4
 8005736:	4638      	mov	r0, r7
 8005738:	f7ff ff62 	bl	8005600 <__sfmoreglue>
 800573c:	4604      	mov	r4, r0
 800573e:	6030      	str	r0, [r6, #0]
 8005740:	2800      	cmp	r0, #0
 8005742:	d1d5      	bne.n	80056f0 <__sfp+0x24>
 8005744:	f7ff ff78 	bl	8005638 <__sfp_lock_release>
 8005748:	230c      	movs	r3, #12
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	e7ee      	b.n	800572c <__sfp+0x60>
 800574e:	bf00      	nop
 8005750:	08005a60 	.word	0x08005a60
 8005754:	ffff0001 	.word	0xffff0001

08005758 <_fwalk_reent>:
 8005758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575c:	4606      	mov	r6, r0
 800575e:	4688      	mov	r8, r1
 8005760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005764:	2700      	movs	r7, #0
 8005766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800576a:	f1b9 0901 	subs.w	r9, r9, #1
 800576e:	d505      	bpl.n	800577c <_fwalk_reent+0x24>
 8005770:	6824      	ldr	r4, [r4, #0]
 8005772:	2c00      	cmp	r4, #0
 8005774:	d1f7      	bne.n	8005766 <_fwalk_reent+0xe>
 8005776:	4638      	mov	r0, r7
 8005778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577c:	89ab      	ldrh	r3, [r5, #12]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d907      	bls.n	8005792 <_fwalk_reent+0x3a>
 8005782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005786:	3301      	adds	r3, #1
 8005788:	d003      	beq.n	8005792 <_fwalk_reent+0x3a>
 800578a:	4629      	mov	r1, r5
 800578c:	4630      	mov	r0, r6
 800578e:	47c0      	blx	r8
 8005790:	4307      	orrs	r7, r0
 8005792:	3568      	adds	r5, #104	; 0x68
 8005794:	e7e9      	b.n	800576a <_fwalk_reent+0x12>

08005796 <__retarget_lock_init_recursive>:
 8005796:	4770      	bx	lr

08005798 <__retarget_lock_acquire_recursive>:
 8005798:	4770      	bx	lr

0800579a <__retarget_lock_release_recursive>:
 800579a:	4770      	bx	lr

0800579c <__swhatbuf_r>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	460e      	mov	r6, r1
 80057a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a4:	2900      	cmp	r1, #0
 80057a6:	b096      	sub	sp, #88	; 0x58
 80057a8:	4614      	mov	r4, r2
 80057aa:	461d      	mov	r5, r3
 80057ac:	da07      	bge.n	80057be <__swhatbuf_r+0x22>
 80057ae:	2300      	movs	r3, #0
 80057b0:	602b      	str	r3, [r5, #0]
 80057b2:	89b3      	ldrh	r3, [r6, #12]
 80057b4:	061a      	lsls	r2, r3, #24
 80057b6:	d410      	bmi.n	80057da <__swhatbuf_r+0x3e>
 80057b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057bc:	e00e      	b.n	80057dc <__swhatbuf_r+0x40>
 80057be:	466a      	mov	r2, sp
 80057c0:	f000 f8fa 	bl	80059b8 <_fstat_r>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dbf2      	blt.n	80057ae <__swhatbuf_r+0x12>
 80057c8:	9a01      	ldr	r2, [sp, #4]
 80057ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057d2:	425a      	negs	r2, r3
 80057d4:	415a      	adcs	r2, r3
 80057d6:	602a      	str	r2, [r5, #0]
 80057d8:	e7ee      	b.n	80057b8 <__swhatbuf_r+0x1c>
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	2000      	movs	r0, #0
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	b016      	add	sp, #88	; 0x58
 80057e2:	bd70      	pop	{r4, r5, r6, pc}

080057e4 <__smakebuf_r>:
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057e8:	079d      	lsls	r5, r3, #30
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	d507      	bpl.n	8005800 <__smakebuf_r+0x1c>
 80057f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2301      	movs	r3, #1
 80057fa:	6163      	str	r3, [r4, #20]
 80057fc:	b002      	add	sp, #8
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	ab01      	add	r3, sp, #4
 8005802:	466a      	mov	r2, sp
 8005804:	f7ff ffca 	bl	800579c <__swhatbuf_r>
 8005808:	9900      	ldr	r1, [sp, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff fb23 	bl	8004e58 <_malloc_r>
 8005812:	b948      	cbnz	r0, 8005828 <__smakebuf_r+0x44>
 8005814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d4ef      	bmi.n	80057fc <__smakebuf_r+0x18>
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	e7e3      	b.n	80057f0 <__smakebuf_r+0xc>
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <__smakebuf_r+0x7c>)
 800582a:	62b3      	str	r3, [r6, #40]	; 0x28
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	9b00      	ldr	r3, [sp, #0]
 8005838:	6163      	str	r3, [r4, #20]
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	6120      	str	r0, [r4, #16]
 800583e:	b15b      	cbz	r3, 8005858 <__smakebuf_r+0x74>
 8005840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005844:	4630      	mov	r0, r6
 8005846:	f000 f8c9 	bl	80059dc <_isatty_r>
 800584a:	b128      	cbz	r0, 8005858 <__smakebuf_r+0x74>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	81a3      	strh	r3, [r4, #12]
 8005858:	89a0      	ldrh	r0, [r4, #12]
 800585a:	4305      	orrs	r5, r0
 800585c:	81a5      	strh	r5, [r4, #12]
 800585e:	e7cd      	b.n	80057fc <__smakebuf_r+0x18>
 8005860:	080055f5 	.word	0x080055f5

08005864 <_raise_r>:
 8005864:	291f      	cmp	r1, #31
 8005866:	b538      	push	{r3, r4, r5, lr}
 8005868:	4604      	mov	r4, r0
 800586a:	460d      	mov	r5, r1
 800586c:	d904      	bls.n	8005878 <_raise_r+0x14>
 800586e:	2316      	movs	r3, #22
 8005870:	6003      	str	r3, [r0, #0]
 8005872:	f04f 30ff 	mov.w	r0, #4294967295
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800587a:	b112      	cbz	r2, 8005882 <_raise_r+0x1e>
 800587c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005880:	b94b      	cbnz	r3, 8005896 <_raise_r+0x32>
 8005882:	4620      	mov	r0, r4
 8005884:	f000 f830 	bl	80058e8 <_getpid_r>
 8005888:	462a      	mov	r2, r5
 800588a:	4601      	mov	r1, r0
 800588c:	4620      	mov	r0, r4
 800588e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005892:	f000 b817 	b.w	80058c4 <_kill_r>
 8005896:	2b01      	cmp	r3, #1
 8005898:	d00a      	beq.n	80058b0 <_raise_r+0x4c>
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	d103      	bne.n	80058a6 <_raise_r+0x42>
 800589e:	2316      	movs	r3, #22
 80058a0:	6003      	str	r3, [r0, #0]
 80058a2:	2001      	movs	r0, #1
 80058a4:	e7e7      	b.n	8005876 <_raise_r+0x12>
 80058a6:	2400      	movs	r4, #0
 80058a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058ac:	4628      	mov	r0, r5
 80058ae:	4798      	blx	r3
 80058b0:	2000      	movs	r0, #0
 80058b2:	e7e0      	b.n	8005876 <_raise_r+0x12>

080058b4 <raise>:
 80058b4:	4b02      	ldr	r3, [pc, #8]	; (80058c0 <raise+0xc>)
 80058b6:	4601      	mov	r1, r0
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f7ff bfd3 	b.w	8005864 <_raise_r>
 80058be:	bf00      	nop
 80058c0:	20000028 	.word	0x20000028

080058c4 <_kill_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d07      	ldr	r5, [pc, #28]	; (80058e4 <_kill_r+0x20>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	f7fc f949 	bl	8001b68 <_kill>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d102      	bne.n	80058e0 <_kill_r+0x1c>
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	b103      	cbz	r3, 80058e0 <_kill_r+0x1c>
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	bd38      	pop	{r3, r4, r5, pc}
 80058e2:	bf00      	nop
 80058e4:	20000508 	.word	0x20000508

080058e8 <_getpid_r>:
 80058e8:	f7fc b936 	b.w	8001b58 <_getpid>

080058ec <__sread>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	460c      	mov	r4, r1
 80058f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f4:	f000 f894 	bl	8005a20 <_read_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	bfab      	itete	ge
 80058fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005900:	181b      	addge	r3, r3, r0
 8005902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005906:	bfac      	ite	ge
 8005908:	6563      	strge	r3, [r4, #84]	; 0x54
 800590a:	81a3      	strhlt	r3, [r4, #12]
 800590c:	bd10      	pop	{r4, pc}

0800590e <__swrite>:
 800590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	461f      	mov	r7, r3
 8005914:	898b      	ldrh	r3, [r1, #12]
 8005916:	05db      	lsls	r3, r3, #23
 8005918:	4605      	mov	r5, r0
 800591a:	460c      	mov	r4, r1
 800591c:	4616      	mov	r6, r2
 800591e:	d505      	bpl.n	800592c <__swrite+0x1e>
 8005920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005924:	2302      	movs	r3, #2
 8005926:	2200      	movs	r2, #0
 8005928:	f000 f868 	bl	80059fc <_lseek_r>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	4632      	mov	r2, r6
 800593a:	463b      	mov	r3, r7
 800593c:	4628      	mov	r0, r5
 800593e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005942:	f000 b817 	b.w	8005974 <_write_r>

08005946 <__sseek>:
 8005946:	b510      	push	{r4, lr}
 8005948:	460c      	mov	r4, r1
 800594a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594e:	f000 f855 	bl	80059fc <_lseek_r>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	bf15      	itete	ne
 8005958:	6560      	strne	r0, [r4, #84]	; 0x54
 800595a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800595e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005962:	81a3      	strheq	r3, [r4, #12]
 8005964:	bf18      	it	ne
 8005966:	81a3      	strhne	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__sclose>:
 800596a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596e:	f000 b813 	b.w	8005998 <_close_r>
	...

08005974 <_write_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_write_r+0x20>)
 8005978:	4604      	mov	r4, r0
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	2200      	movs	r2, #0
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f7fc f927 	bl	8001bd6 <_write>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_write_r+0x1e>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_write_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000508 	.word	0x20000508

08005998 <_close_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_close_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fc f933 	bl	8001c0e <_close>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_close_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_close_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000508 	.word	0x20000508

080059b8 <_fstat_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_fstat_r+0x20>)
 80059bc:	2300      	movs	r3, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	f7fc f92e 	bl	8001c26 <_fstat>
 80059ca:	1c43      	adds	r3, r0, #1
 80059cc:	d102      	bne.n	80059d4 <_fstat_r+0x1c>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	b103      	cbz	r3, 80059d4 <_fstat_r+0x1c>
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	bd38      	pop	{r3, r4, r5, pc}
 80059d6:	bf00      	nop
 80059d8:	20000508 	.word	0x20000508

080059dc <_isatty_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d06      	ldr	r5, [pc, #24]	; (80059f8 <_isatty_r+0x1c>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fc f92d 	bl	8001c46 <_isatty>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_isatty_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_isatty_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000508 	.word	0x20000508

080059fc <_lseek_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d07      	ldr	r5, [pc, #28]	; (8005a1c <_lseek_r+0x20>)
 8005a00:	4604      	mov	r4, r0
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	602a      	str	r2, [r5, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7fc f926 	bl	8001c5c <_lseek>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_lseek_r+0x1e>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_lseek_r+0x1e>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	20000508 	.word	0x20000508

08005a20 <_read_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	; (8005a40 <_read_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fc f8b4 	bl	8001b9c <_read>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_read_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_read_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000508 	.word	0x20000508

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
